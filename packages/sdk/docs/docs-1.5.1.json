{"id":0,"name":"@airtable/blocks","kind":0,"flags":{},"children":[{"id":3386,"name":"\"src/perform_record_action\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/perform_record_action.ts","children":[{"id":3476,"name":"UnsubscribeFunction","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Returned by {@link registerRecordActionDataCallback}. Call it to unregister the previously\nregistered function. Do this before registering another function or unmounting the component."},"sources":[{"fileName":"src/perform_record_action.ts","line":22,"character":24}],"type":{"type":"reflection","declaration":{"id":3477,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3478,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/perform_record_action.ts","line":22,"character":26}]}}},{"id":3479,"name":"registerRecordActionDataCallback","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Registers a callback to handle \"open block\" / \"perform record action\" events (from button field).","text":"Returns a unsubscribe function that should be used to unregister the callback for cleanup on\ncomponent unmount, or if you wish to register a different function.\n\nAlso see {@link useRecordActionData}, which subscribes to the same events in a synchronous way.\n\nYour block will not receive \"perform record action\" events until a callback is registered -\nthey're held until registration to ensure the block is ready to handle the event (e.g. has\nfinished loading).\n\nBecause of this, we recommend only registering a callback once, in your top level component -\notherwise, messages could be received while not all callbacks have been successfully registered.\nSimilarly, using both `registerRecordActionDataCallback` and `useRecordActionData` is not\nsupported.\n\nYou can test your block in development by sending \"perform record action\" events to your block\nin the \"Advanced\" panel of the block developer tools.\n\nAfter releasing your block, you can use it with a button field by choosing the \"Open custom\nblock\" action and selecting your block.\n","tags":[{"tag":"example","text":"\n```js\nimport React, {useEffect, useState} from 'react';\nimport {registerRecordActionDataCallback} from '@airtable/blocks/ui';\n\nfunction LatestRecordAction() {\n    const [recordActionData, setRecordActionData] = useState(null);\n\n    const callback = (data) => {\n        console.log('Record action received', data);\n        setRecordActionData(data);\n    }\n\n    useEffect(() => {\n        // Return the unsubscribe function so it's run on cleanup.\n        return registerRecordActionDataCallback(callback);\n    }, [callback]);\n\n    if (recordActionData === null) {\n        return <span>No events yet</span>;\n    }\n\n    return (\n        <ul>\n            <li>Record id: {recordActionData.recordId}</li>\n            <li>View id: {recordActionData.viewId}</li>\n            <li>Table id: {recordActionData.tableId}</li>\n        </ul>\n    );\n}\n```\n\n"}]},"signatures":[{"id":3480,"name":"registerRecordActionDataCallback","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Registers a callback to handle \"open block\" / \"perform record action\" events (from button field).","text":"Returns a unsubscribe function that should be used to unregister the callback for cleanup on\ncomponent unmount, or if you wish to register a different function.\n\nAlso see {@link useRecordActionData}, which subscribes to the same events in a synchronous way.\n\nYour block will not receive \"perform record action\" events until a callback is registered -\nthey're held until registration to ensure the block is ready to handle the event (e.g. has\nfinished loading).\n\nBecause of this, we recommend only registering a callback once, in your top level component -\notherwise, messages could be received while not all callbacks have been successfully registered.\nSimilarly, using both `registerRecordActionDataCallback` and `useRecordActionData` is not\nsupported.\n\nYou can test your block in development by sending \"perform record action\" events to your block\nin the \"Advanced\" panel of the block developer tools.\n\nAfter releasing your block, you can use it with a button field by choosing the \"Open custom\nblock\" action and selecting your block.\n","tags":[{"tag":"example","text":"\n```js\nimport React, {useEffect, useState} from 'react';\nimport {registerRecordActionDataCallback} from '@airtable/blocks/ui';\n\nfunction LatestRecordAction() {\n    const [recordActionData, setRecordActionData] = useState(null);\n\n    const callback = (data) => {\n        console.log('Record action received', data);\n        setRecordActionData(data);\n    }\n\n    useEffect(() => {\n        // Return the unsubscribe function so it's run on cleanup.\n        return registerRecordActionDataCallback(callback);\n    }, [callback]);\n\n    if (recordActionData === null) {\n        return <span>No events yet</span>;\n    }\n\n    return (\n        <ul>\n            <li>Record id: {recordActionData.recordId}</li>\n            <li>View id: {recordActionData.viewId}</li>\n            <li>Table id: {recordActionData.tableId}</li>\n        </ul>\n    );\n}\n```\n\n"}]},"parameters":[{"id":3481,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"RecordActionDataCallback","id":3382}}],"type":{"type":"reference","name":"UnsubscribeFunction","id":3476}}],"sources":[{"fileName":"src/perform_record_action.ts","line":207,"character":48}]}],"groups":[{"title":"Type aliases","kind":4194304,"children":[3476]},{"title":"Functions","kind":64,"children":[3479]}],"sources":[{"fileName":"src/perform_record_action.ts","line":1,"character":0}]},{"id":3377,"name":"\"src/types/record_action_data\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/types/record_action_data.ts","children":[{"id":3378,"name":"RecordActionData","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"The data format used by {@link useRecordActionData} and {@link registerRecordActionDataCallback}\nto represent a record action (for example, a click of a button with \"Open block\" action)."},"children":[{"id":3379,"name":"recordId","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"Id corresponding to the record the button was clicked from."},"sources":[{"fileName":"src/types/record_action_data.ts","line":11,"character":12}],"type":{"type":"reference","name":"RecordId","id":103}},{"id":3381,"name":"tableId","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"Id corresponding to the table containing the record with the button."},"sources":[{"fileName":"src/types/record_action_data.ts","line":15,"character":11}],"type":{"type":"reference","name":"TableId","id":367}},{"id":3380,"name":"viewId","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"Id corresponding to the view the button was clicked from."},"sources":[{"fileName":"src/types/record_action_data.ts","line":13,"character":10}],"type":{"type":"reference","name":"ViewId","id":128}}],"groups":[{"title":"Properties","kind":1024,"children":[3379,3381,3380]}],"sources":[{"fileName":"src/types/record_action_data.ts","line":9,"character":33}]},{"id":3382,"name":"RecordActionDataCallback","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"The signature of the callback provided to {@link registerRecordActionDataCallback}.","text":"Whenever a record action occurs, the callback will be called with {@link RecordActionData}\ncorresponding to the record (for example, the record that the button with \"Open block\" action\nwas clicked from).\n"},"sources":[{"fileName":"src/types/record_action_data.ts","line":24,"character":36}],"type":{"type":"reflection","declaration":{"id":3383,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3384,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3385,"name":"data","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"RecordActionData","id":3378}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/types/record_action_data.ts","line":24,"character":38}]}}}],"groups":[{"title":"Interfaces","kind":256,"children":[3378]},{"title":"Type aliases","kind":4194304,"children":[3382]}],"sources":[{"fileName":"src/types/record_action_data.ts","line":1,"character":0}]},{"id":4713,"name":"\"src/ui/base_provider\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/base_provider.tsx","children":[{"id":4714,"name":"BaseProviderProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link BaseProvider} component.","tags":[{"tag":"docspath","text":"UI/components/BaseProvider\n"}]},"children":[{"id":4716,"name":"children","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The contents to render."},"sources":[{"fileName":"src/ui/base_provider.tsx","line":14,"character":12}],"type":{"type":"reference","name":"React.ReactNode"}},{"id":4715,"name":"value","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The {@Base} instance associated with the App."},"sources":[{"fileName":"src/ui/base_provider.tsx","line":12,"character":9}],"type":{"type":"reference","name":"Base","id":2764}}],"groups":[{"title":"Properties","kind":1024,"children":[4716,4715]}],"sources":[{"fileName":"src/ui/base_provider.tsx","line":10,"character":27}]},{"id":4717,"name":"BaseProvider","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"A React Provider which allows Components to be rendered outside of an App's\nReact tree.","tags":[{"tag":"example","text":"\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BaseProvider} from '@airtable/blocks/ui';\n\nfunction getHtmlStringForRecordCard(base, record) {\n    return ReactDOM.renderToStaticMarkup(\n        <BaseProvider value={base}>\n            <RecordCard record={record} />\n        </BaseProvider>\n    );\n}\n```"},{"tag":"docspath","text":"UI/components/BaseProvider"},{"tag":"component","text":"\n"}]},"signatures":[{"id":4718,"name":"BaseProvider","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React Provider which allows Components to be rendered outside of an App's\nReact tree.","tags":[{"tag":"example","text":"\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BaseProvider} from '@airtable/blocks/ui';\n\nfunction getHtmlStringForRecordCard(base, record) {\n    return ReactDOM.renderToStaticMarkup(\n        <BaseProvider value={base}>\n            <RecordCard record={record} />\n        </BaseProvider>\n    );\n}\n```"},{"tag":"docspath","text":"UI/components/BaseProvider"},{"tag":"component","text":"\n"}]},"parameters":[{"id":4719,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"BaseProviderProps","id":4714}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/base_provider.tsx","line":38,"character":21}]}],"groups":[{"title":"Interfaces","kind":256,"children":[4714]},{"title":"Functions","kind":64,"children":[4717]}],"sources":[{"fileName":"src/ui/base_provider.tsx","line":1,"character":0}]},{"id":12020,"name":"\"src/ui/icon_config\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/icon_config.ts","children":[{"id":12025,"name":"IconName","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"List of all icon names. If you need to render an icon use the {@link Icon|Icon component}.","text":"[[ Story id=\"icon--example\" title=\"Icon example\" height=\"576px\"]]\n"},"sources":[{"fileName":"src/ui/icon_config.ts","line":179,"character":20}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"number"},{"type":"stringLiteral","value":"cursor"},{"type":"stringLiteral","value":"edit"},{"type":"stringLiteral","value":"check"},{"type":"stringLiteral","value":"star"},{"type":"stringLiteral","value":"heart"},{"type":"stringLiteral","value":"thumbsUp"},{"type":"stringLiteral","value":"flag"},{"type":"stringLiteral","value":"code"},{"type":"stringLiteral","value":"form"},{"type":"stringLiteral","value":"link"},{"type":"stringLiteral","value":"menu"},{"type":"stringLiteral","value":"ol"},{"type":"stringLiteral","value":"select"},{"type":"stringLiteral","value":"time"},{"type":"stringLiteral","value":"ul"},{"type":"stringLiteral","value":"video"},{"type":"stringLiteral","value":"filter"},{"type":"stringLiteral","value":"text"},{"type":"stringLiteral","value":"view"},{"type":"stringLiteral","value":"checkbox"},{"type":"stringLiteral","value":"radio"},{"type":"stringLiteral","value":"left"},{"type":"stringLiteral","value":"right"},{"type":"stringLiteral","value":"collapse"},{"type":"stringLiteral","value":"paint"},{"type":"stringLiteral","value":"help"},{"type":"stringLiteral","value":"grid"},{"type":"stringLiteral","value":"hide"},{"type":"stringLiteral","value":"show"},{"type":"stringLiteral","value":"italic"},{"type":"stringLiteral","value":"bold"},{"type":"stringLiteral","value":"x"},{"type":"stringLiteral","value":"underline"},{"type":"stringLiteral","value":"caret"},{"type":"stringLiteral","value":"overflow"},{"type":"stringLiteral","value":"search"},{"type":"stringLiteral","value":"android"},{"type":"stringLiteral","value":"apple"},{"type":"stringLiteral","value":"apps"},{"type":"stringLiteral","value":"ascending"},{"type":"stringLiteral","value":"attachment"},{"type":"stringLiteral","value":"automations"},{"type":"stringLiteral","value":"autonumber"},{"type":"stringLiteral","value":"barcode"},{"type":"stringLiteral","value":"bell"},{"type":"stringLiteral","value":"blocks"},{"type":"stringLiteral","value":"bolt"},{"type":"stringLiteral","value":"boltList"},{"type":"stringLiteral","value":"book"},{"type":"stringLiteral","value":"calendar"},{"type":"stringLiteral","value":"chart"},{"type":"stringLiteral","value":"chat"},{"type":"stringLiteral","value":"checkboxChecked"},{"type":"stringLiteral","value":"checkboxUnchecked"},{"type":"stringLiteral","value":"checklist"},{"type":"stringLiteral","value":"chevronDown"},{"type":"stringLiteral","value":"chevronLeft"},{"type":"stringLiteral","value":"chevronRight"},{"type":"stringLiteral","value":"chevronUp"},{"type":"stringLiteral","value":"clipboard"},{"type":"stringLiteral","value":"cog"},{"type":"stringLiteral","value":"collapseSidebar"},{"type":"stringLiteral","value":"contacts"},{"type":"stringLiteral","value":"count"},{"type":"stringLiteral","value":"count1"},{"type":"stringLiteral","value":"cube"},{"type":"stringLiteral","value":"day"},{"type":"stringLiteral","value":"dayAuto"},{"type":"stringLiteral","value":"dedent"},{"type":"stringLiteral","value":"descending"},{"type":"stringLiteral","value":"dollar"},{"type":"stringLiteral","value":"down"},{"type":"stringLiteral","value":"download"},{"type":"stringLiteral","value":"dragHandle"},{"type":"stringLiteral","value":"drive"},{"type":"stringLiteral","value":"duplicate"},{"type":"stringLiteral","value":"envelope"},{"type":"stringLiteral","value":"envelope1"},{"type":"stringLiteral","value":"expand"},{"type":"stringLiteral","value":"expand1"},{"type":"stringLiteral","value":"expandSidebar"},{"type":"stringLiteral","value":"feed"},{"type":"stringLiteral","value":"file"},{"type":"stringLiteral","value":"formula"},{"type":"stringLiteral","value":"fullscreen"},{"type":"stringLiteral","value":"gallery"},{"type":"stringLiteral","value":"gantt"},{"type":"stringLiteral","value":"gift"},{"type":"stringLiteral","value":"grid1"},{"type":"stringLiteral","value":"group"},{"type":"stringLiteral","value":"hide1"},{"type":"stringLiteral","value":"history"},{"type":"stringLiteral","value":"home"},{"type":"stringLiteral","value":"hyperlink"},{"type":"stringLiteral","value":"hyperlinkCancel"},{"type":"stringLiteral","value":"indent"},{"type":"stringLiteral","value":"info"},{"type":"stringLiteral","value":"kanban"},{"type":"stringLiteral","value":"laptop"},{"type":"stringLiteral","value":"lightbulb"},{"type":"stringLiteral","value":"link1"},{"type":"stringLiteral","value":"lock"},{"type":"stringLiteral","value":"logout"},{"type":"stringLiteral","value":"lookup"},{"type":"stringLiteral","value":"mapPin"},{"type":"stringLiteral","value":"markdown"},{"type":"stringLiteral","value":"megaphone"},{"type":"stringLiteral","value":"minus"},{"type":"stringLiteral","value":"mobile"},{"type":"stringLiteral","value":"multicollaborator"},{"type":"stringLiteral","value":"multiselect"},{"type":"stringLiteral","value":"paragraph"},{"type":"stringLiteral","value":"paragraph1"},{"type":"stringLiteral","value":"pause"},{"type":"stringLiteral","value":"percent"},{"type":"stringLiteral","value":"personal"},{"type":"stringLiteral","value":"personalAuto"},{"type":"stringLiteral","value":"phone"},{"type":"stringLiteral","value":"pivot"},{"type":"stringLiteral","value":"play"},{"type":"stringLiteral","value":"plus"},{"type":"stringLiteral","value":"plusFilled"},{"type":"stringLiteral","value":"premium"},{"type":"stringLiteral","value":"print"},{"type":"stringLiteral","value":"public"},{"type":"stringLiteral","value":"publish"},{"type":"stringLiteral","value":"quote"},{"type":"stringLiteral","value":"quote1"},{"type":"stringLiteral","value":"radioSelected"},{"type":"stringLiteral","value":"redo"},{"type":"stringLiteral","value":"redo1"},{"type":"stringLiteral","value":"richText"},{"type":"stringLiteral","value":"rollup"},{"type":"stringLiteral","value":"rollup1"},{"type":"stringLiteral","value":"rowHeightSmall"},{"type":"stringLiteral","value":"rowHeightMedium"},{"type":"stringLiteral","value":"rowHeightLarge"},{"type":"stringLiteral","value":"rowHeightExtraLarge"},{"type":"stringLiteral","value":"selectCaret"},{"type":"stringLiteral","value":"settings"},{"type":"stringLiteral","value":"shapes"},{"type":"stringLiteral","value":"share"},{"type":"stringLiteral","value":"share1"},{"type":"stringLiteral","value":"shareWithBolt"},{"type":"stringLiteral","value":"show1"},{"type":"stringLiteral","value":"slack"},{"type":"stringLiteral","value":"smiley"},{"type":"stringLiteral","value":"sort"},{"type":"stringLiteral","value":"stack"},{"type":"stringLiteral","value":"strikethrough"},{"type":"stringLiteral","value":"switcher"},{"type":"stringLiteral","value":"tabs"},{"type":"stringLiteral","value":"team"},{"type":"stringLiteral","value":"teamLocked"},{"type":"stringLiteral","value":"toggle"},{"type":"stringLiteral","value":"trash"},{"type":"stringLiteral","value":"twitter"},{"type":"stringLiteral","value":"undo"},{"type":"stringLiteral","value":"up"},{"type":"stringLiteral","value":"upload"},{"type":"stringLiteral","value":"warning"},{"type":"stringLiteral","value":"windows"}]}}],"groups":[{"title":"Type aliases","kind":4194304,"children":[12025]}],"sources":[{"fileName":"src/ui/icon_config.ts","line":1,"character":0}]},{"id":16027,"name":"\"src/ui/unstable_standalone_ui\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/unstable_standalone_ui.ts","sources":[{"fileName":"src/ui/unstable_standalone_ui.ts","line":1,"character":0}]},{"id":11065,"name":"\"src/ui/use_synced\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_synced.ts","children":[{"id":11066,"name":"useSynced","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"A hook for syncing a component to {@link GlobalConfig}.\nUseful if you are dealing with a custom input component and can‘t use one of our `Synced` components.","tags":[{"tag":"example","text":"\n```js\nimport {useBase, useSynced} from '@airtable/blocks/ui';\n\nfunction CustomInputSynced() {\n   const [value, setValue, canSetValue] = useSynced('myGlobalConfigKey');\n\n    return (\n        <input\n             type=\"text\"\n             value={value}\n             onChange={e => setValue(e.target.value)}\n             disabled={!canSetValue}\n         />\n    );\n}\n```"},{"tag":"docspath","text":"UI/hooks/useSynced"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":11067,"name":"useSynced","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for syncing a component to {@link GlobalConfig}.\nUseful if you are dealing with a custom input component and can‘t use one of our `Synced` components.","tags":[{"tag":"example","text":"\n```js\nimport {useBase, useSynced} from '@airtable/blocks/ui';\n\nfunction CustomInputSynced() {\n   const [value, setValue, canSetValue] = useSynced('myGlobalConfigKey');\n\n    return (\n        <input\n             type=\"text\"\n             value={value}\n             onChange={e => setValue(e.target.value)}\n             disabled={!canSetValue}\n         />\n    );\n}\n```"},{"tag":"docspath","text":"UI/hooks/useSynced"},{"tag":"hook","text":"\n"}]},"parameters":[{"id":11068,"name":"globalConfigKey","kind":32768,"kindString":"Parameter","flags":{},"comment":{},"type":{"type":"reference","name":"GlobalConfigKey","id":682}}],"type":{"type":"tuple","elements":[{"type":"intrinsic","name":"unknown"},{"type":"reflection","declaration":{"id":11069,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":11070,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11071,"name":"newValue","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"GlobalConfigValue","id":685},{"type":"intrinsic","name":"undefined"}]}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/ui/use_synced.ts","line":32,"character":12}]}},{"type":"intrinsic","name":"boolean"}]}}],"sources":[{"fileName":"src/ui/use_synced.ts","line":30,"character":33}]}],"groups":[{"title":"Functions","kind":64,"children":[11066]}],"sources":[{"fileName":"src/ui/use_synced.ts","line":1,"character":0}]},{"id":16484,"name":"\"src/unstable_private_utils\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/unstable_private_utils.ts","sources":[{"fileName":"src/unstable_private_utils.ts","line":1,"character":0}]},{"id":16485,"name":"\"src/unstable_testing_utils\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/unstable_testing_utils.ts","sources":[{"fileName":"src/unstable_testing_utils.ts","line":1,"character":0}]},{"id":404,"name":"@airtable/blocks/models: Abstract models","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/watchable.ts","comment":{},"children":[{"id":890,"name":"AbstractModel","kind":128,"kindString":"Class","flags":{"isExported":true,"isAbstract":true},"comment":{"shortText":"Abstract superclass for all models. You won't use this class directly.","tags":[{"tag":"docspath","text":"models/advanced/AbstractModel\n"}]},"typeParameter":[{"id":891,"name":"DataType","kind":131072,"kindString":"Type parameter","flags":{}},{"id":892,"name":"WatchableKey","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"children":[{"id":904,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":905,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}]},{"id":910,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"getSignature":[{"id":911,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":81,"character":17}]},{"id":914,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":915,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}]},{"id":942,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"signatures":[{"id":943,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"parameters":[{"id":944,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]}]}},{"id":945,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reflection","declaration":{"id":946,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":947,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":948,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":949,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}},{"id":950,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":113,"character":17}]}}},{"id":951,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/watchable.ts","line":111,"character":11}],"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":932,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":933,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":934,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]}]}},{"id":935,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reflection","declaration":{"id":936,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":937,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":938,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":939,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}},{"id":940,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":66,"character":17}]}}},{"id":941,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/watchable.ts","line":64,"character":9}],"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Accessors","kind":262144,"children":[904,910]},{"title":"Methods","kind":2048,"children":[914,942,932]}],"sources":[{"fileName":"src/models/abstract_model.ts","line":12,"character":28}],"extendedTypes":[{"type":"reference","name":"Watchable","id":405,"typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]}],"extendedBy":[{"type":"reference","name":"AbstractModelWithAsyncData","id":1003},{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"Field","id":1724},{"type":"reference","name":"View","id":2404},{"type":"reference","name":"Table","id":2507},{"type":"reference","name":"Base","id":2764},{"type":"reference","name":"Session","id":2936}]},{"id":1003,"name":"AbstractModelWithAsyncData","kind":128,"kindString":"Class","flags":{"isExported":true,"isAbstract":true},"comment":{"shortText":"Abstract superclass for all Blocks SDK models that need to fetch async data.","tags":[{"tag":"docspath","text":"models/advanced/AbstractModelWithAsyncData\n"}]},"typeParameter":[{"id":1004,"name":"DataType","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1005,"name":"WatchableKey","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"children":[{"id":1054,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":1055,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":1031,"name":"isDataLoaded","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{},"getSignature":[{"id":1032,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":111,"character":20}]},{"id":1029,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"getSignature":[{"id":1030,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":104,"character":17}],"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910}},{"id":1039,"name":"loadDataAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.","text":"Returns a Promise that will resolve once the data is loaded.\n"},"signatures":[{"id":1040,"name":"loadDataAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.","text":"Returns a Promise that will resolve once the data is loaded.\n"},"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":133,"character":23}]},{"id":1062,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":1063,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":1041,"name":"unloadData","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{},"signatures":[{"id":1042,"name":"unloadData","kind":4096,"kindString":"Call signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":169,"character":14}]},{"id":1024,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"signatures":[{"id":1025,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"parameters":[{"id":1026,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]}]}},{"id":1027,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":1028,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]},"overwrites":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":86,"character":11}],"overwrites":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":1019,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"signatures":[{"id":1020,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"parameters":[{"id":1021,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]}]}},{"id":1022,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":1023,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]},"overwrites":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":60,"character":9}],"overwrites":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Accessors","kind":262144,"children":[1054,1031,1029]},{"title":"Methods","kind":2048,"children":[1039,1062,1041,1024,1019]}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":12,"character":41}],"extendedTypes":[{"type":"reference","name":"AbstractModel","id":890,"typeArguments":[{"type":"typeParameter","name":"DataType"},{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]}],"extendedBy":[{"type":"reference","name":"ViewMetadataQueryResult","id":2034},{"type":"reference","name":"Cursor","id":3094},{"type":"reference","name":"RecordQueryResult","id":3575}]},{"id":405,"name":"Watchable","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Abstract superclass for watchable models. All watchable models expose `watch`\nand `unwatch` methods that allow consumers to subscribe to changes to that model.","text":"This class should not be used directly.\n","tags":[{"tag":"docspath","text":"models/advanced/Watchable\n"}]},"typeParameter":[{"id":406,"name":"WatchableKey","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"children":[{"id":439,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"signatures":[{"id":440,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"parameters":[{"id":441,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]}]}},{"id":442,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reflection","declaration":{"id":443,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":444,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":445,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":446,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}},{"id":447,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":113,"character":17}]}}},{"id":448,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]}}],"sources":[{"fileName":"src/watchable.ts","line":111,"character":11}]},{"id":429,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":430,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":431,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]}]}},{"id":432,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reflection","declaration":{"id":433,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":434,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":435,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":436,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}},{"id":437,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":66,"character":17}]}}},{"id":438,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"typeParameter","name":"WatchableKey","constraint":{"type":"intrinsic","name":"string"}}]}}],"sources":[{"fileName":"src/watchable.ts","line":64,"character":9}]}],"groups":[{"title":"Methods","kind":2048,"children":[439,429]}],"sources":[{"fileName":"src/watchable.ts","line":13,"character":15}],"extendedBy":[{"type":"reference","name":"GlobalConfig","id":798},{"type":"reference","name":"AbstractModel","id":890},{"type":"reference","name":"Viewport","id":3205},{"type":"reference","name":"SettingsButton","id":3299}]}],"groups":[{"title":"Classes","kind":128,"children":[890,1003,405]}],"sources":[{"fileName":"src/watchable.ts","line":1,"character":0}]},{"id":1000,"name":"@airtable/blocks/models: Aggregators","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/types/aggregators.ts","comment":{},"children":[{"id":1692,"name":"Aggregator","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Aggregators can be used to compute aggregates for cell values.","tags":[{"tag":"example","text":"\n```js\nimport {aggregators} from '@airtable/blocks/models';\n\n// To get a list of aggregators supported for a specific field:\nconst fieldAggregators = myField.availableAggregators;\n\n// To compute the total attachment size of an attachment field:\nconst aggregator = aggregators.totalAttachmentSize;\nconst value = aggregator.aggregate(myRecords, myAttachmentField);\nconst valueAsString = aggregate.aggregateToString(myRecords, myAttachmentField);\n```"},{"tag":"docspath","text":"models/Aggregator\n"}]},"children":[{"id":1694,"name":"displayName","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"A user friendly name for this aggregator that can be displayed to users."},"sources":[{"fileName":"src/models/create_aggregators.ts","line":30,"character":15}],"type":{"type":"intrinsic","name":"string"}},{"id":1693,"name":"key","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"A unique key for this aggregator that can be used to identify it in code."},"sources":[{"fileName":"src/models/create_aggregators.ts","line":28,"character":7}],"type":{"type":"reference","name":"AggregatorKey","id":1001}},{"id":1695,"name":"shortDisplayName","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"A short user friendly name for this aggregator that can be displayed to users."},"sources":[{"fileName":"src/models/create_aggregators.ts","line":32,"character":20}],"type":{"type":"intrinsic","name":"string"}},{"id":1696,"name":"aggregate","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Aggregates the value of `field` in each of `records` to produce a single value."},"signatures":[{"id":1697,"name":"aggregate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Aggregates the value of `field` in each of `records` to produce a single value."},"parameters":[{"id":1698,"name":"records","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]}},{"id":1699,"name":"field","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Field","id":1724}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/models/create_aggregators.ts","line":38,"character":13}]},{"id":1700,"name":"aggregateToString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Aggregates the value of `field` in each of `records` to produce a single value, formatted as a string."},"signatures":[{"id":1701,"name":"aggregateToString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Aggregates the value of `field` in each of `records` to produce a single value, formatted as a string."},"parameters":[{"id":1702,"name":"records","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]}},{"id":1703,"name":"field","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Field","id":1724}}],"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/create_aggregators.ts","line":40,"character":21}]}],"groups":[{"title":"Properties","kind":1024,"children":[1694,1693,1695]},{"title":"Methods","kind":2048,"children":[1696,1700]}],"sources":[{"fileName":"src/models/create_aggregators.ts","line":26,"character":27}]},{"id":1001,"name":"AggregatorKey","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/aggregators.ts","line":4,"character":25}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Interfaces","kind":256,"children":[1692]},{"title":"Type aliases","kind":4194304,"children":[1001]}],"sources":[{"fileName":"src/types/aggregators.ts","line":1,"character":0}]},{"id":374,"name":"@airtable/blocks/models: Base","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/types/collaborator.ts","comment":{},"children":[{"id":2764,"name":"Base","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Model class representing a base.","text":"If you want the base model to automatically recalculate whenever the base schema changes, try the\n{@link useBase} hook. Alternatively, you can manually subscribe to changes with\n{@link useWatchable} (recommended) or [Base#watch](/api/models/Base#watch).\n","tags":[{"tag":"example","text":"\n```js\nimport {base} from '@airtable/blocks';\n\nconsole.log('The name of your base is', base.name);\n```"},{"tag":"docspath","text":"models/Base\n"}]},"children":[{"id":2787,"name":"activeCollaborators","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The users who have access to this base.","tags":[{"tag":"example","text":"\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(base.activeCollaborators[0].email);\n```\n"}]},"getSignature":[{"id":2788,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The users who have access to this base.","tags":[{"tag":"example","text":"\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(base.activeCollaborators[0].email);\n```\n"}]},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"CollaboratorData","id":375}]}}],"sources":[{"fileName":"src/models/base.ts","line":152,"character":27}]},{"id":2871,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":2872,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":2875,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"getSignature":[{"id":2876,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":81,"character":17}],"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}},{"id":2783,"name":"name","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The name of the base.","tags":[{"tag":"example","text":"\n```js\nimport {base} from '@airtable/blocks';\nconsole.log('The name of your base is', base.name);\n```\n"}]},"getSignature":[{"id":2784,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The name of the base.","tags":[{"tag":"example","text":"\n```js\nimport {base} from '@airtable/blocks';\nconsole.log('The name of your base is', base.name);\n```\n"}]},"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/base.ts","line":116,"character":12}]},{"id":2785,"name":"tables","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The tables in this base. Can be watched to know when tables are created, deleted, or reordered in the base.","tags":[{"tag":"example","text":"\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(`You have ${base.tables.length} tables`);\n```\n"}]},"getSignature":[{"id":2786,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The tables in this base. Can be watched to know when tables are created, deleted, or reordered in the base.","tags":[{"tag":"example","text":"\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(`You have ${base.tables.length} tables`);\n```\n"}]},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Table","id":2507}]}}],"sources":[{"fileName":"src/models/base.ts","line":128,"character":14}]},{"id":2824,"name":"checkPermissionsForCreateTable","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Checks whether the current user has permission to create a table.\n\nAccepts partial input, in the same format as {@link createTableAsync}.\n\nReturns `{hasPermission: true}` if the current user can update the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nconst createTableCheckResult = base.checkPermissionsForCreateTable();\n\nif (!createTableCheckResult.hasPermission) {\n    alert(createTableCheckResult.reasonDisplayString);\n}\n```\n"}]},"signatures":[{"id":2825,"name":"checkPermissionsForCreateTable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Checks whether the current user has permission to create a table.\n\nAccepts partial input, in the same format as {@link createTableAsync}.\n\nReturns `{hasPermission: true}` if the current user can update the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nconst createTableCheckResult = base.checkPermissionsForCreateTable();\n\nif (!createTableCheckResult.hasPermission) {\n    alert(createTableCheckResult.reasonDisplayString);\n}\n```\n"}]},"parameters":[{"id":2826,"name":"name","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"name for the table. must be case-insensitive unique"},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":2827,"name":"fields","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"array of fields to create in the table\n"},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reflection","declaration":{"id":2828,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2829,"name":"name","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/base.ts","line":386,"character":16}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":2831,"name":"options","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/base.ts","line":388,"character":19}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2832,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"indexSignature":[{"id":2833,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":2834,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/models/base.ts","line":388,"character":21}]}},{"type":"intrinsic","name":"null"}]}},{"id":2830,"name":"type","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/base.ts","line":387,"character":16}],"type":{"type":"reference","name":"FieldType","id":138}}],"groups":[{"title":"Variables","kind":32,"children":[2829,2831,2830]}],"sources":[{"fileName":"src/models/base.ts","line":385,"character":23}]}}]}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/base.ts","line":383,"character":34}]},{"id":2846,"name":"createTableAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Creates a new table.\n\nThrows an error if the user does not have permission to create a table, if an invalid\ntable name is provided, or if invalid fields are provided (invalid name, type or options).\n\nRefer to {@link FieldType} for supported field types, the write format for field options, and\nother specifics for certain field types.\n\nAt least one field must be specified. The first field in the `fields` array will be used as\nthe table's [primary field](https://support.airtable.com/hc/en-us/articles/202624179-The-Name-Field)\nand must be a supported primary field type. Fields must have case-insensitive unique names\nwithin the table.\n\nA default grid view will be created with all fields visible.\n\nThis action is asynchronous. Unlike new records, new tables are **not** created\noptimistically locally. You must `await` the returned promise before using the new\ntable in your app.\n","tags":[{"tag":"example","text":"\n```js\nasync function createNewTable() {\n    const name = 'My new table';\n    const fields = [\n        // Name will be the primary field of the table.\n        {name: 'Name', type: FieldType.SINGLE_LINE_TEXT},\n        {name: 'Notes', type: FieldType.RICH_TEXT},\n        {name: 'Attachments', type: FieldType.MULTIPLE_ATTACHMENTS},\n        {name: 'Number', type: FieldType.NUMBER, options: {\n            precision: 8,\n        }},\n        {name: 'Select', type: FieldType.SINGLE_SELECT, options: {\n            choices: [\n                {name: 'A'},\n                {name: 'B'},\n            ],\n        }},\n    ];\n\n    if (base.hasPermissionToCreateTable(name, fields)) {\n        await base.createTableAsync(name, fields);\n    }\n}\n```\n"}]},"signatures":[{"id":2847,"name":"createTableAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Creates a new table.\n\nThrows an error if the user does not have permission to create a table, if an invalid\ntable name is provided, or if invalid fields are provided (invalid name, type or options).\n\nRefer to {@link FieldType} for supported field types, the write format for field options, and\nother specifics for certain field types.\n\nAt least one field must be specified. The first field in the `fields` array will be used as\nthe table's [primary field](https://support.airtable.com/hc/en-us/articles/202624179-The-Name-Field)\nand must be a supported primary field type. Fields must have case-insensitive unique names\nwithin the table.\n\nA default grid view will be created with all fields visible.\n\nThis action is asynchronous. Unlike new records, new tables are **not** created\noptimistically locally. You must `await` the returned promise before using the new\ntable in your app.\n","tags":[{"tag":"example","text":"\n```js\nasync function createNewTable() {\n    const name = 'My new table';\n    const fields = [\n        // Name will be the primary field of the table.\n        {name: 'Name', type: FieldType.SINGLE_LINE_TEXT},\n        {name: 'Notes', type: FieldType.RICH_TEXT},\n        {name: 'Attachments', type: FieldType.MULTIPLE_ATTACHMENTS},\n        {name: 'Number', type: FieldType.NUMBER, options: {\n            precision: 8,\n        }},\n        {name: 'Select', type: FieldType.SINGLE_SELECT, options: {\n            choices: [\n                {name: 'A'},\n                {name: 'B'},\n            ],\n        }},\n    ];\n\n    if (base.hasPermissionToCreateTable(name, fields)) {\n        await base.createTableAsync(name, fields);\n    }\n}\n```\n"}]},"parameters":[{"id":2848,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"name for the table. must be case-insensitive unique"},"type":{"type":"intrinsic","name":"string"}},{"id":2849,"name":"fields","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"array of fields to create in the table: see below for details.\n"},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reflection","declaration":{"id":2850,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2851,"name":"name","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"src/models/base.ts","line":498,"character":16}],"type":{"type":"intrinsic","name":"string"}},{"id":2853,"name":"options","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/base.ts","line":500,"character":19}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2854,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"indexSignature":[{"id":2855,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":2856,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/models/base.ts","line":500,"character":21}]}},{"type":"intrinsic","name":"null"}]}},{"id":2852,"name":"type","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"src/models/base.ts","line":499,"character":16}],"type":{"type":"reference","name":"FieldType","id":138}}],"groups":[{"title":"Variables","kind":32,"children":[2851,2853,2852]}],"sources":[{"fileName":"src/models/base.ts","line":497,"character":22}]}}]}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"reference","name":"Table","id":2507}]}}],"sources":[{"fileName":"src/models/base.ts","line":495,"character":26}]},{"id":2798,"name":"getCollaborator","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The user matching the given ID, name, or email address. Throws if that user does not exist\nor does not have access to this base. Use {@link getCollaboratorIfExists} instead if you are\nunsure whether a collaborator with the given ID exists and has access to this base.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getCollaboratorById} method instead.\n"},"signatures":[{"id":2799,"name":"getCollaborator","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The user matching the given ID, name, or email address. Throws if that user does not exist\nor does not have access to this base. Use {@link getCollaboratorIfExists} instead if you are\nunsure whether a collaborator with the given ID exists and has access to this base.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getCollaboratorById} method instead.\n"},"parameters":[{"id":2800,"name":"idOrNameOrEmail","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"UserId","id":380},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"union","types":[{"type":"reference","name":"CollaboratorData","id":375},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/base.ts","line":232,"character":19}]},{"id":2792,"name":"getCollaboratorById","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The user matching the given ID. Throws if that user does not exist\nor does not have access to this base. Use {@link getCollaboratorByIdIfExists}\ninstead if you are unsure whether a collaborator with the given ID exists\nand has access to this base."},"signatures":[{"id":2793,"name":"getCollaboratorById","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The user matching the given ID. Throws if that user does not exist\nor does not have access to this base. Use {@link getCollaboratorByIdIfExists}\ninstead if you are unsure whether a collaborator with the given ID exists\nand has access to this base."},"parameters":[{"id":2794,"name":"collaboratorId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the user.\n"},"type":{"type":"reference","name":"UserId","id":380}}],"type":{"type":"reference","name":"CollaboratorData","id":375}}],"sources":[{"fileName":"src/models/base.ts","line":175,"character":23}]},{"id":2789,"name":"getCollaboratorByIdIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The user matching the given ID, or `null` if that user does not exist or does not have access\nto this base."},"signatures":[{"id":2790,"name":"getCollaboratorByIdIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The user matching the given ID, or `null` if that user does not exist or does not have access\nto this base."},"parameters":[{"id":2791,"name":"collaboratorId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the user.\n"},"type":{"type":"reference","name":"UserId","id":380}}],"type":{"type":"union","types":[{"type":"reference","name":"CollaboratorData","id":375},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/base.ts","line":163,"character":31}]},{"id":2795,"name":"getCollaboratorIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The user matching the given ID, name, or email address. Returns null if that user does not\nexist or does not have access to this base.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getCollaboratorByIdIfExists} method instead.\n"},"signatures":[{"id":2796,"name":"getCollaboratorIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The user matching the given ID, name, or email address. Returns null if that user does not\nexist or does not have access to this base.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getCollaboratorByIdIfExists} method instead.\n"},"parameters":[{"id":2797,"name":"idOrNameOrEmail","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"UserId","id":380},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"union","types":[{"type":"reference","name":"CollaboratorData","id":375},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/base.ts","line":195,"character":27}]},{"id":2821,"name":"getTable","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The table matching the given ID or name. Throws if no matching table exists within this base.\nUse {@link getTableIfExists} instead if you are unsure whether a table exists with the given\nname/ID.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getTableById} or {@link getTableByName} methods\ninstead.\n"},"signatures":[{"id":2822,"name":"getTable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The table matching the given ID or name. Throws if no matching table exists within this base.\nUse {@link getTableIfExists} instead if you are unsure whether a table exists with the given\nname/ID.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getTableById} or {@link getTableByName} methods\ninstead.\n"},"parameters":[{"id":2823,"name":"tableIdOrName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID or name of the table you're looking for.\n"},"type":{"type":"union","types":[{"type":"reference","name":"TableId","id":367},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","name":"Table","id":2507}}],"sources":[{"fileName":"src/models/base.ts","line":348,"character":12}]},{"id":2809,"name":"getTableById","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The table matching the given ID. Throws if that table does not exist in this base. Use\n{@link getTableByIdIfExists} instead if you are unsure whether a table exists with the given\nID."},"signatures":[{"id":2810,"name":"getTableById","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The table matching the given ID. Throws if that table does not exist in this base. Use\n{@link getTableByIdIfExists} instead if you are unsure whether a table exists with the given\nID."},"parameters":[{"id":2811,"name":"tableId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the table.\n"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"Table","id":2507}}],"sources":[{"fileName":"src/models/base.ts","line":288,"character":16}]},{"id":2806,"name":"getTableByIdIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The table matching the given ID, or `null` if that table does not exist in this base."},"signatures":[{"id":2807,"name":"getTableByIdIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The table matching the given ID, or `null` if that table does not exist in this base."},"parameters":[{"id":2808,"name":"tableId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the table.\n"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/base.ts","line":266,"character":24}]},{"id":2815,"name":"getTableByName","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The table matching the given name. Throws if no table exists with that name in this base. Use\n{@link getTableByNameIfExists} instead if you are unsure whether a table exists with the\ngiven name."},"signatures":[{"id":2816,"name":"getTableByName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The table matching the given name. Throws if no table exists with that name in this base. Use\n{@link getTableByNameIfExists} instead if you are unsure whether a table exists with the\ngiven name."},"parameters":[{"id":2817,"name":"tableName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The name of the table you're looking for.\n"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"Table","id":2507}}],"sources":[{"fileName":"src/models/base.ts","line":315,"character":18}]},{"id":2812,"name":"getTableByNameIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The table matching the given name, or `null` if no table exists with that name in this base."},"signatures":[{"id":2813,"name":"getTableByNameIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The table matching the given name, or `null` if no table exists with that name in this base."},"parameters":[{"id":2814,"name":"tableName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The name of the table you're looking for.\n"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/base.ts","line":300,"character":26}]},{"id":2818,"name":"getTableIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The table matching the given ID or name. Returns `null` if no matching table exists within\nthis base.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getTableByIdIfExists} or\n{@link getTableByNameIfExists} methods instead.\n"},"signatures":[{"id":2819,"name":"getTableIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The table matching the given ID or name. Returns `null` if no matching table exists within\nthis base.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getTableByIdIfExists} or\n{@link getTableByNameIfExists} methods instead.\n"},"parameters":[{"id":2820,"name":"tableIdOrName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID or name of the table you're looking for.\n"},"type":{"type":"union","types":[{"type":"reference","name":"TableId","id":367},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/base.ts","line":332,"character":20}]},{"id":2835,"name":"hasPermissionToCreateTable","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"An alias for `checkPermissionsForCreateTable(name, fields).hasPermission`.\n\nChecks whether the current user has permission to create a table.\n\nAccepts partial input, in the same format as {@link createTableAsync}.\n","tags":[{"tag":"example","text":"\n```js\nconst canCreateTable = table.hasPermissionToCreateTable();\n\nif (!canCreateTable) {\n    alert('not allowed!');\n}\n```\n"}]},"signatures":[{"id":2836,"name":"hasPermissionToCreateTable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"An alias for `checkPermissionsForCreateTable(name, fields).hasPermission`.\n\nChecks whether the current user has permission to create a table.\n\nAccepts partial input, in the same format as {@link createTableAsync}.\n","tags":[{"tag":"example","text":"\n```js\nconst canCreateTable = table.hasPermissionToCreateTable();\n\nif (!canCreateTable) {\n    alert('not allowed!');\n}\n```\n"}]},"parameters":[{"id":2837,"name":"name","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"name for the table. must be case-insensitive unique"},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":2838,"name":"fields","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"array of fields to create in the table\n"},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reflection","declaration":{"id":2839,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2840,"name":"name","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/base.ts","line":436,"character":16}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":2842,"name":"options","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/base.ts","line":438,"character":19}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2843,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"indexSignature":[{"id":2844,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":2845,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/models/base.ts","line":438,"character":21}]}},{"type":"intrinsic","name":"null"}]}},{"id":2841,"name":"type","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/base.ts","line":437,"character":16}],"type":{"type":"reference","name":"FieldType","id":138}}],"groups":[{"title":"Variables","kind":32,"children":[2840,2842,2841]}],"sources":[{"fileName":"src/models/base.ts","line":435,"character":23}]}}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/base.ts","line":433,"character":30}]},{"id":2879,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":2880,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":2907,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"signatures":[{"id":2908,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"parameters":[{"id":2909,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableBaseKey","id":2923},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableBaseKey","id":2923}]}]}},{"id":2910,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reflection","declaration":{"id":2911,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":2912,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2913,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":2914,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableBaseKey","id":2923}},{"id":2915,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":113,"character":17}]}}},{"id":2916,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableBaseKey","id":2923}]},"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/watchable.ts","line":111,"character":11}],"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":2897,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":2898,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":2899,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableBaseKey","id":2923},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableBaseKey","id":2923}]}]}},{"id":2900,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reflection","declaration":{"id":2901,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":2902,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2903,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":2904,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableBaseKey","id":2923}},{"id":2905,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":66,"character":17}]}}},{"id":2906,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableBaseKey","id":2923}]},"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/watchable.ts","line":64,"character":9}],"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Accessors","kind":262144,"children":[2787,2871,2875,2783,2785]},{"title":"Methods","kind":2048,"children":[2824,2846,2798,2792,2789,2795,2821,2809,2806,2815,2812,2818,2835,2879,2907,2897]}],"sources":[{"fileName":"src/models/base.ts","line":66,"character":10}],"extendedTypes":[{"type":"reference","name":"AbstractModel","id":890,"typeArguments":[{"type":"reference","name":"BaseData"},{"type":"reference","name":"WatchableBaseKey","id":2923}]}]},{"id":375,"name":"CollaboratorData","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"An object representing a collaborator. You should not create these objects from scratch, but\nshould instead grab them from base data."},"children":[{"id":377,"name":"email","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The email address of the collaborator."},"sources":[{"fileName":"src/types/collaborator.ts","line":14,"character":9}],"type":{"type":"intrinsic","name":"string"}},{"id":376,"name":"id","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The user ID of the collaborator."},"sources":[{"fileName":"src/types/collaborator.ts","line":12,"character":6}],"type":{"type":"reference","name":"UserId","id":380}},{"id":378,"name":"name","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The name of the collaborator."},"sources":[{"fileName":"src/types/collaborator.ts","line":16,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":379,"name":"profilePicUrl","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The URL of the collaborator's profile picture."},"sources":[{"fileName":"src/types/collaborator.ts","line":18,"character":17}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[377,376,378,379]}],"sources":[{"fileName":"src/types/collaborator.ts","line":10,"character":33}]},{"id":403,"name":"BaseId","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/base.ts","line":10,"character":18}],"type":{"type":"intrinsic","name":"string"}},{"id":380,"name":"UserId","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/collaborator.ts","line":4,"character":18}],"type":{"type":"intrinsic","name":"string"}},{"id":2923,"name":"WatchableBaseKey","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Any key in base that can be watched:\n- `name`: the name of the base\n- `tables`: the order of tables in the base\n- `collaborators`: all the collaborators in the base\n- `schema`: the base schema (essentially everything except for record data)"},"sources":[{"fileName":"src/models/base.ts","line":42,"character":21}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"name"},{"type":"stringLiteral","value":"tables"},{"type":"stringLiteral","value":"collaborators"},{"type":"stringLiteral","value":"schema"}]}}],"groups":[{"title":"Classes","kind":128,"children":[2764]},{"title":"Interfaces","kind":256,"children":[375]},{"title":"Type aliases","kind":4194304,"children":[403,380,2923]}],"sources":[{"fileName":"src/types/collaborator.ts","line":1,"character":0}]},{"id":3088,"name":"@airtable/blocks/models: Cursor","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/models/cursor.ts","comment":{},"children":[{"id":3094,"name":"Cursor","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Model class containing information about the state of the user's current interactions in\nAirtable - specifically, their active table, active view, selected records and selected fields.\nAlso allows you to set the active table and active view.","text":"Selected records and fields are not loaded by default and the cursor must be loaded with\n{@link useLoadable} to access them.\n\n```js\nimport {useCursor, useWatchable} from '@airtable/blocks/ui';\n\n function ActiveTableAndView() {\n     const cursor = useCursor();\n\n     return (\n         <div>\n             Active table: {cursor.activeTableId}\n             Active view: {cursor.activeViewId}\n         </div>\n     );\n }\n```\n\n```js\nimport {useCursor, useLoadable, useWatchable} from '@airtable/blocks/ui';\n\n function SelectedRecordAndFieldIds() {\n     const cursor = useCursor();\n     // load selected records and fields\n     useLoadable(cursor);\n\n     // re-render whenever the list of selected records or fields changes\n     useWatchable(cursor, ['selectedRecordIds', 'selectedFieldIds']);\n\n     return (\n         <div>\n             Selected records: {cursor.selectedRecordIds.join(', ')}\n             Selected fields: {cursor.selectedFieldIds.join(', ')}\n         </div>\n     );\n }\n```\n","tags":[{"tag":"docspath","text":"models/Cursor\n"}]},"children":[{"id":3121,"name":"activeTableId","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The currently active table ID. Can be null when the active table has changed and is not yet\nloaded, and can also refer to a table that is not yet loaded.","text":"When fetching the {@link Table}, use `base.getTableByIdIfExists(cursor.activeTableId)` and\ncheck the return value is not `null` to be resilient to those cases.\n\nCan be watched.\n"},"getSignature":[{"id":3122,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The currently active table ID. Can be null when the active table has changed and is not yet\nloaded, and can also refer to a table that is not yet loaded.","text":"When fetching the {@link Table}, use `base.getTableByIdIfExists(cursor.activeTableId)` and\ncheck the return value is not `null` to be resilient to those cases.\n\nCan be watched.\n"},"type":{"type":"union","types":[{"type":"reference","name":"TableId","id":367},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/cursor.ts","line":208,"character":21}]},{"id":3123,"name":"activeViewId","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The currently active view ID. This will always be a view belonging to `activeTableId`. Can be\nnull when the active view has changed and is not yet loaded, and can also refer to a view\nthat is not yet loaded.","text":"When fetching the {@link View}, use `table.getViewByIdIfExists(cursor.activeViewId)` and\ncheck the return value is not `null` to be resilient to those cases.\n\nCan be watched.\n"},"getSignature":[{"id":3124,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The currently active view ID. This will always be a view belonging to `activeTableId`. Can be\nnull when the active view has changed and is not yet loaded, and can also refer to a view\nthat is not yet loaded.","text":"When fetching the {@link View}, use `table.getViewByIdIfExists(cursor.activeViewId)` and\ncheck the return value is not `null` to be resilient to those cases.\n\nCan be watched.\n"},"type":{"type":"union","types":[{"type":"reference","name":"ViewId","id":128},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/cursor.ts","line":221,"character":20}]},{"id":3169,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":3170,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":3156,"name":"isDataLoaded","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{},"getSignature":[{"id":3157,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDataLoaded","id":1031}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":111,"character":20}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDataLoaded","id":1031}},{"id":3154,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"getSignature":[{"id":3155,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDeleted","id":1029}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":104,"character":17}],"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDeleted","id":1029}},{"id":3116,"name":"selectedFieldIds","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The field IDs of all currently selected fields, or an empty array if no fields are selected.","text":"Not loaded by default: you must load cursor data with `useLoadable(cursor)` (recommended) or\n`cursor.loadDataAsync()` before use.\n\nCan be watched.\n"},"getSignature":[{"id":3117,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The field IDs of all currently selected fields, or an empty array if no fields are selected.","text":"Not loaded by default: you must load cursor data with `useLoadable(cursor)` (recommended) or\n`cursor.loadDataAsync()` before use.\n\nCan be watched.\n"},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"RecordId","id":103}]}}],"sources":[{"fileName":"src/models/cursor.ts","line":174,"character":24}]},{"id":3114,"name":"selectedRecordIds","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The record IDs of all currently selected records, or an empty array if no records are selected.","text":"Not loaded by default. You must load cursor data with `useLoadable(cursor)` (recommended) or\n`cursor.loadDataAsync()` before use.\n\nCan be watched.\n"},"getSignature":[{"id":3115,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The record IDs of all currently selected records, or an empty array if no records are selected.","text":"Not loaded by default. You must load cursor data with `useLoadable(cursor)` (recommended) or\n`cursor.loadDataAsync()` before use.\n\nCan be watched.\n"},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"RecordId","id":103}]}}],"sources":[{"fileName":"src/models/cursor.ts","line":160,"character":25}]},{"id":3118,"name":"isRecordSelected","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether a given record is selected.","text":"Selected records are not loaded by default. You must load cursor data with\n`useLoadable(cursor)` (recommended) or `cursor.loadDataAsync()` before use.\n"},"signatures":[{"id":3119,"name":"isRecordSelected","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether a given record is selected.","text":"Selected records are not loaded by default. You must load cursor data with\n`useLoadable(cursor)` (recommended) or `cursor.loadDataAsync()` before use.\n"},"parameters":[{"id":3120,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The record or record ID to check for.\n"},"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/cursor.ts","line":188,"character":20}]},{"id":3158,"name":"loadDataAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.","text":"Returns a Promise that will resolve once the data is loaded.\n"},"signatures":[{"id":3159,"name":"loadDataAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.","text":"Returns a Promise that will resolve once the data is loaded.\n"},"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.loadDataAsync","id":1039}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":133,"character":23}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.loadDataAsync","id":1039}},{"id":3125,"name":"setActiveTable","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Sets the specified table to active in the Airtable UI. If the apps pane is fullscreen, the\ntable will still be set as active, but the apps pane will continue to be displayed\nfullscreen."},"signatures":[{"id":3126,"name":"setActiveTable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the specified table to active in the Airtable UI. If the apps pane is fullscreen, the\ntable will still be set as active, but the apps pane will continue to be displayed\nfullscreen."},"parameters":[{"id":3127,"name":"tableOrTableId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The target table or table ID to set as active in the Airtable main page.\n"},"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"reference","name":"TableId","id":367}]}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/models/cursor.ts","line":231,"character":18}]},{"id":3128,"name":"setActiveView","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Sets the specified view (and corresponding table) to active in the Airtable UI. If the apps\npane is fullscreen, the view will still be set as active, but the apps pane will continue\nto be displayed fullscreen."},"signatures":[{"id":3129,"name":"setActiveView","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the specified view (and corresponding table) to active in the Airtable UI. If the apps\npane is fullscreen, the view will still be set as active, but the apps pane will continue\nto be displayed fullscreen."},"parameters":[{"id":3130,"name":"tableOrTableId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The table or table ID that the target view belongs to."},"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"reference","name":"TableId","id":367}]}},{"id":3131,"name":"viewOrViewId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The target view or view ID to set as active in the Airtable main page.\n"},"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"reference","name":"ViewId","id":128}]}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/models/cursor.ts","line":243,"character":17}]},{"id":3175,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":3176,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":3160,"name":"unloadData","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{},"signatures":[{"id":3161,"name":"unloadData","kind":4096,"kindString":"Call signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unloadData","id":1041}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":169,"character":14}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unloadData","id":1041}},{"id":3149,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"signatures":[{"id":3150,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"parameters":[{"id":3151,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"WatchableCursorKey","id":3199},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableCursorKey","id":3199}]}]}},{"id":3152,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":3153,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableCursorKey","id":3199}]},"overwrites":{"type":"reference","name":"Watchable.unwatch","id":439},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unwatch","id":1024}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":86,"character":11}],"overwrites":{"type":"reference","name":"Watchable.unwatch","id":439},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unwatch","id":1024}},{"id":3144,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"signatures":[{"id":3145,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"parameters":[{"id":3146,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"WatchableCursorKey","id":3199},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableCursorKey","id":3199}]}]}},{"id":3147,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":3148,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableCursorKey","id":3199}]},"overwrites":{"type":"reference","name":"Watchable.watch","id":429},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.watch","id":1019}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":60,"character":9}],"overwrites":{"type":"reference","name":"Watchable.watch","id":429},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.watch","id":1019}}],"groups":[{"title":"Accessors","kind":262144,"children":[3121,3123,3169,3156,3154,3116,3114]},{"title":"Methods","kind":2048,"children":[3118,3158,3125,3128,3175,3160,3149,3144]}],"sources":[{"fileName":"src/models/cursor.ts","line":87,"character":12}],"extendedTypes":[{"type":"reference","name":"AbstractModelWithAsyncData","id":1003,"typeArguments":[{"type":"reference","name":"CursorData"},{"type":"reference","name":"WatchableCursorKey","id":3199}]}]},{"id":3199,"name":"WatchableCursorKey","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Watchable keys in {@link Cursor}.\n- `selectedRecordIds`\n- `selectedFieldIds`\n- `activeTableId`\n- `activeViewId`\n- `isDataLoaded`"},"sources":[{"fileName":"src/models/cursor.ts","line":31,"character":23}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"isDataLoaded"},{"type":"stringLiteral","value":"selectedRecordIds"},{"type":"stringLiteral","value":"selectedFieldIds"},{"type":"stringLiteral","value":"activeTableId"},{"type":"stringLiteral","value":"activeViewId"}]}}],"groups":[{"title":"Classes","kind":128,"children":[3094]},{"title":"Type aliases","kind":4194304,"children":[3199]}],"sources":[{"fileName":"src/models/cursor.ts","line":1,"character":0}]},{"id":137,"name":"@airtable/blocks/models: Field","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/types/field.ts","comment":{},"children":[{"id":138,"name":"FieldType","kind":4,"kindString":"Enumeration","flags":{"isExported":true},"comment":{"shortText":"An enum of Airtable's field types","tags":[{"tag":"example","text":"\n```js\nimport {FieldType} from '@airtable/blocks/models';\nconst numberFields = myTable.fields.filter(field => (\n    field.type === FieldType.NUMBER\n));\n```\n"}]},"children":[{"id":161,"name":"AUTO_NUMBER","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Automatically incremented unique counter for each record.","text":"**Cell read format**\n```js\nnumber\n```\n\n**Cell write format**\n\nn/a\n\n**Field options read format**\n\nn/a\n\n**Field options write format**\n\nCreating or updating `AUTO_NUMBER` fields is not supported.\n"},"sources":[{"fileName":"src/types/field.ts","line":821,"character":15}],"defaultValue":"\"autoNumber\""},{"id":162,"name":"BARCODE","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Use the Airtable iOS or Android app to scan barcodes.","text":"**Cell read format**\n```js\n{\n    // the text value of the barcode\n    text: string,\n    // the type of barcode\n    type?: string,\n}\n```\n\n**Cell write format**\n\nn/a\n\n**Field options**\n\nn/a\n"},"sources":[{"fileName":"src/types/field.ts","line":843,"character":11}],"defaultValue":"\"barcode\""},{"id":169,"name":"BUTTON","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A button that can be clicked from the Airtable UI to open a URL or open a block.","text":"You cannot currently programmatically interact with a button field from a block, but you can\nconfigure your block to perform a certain action when it's opened from a button field: see\n{@link useRecordActionData} for details.\n\n**Cell read format**\n```js\n{\n    // The label of the button\n    label: string,\n    // URL the button opens, or URL of the block that the button opens.\n    // Null when the URL formula has become invalid.\n    url: string | null,\n}\n```\n\n**Cell write format**\n\nn/a\n\n**Field options read format**\n\nn/a\n\n**Field options write format**\n\nCreating or updating `BUTTON` fields is not supported.\n\n"},"sources":[{"fileName":"src/types/field.ts","line":1048,"character":10}],"defaultValue":"\"button\""},{"id":155,"name":"CHECKBOX","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A checkbox.","text":"This field is \"true\" when checked and otherwise empty.\n\n**Cell format**\n```js\nboolean\n```\n\n**Field options**\n\n```js\n{\n    // an icon name\n    icon: 'check' | 'star' | 'heart' | 'thumbsUp' | 'flag',\n    // the color of the check box\n    color: 'yellowBright' | 'orangeBright' | 'redBright' | 'pinkBright' | 'purpleBright' | 'blueBright' | 'cyanBright' | 'tealBright' | 'greenBright' | 'grayBright' ,\n}\n```\n\nBases on a free or plus plan are limited to using the 'check' icon and 'greenBright' color.\n"},"sources":[{"fileName":"src/types/field.ts","line":625,"character":12}],"defaultValue":"\"checkbox\""},{"id":159,"name":"COUNT","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Count the number of linked records.","text":"**Cell read format**\n```js\nnumber\n```\n\n**Cell write format**\n\nn/a\n\n**Field options read format**\n```js\n{\n   // is the field currently valid (e.g. false if the linked record\n   // field has been changed to a different field type)\n   isValid: boolean,\n   // the linked record field in this table that we're counting\n   recordLinkFieldId: FieldId,\n}\n```\n\n**Field options write format**\n\nCreating or updating `COUNT` fields is not supported.\n"},"sources":[{"fileName":"src/types/field.ts","line":761,"character":9}],"defaultValue":"\"count\""},{"id":167,"name":"CREATED_BY","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"The collaborator who created a record.","text":"The cell value format is the same as the `SINGLE_COLLABORATOR` field, without the ability to\nwrite to the cell value.\n\n**Cell read format**\n```js\n{\n    id: string,\n    email: string,\n    name?: string,\n    profilePicUrl?: string,\n}\n```\n\n**Cell write format**\n\nn/a\n\n**Field options read format**\n```js\n{\n    choices: Array<{\n        id: string,\n        email: string,\n        name?: string,\n        profilePicUrl?: string,\n    }>,\n}\n```\n\n**Field options write format**\n\nCreating or updating `CREATED_BY` fields is not supported.\n\n"},"sources":[{"fileName":"src/types/field.ts","line":976,"character":14}],"defaultValue":"\"createdBy\""},{"id":157,"name":"CREATED_TIME","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"The time the record was created in UTC.","text":"When reading from a \"Created time\" field, the cell value will always be an\n[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date time.\n(Field options specify how it's displayed in the UI.)\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n\nn/a\n\n**Field options read format**\n```js\n{\n    result: {\n        type: 'date' | 'dateTime',\n        // See DATE and DATE_TIME for detailed field options\n        options: DateOrDateTimeFieldOptions,\n    },\n}\n```\n\n**Field options write format**\n\nCreating or updating `CREATED_TIME` fields is not supported.\n"},"sources":[{"fileName":"src/types/field.ts","line":693,"character":16}],"defaultValue":"\"createdTime\""},{"id":145,"name":"CURRENCY","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"An amount of a currency.","text":"**Cell format**\n```js\nnumber\n```\n\n**Field options**\n```js\n{\n    precision: number, // from 0 to 7 inclusive\n    symbol: string,\n}\n```\n"},"sources":[{"fileName":"src/types/field.ts","line":130,"character":12}],"defaultValue":"\"currency\""},{"id":151,"name":"DATE","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A date.","text":"When reading from and writing to a date field, the cell value will always be an\n[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date. (Field\noptions specify how it's formatted in the main Airtable UI - `format` can be used with\n[`moment.js`](https://momentjs.com/) to match that.)\n\nThe date format string follows the moment.js structure documented\n[here](https://momentjs.com/docs/#/parsing/string-format/)\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n```js\nDate | string\n```\n\n**Field options read format**\n```js\n{\n    dateFormat: {\n        name: 'local' | 'friendly' | 'us' | 'european' | 'iso',\n        // Will correspond to name (e.g. {name: 'friendly', format: 'LL'}\n        format: 'l' | 'LL' | 'M/D/YYYY' | 'D/M/YYYY' | 'YYYY-MM-DD',\n    }\n}\n```\n\n**Field options write format**\n```js\n{\n    dateFormat: {\n        name: 'local' | 'friendly' | 'us' | 'european' | 'iso',\n        // Format is optional, but must match name if provided.\n        format?: 'l' | 'LL' | 'M/D/YYYY' | 'D/M/YYYY' | 'YYYY-MM-DD',\n    }\n}\n```\n"},"sources":[{"fileName":"src/types/field.ts","line":445,"character":8}],"defaultValue":"\"date\""},{"id":152,"name":"DATE_TIME","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A date field configured to also include a time.","text":"When reading from and writing to a date field, the cell value will always be an\n[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date. (Field\noptions specify how it's formatted in the main Airtable UI - `format` can be used with\n[`moment.js`](https://momentjs.com/) to match that.)\n\nThe date and time format strings follow the moment.js structure documented\n[here](https://momentjs.com/docs/#/parsing/string-format/)\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n```js\nDate | string\n```\n\n**Field options read format**\n```js\n{\n    dateFormat: {\n        name: 'local' | 'friendly' | 'us' | 'european' | 'iso',\n        // Will correspond to name (e.g. {name: 'friendly', format: 'LL'}\n        format: 'l' | 'LL' | 'M/D/YYYY' | 'D/M/YYYY' | 'YYYY-MM-DD',\n    },\n    timeFormat: {\n        name: '12hour' | '24hour',\n        // Will correspond to name\n        format: 'h:mma' | 'HH:mm',\n    },\n    timeZone: 'utc' | 'client',\n}\n```\n\n**Field options write format**\n```js\n{\n    dateFormat: {\n        name: 'local' | 'friendly' | 'us' | 'european' | 'iso',\n        // Format is optional, but must match name if provided.\n        format?: 'l' | 'LL' | 'M/D/YYYY' | 'D/M/YYYY' | 'YYYY-MM-DD',\n    },\n    timeFormat: {\n        name: '12hour' | '24hour',\n        // Format is optional, but must match name if provided.\n        format?: 'h:mma' | 'HH:mm',\n    },\n    timeZone: 'utc' | 'client',\n}\n```\n"},"sources":[{"fileName":"src/types/field.ts","line":501,"character":13}],"defaultValue":"\"dateTime\""},{"id":165,"name":"DURATION","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A duration of time in seconds.","text":"The `durationFormat` string follows the moment.js structure documented\n[here](https://momentjs.com/docs/#/parsing/string-format/).\n\n**Cell format**\n```js\nnumber\n```\n\n**Field options**\n```js\n{\n    durationFormat: 'h:mm' | 'h:mm:ss' | 'h:mm:ss.S' | 'h:mm:ss.SS' | 'h:mm:ss.SSS',\n}\n```\n"},"sources":[{"fileName":"src/types/field.ts","line":901,"character":12}],"defaultValue":"\"duration\""},{"id":140,"name":"EMAIL","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A valid email address (e.g. andrew@example.com).","text":"**Cell format**\n```js\nstring\n```\n\n**Field options**\n\nn/a\n"},"sources":[{"fileName":"src/types/field.ts","line":48,"character":9}],"defaultValue":"\"email\""},{"id":156,"name":"FORMULA","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Compute a value in each record based on other fields in the same record.","text":"**Cell read format**\n\nCheck `options.result` to know the resulting field type.\n```js\nany\n```\n\n**Cell write format**\n\nn/a\n\n**Field options read format**\n```js\n{\n    // false if the formula contains an error\n    isValid: boolean,\n    // the other fields in the record that are used in the formula\n    referencedFieldIds: Array<FieldId>,\n    // the resulting field type and options returned by the formula\n    result: {\n        // the field type of the formula result\n        type: string,\n        // that types options\n        options?: any,\n    },\n}\n```\n\n**Field options write format**\n\nCreating or updating `FORMULA` fields is not supported.\n"},"sources":[{"fileName":"src/types/field.ts","line":661,"character":11}],"defaultValue":"\"formula\""},{"id":168,"name":"LAST_MODIFIED_BY","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Shows the last collaborator who most recently modified any editable field or just in specific\neditable fields.","text":"The cell value format is the same as the `SINGLE_COLLABORATOR` field, without the ability to\nwrite to the cell value.\n\n**Cell read format**\n```js\n{\n    id: string,\n    email: string,\n    name?: string,\n    profilePicUrl?: string,\n}\n```\n\n**Cell write format**\n\nn/a\n\n**Field options read format**\n```js\n{\n    referencedFieldIds: Array<FieldId>,\n    choices: Array<{\n        id: string,\n        email: string,\n        name?: string,\n        profilePicUrl?: string,\n    }>,\n}\n```\n\n**Field options write format**\n\nCreating or updating `LAST_MODIFIED_BY` fields is not supported.\n\n"},"sources":[{"fileName":"src/types/field.ts","line":1016,"character":20}],"defaultValue":"\"lastModifiedBy\""},{"id":166,"name":"LAST_MODIFIED_TIME","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Shows the date and time that a record was most recently modified in any editable field or\njust in specific editable fields.","text":"When reading from a \"Last modified time\" field, the cell value will always be an\n[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date time.\n(Field options specify how it's displayed in the UI.)\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n\nn/a\n\n**Field options read format**\n```js\n{\n    // false if the formula contains an error\n    isValid: boolean,\n    // the fields to check the last modified time of\n    referencedFieldIds: Array<FieldId>,\n    // the cell value result type\n    result: {\n        type: 'date' | 'dateTime',\n        // See DATE and DATE_TIME for detailed field options\n        options: DateOrDateTimeFieldOptions,\n    },\n}\n```\n**Field options write format**\n\nCreating or updating `LAST_MODIFIED_TIME` fields is not supported.\n"},"sources":[{"fileName":"src/types/field.ts","line":938,"character":22}],"defaultValue":"\"lastModifiedTime\""},{"id":142,"name":"MULTILINE_TEXT","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A long text field that can span multiple lines. May contain \"mention tokens\",\ne.g. `<airtable:mention id=\"menE1i9oBaGX3DseR\">@Alex</airtable:mention>`","text":"**Cell format**\n```js\nstring\n```\n\n**Field options**\n\nn/a\n"},"sources":[{"fileName":"src/types/field.ts","line":75,"character":18}],"defaultValue":"\"multilineText\""},{"id":154,"name":"MULTIPLE_ATTACHMENTS","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Attachments allow you to add images, documents, or other files which can then be viewed or downloaded.","text":"When updating an existing attachment cell value, the specified array will\noverwrite the current cell value. If you want to add a new attachment without\ndeleting the current attachments, you can spread the current cell value like so:\n```js\nconst newAttachmentUrl = 'example.com/cute-cats.jpeg';\nmyTable.updateRecordAsync(myRecord, {\n    'myAttachmentField': [\n        ...myRecord.getCellValue('myAttachmentField'),\n        { url: newAttachmentUrl }\n    ]\n})\n```\n\nSimilarly, you can clear the current cell value by passing an empty array, or\nremove specific attachments by passing a filtered array of the current cell\nvalue.\n\nNote: when you pass an existing attachment, you must pass the full attachment\nobject. New attachments only require the `url` property.\n\n**Cell read format**\n```js\nArray<{\n    // unique attachment id\n    id: string,\n    // url, e.g. \"https://dl.airtable.com/foo.jpg\"\n    url: string,\n    // filename, e.g. \"foo.jpg\"\n    filename: string,\n    // file size, in bytes\n    size?: number,\n    // content type, e.g. \"image/jpeg\"\n    type?: string,\n    // thumbnails if available\n    thumbnails?: {\n        small?: {\n            url: string,\n            width: number,\n            height: number,\n        },\n        large?: {\n            url: string,\n            width: number,\n            height: number,\n        },\n        full?: {\n            url: string,\n            width: number,\n            height: number,\n        },\n    },\n}>\n```\n\n**Cell write format**\n```js\nArray<\n    // New attachment format\n    { url: string, filename?: string} ||\n    // Pre-existing attachments use cell read format specified above\n    { ... }\n>\n```\nFor pre-existing attachments, pass the object read from the cell value.\nYou cannot change any properties of pre-existing attachments.\n\n**Field options read format**\n```js\n{\n    // Whether attachments are rendered in the reverse order from the cell value in the\n    // Airtable UI (i.e. most recent first)\n    // You generally do not need to rely on this option.\n    isReversed: boolean,\n}\n```\n\n**Field options write format**\n\nN/A\n\nOptions are not required when creating a `MULTIPLE_ATTACHMENTS` field, and updating options\nis not supported.\n"},"sources":[{"fileName":"src/types/field.ts","line":601,"character":24}],"defaultValue":"\"multipleAttachments\""},{"id":149,"name":"MULTIPLE_COLLABORATORS","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A collaborator field lets you add collaborators to your records. Collaborators can optionally\nbe notified when they're added. A multiple collaborator field has been configured to\nreference any number of collaborators.","text":"Similar to MULTIPLE_ATTACHMENTS and MULTIPLE_COLLABORATORS, this array-type field\nwill override the current cell value when being updated. Be sure to spread the current\ncell value if you want to keep the currently selected collaborators.\n\n**Cell read format**\n```js\nArray<{\n    id: string,\n    email: string,\n    name?: string,\n    profilePicUrl?: string,\n}>\n```\nThe currently selected collaborators.\n\n**Cell write format**\n```js\nArray<{ id: string }>\n```\n\n**Field options read format**\n```js\n{\n    choices: Array<{\n        id: string,\n        email: string,\n        name?: string,\n        profilePicUrl?: string,\n    }>,\n}\n```\n\n**Field options write format**\n\nN/A\n\nOptions are not required when creating a `MULTIPLE_COLLABORATORS` field, and updating options\nis not supported.\n"},"sources":[{"fileName":"src/types/field.ts","line":334,"character":26}],"defaultValue":"\"multipleCollaborators\""},{"id":160,"name":"MULTIPLE_LOOKUP_VALUES","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Lookup a field on linked records.","text":"**Cell read format**\n```js\nArray<{\n    // the ID of the linked record this lookup value comes from\n    linkedRecordId: RecordId,\n    // the cell value of the lookup. the actual type depends on the field being looked up\n    value: unknown,\n}>\n```\n\n**Cell write format**\n\nn/a\n\n**Field options read format**\n```js\n{\n    // whether the lookup field is correctly configured\n    isValid: boolean,\n    // the linked record field in this table that this field is\n    // looking up\n    recordLinkFieldId: FieldId,\n    // the field in the foreign table that will be looked up on\n    // each linked record\n    fieldIdInLinkedTable: FieldId | null,\n    // the local field configuration for the foreign field being\n    // looked up\n    result?: undefined | {type: FieldType, options: unknown}\n}\n```\n\n**Field options write format**\n\nCreating or updating `MULTIPLE_LOOKUP_VALUES` fields is not supported.\n"},"sources":[{"fileName":"src/types/field.ts","line":800,"character":26}],"defaultValue":"\"multipleLookupValues\""},{"id":150,"name":"MULTIPLE_RECORD_LINKS","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Link to another record.","text":"When updating an existing linked record cell value, the specified array will\noverwrite the current cell value. If you want to add a new linked record without\ndeleting the current linked records, you can spread the current cell value like so:\n```js\nconst newForeignRecordIdToLink = 'recXXXXXXXXXXXXXX';\nmyTable.updateRecordAsync(myRecord, {\n    'myLinkedRecordField': [\n        ...myRecord.getCellValue('myLinkedRecordField'),\n        { id: newForeignRecordIdToLink }\n    ]\n})\n```\n\nSimilarly, you can clear the current cell value by passing an empty array, or\nremove specific linked records by passing a filtered array of the current cell\nvalue.\n\n**Cell read format**\n```js\nArray<{\n    id: RecordId,\n    name: string,\n}>\n```\nThe currently linked record IDs and their primary cell values from the linked table.\n\n**Cell write format**\n```js\nArray<{ id: RecordId }>\n```\n\n**Field options read format**\n```js\n{\n    // The ID of the table this field links to\n    linkedTableId: TableId,\n    // The ID of the field in the linked table that links back\n    // to this one\n    inverseLinkFieldId?: FieldId,\n    // The ID of the view in the linked table to use when showing\n    // a list of records to select from\n    viewIdForRecordSelection?: ViewId,\n    // Whether linked records are rendered in the reverse order from the cell value in the\n    // Airtable UI (i.e. most recent first)\n    // You generally do not need to rely on this option.\n    isReversed: boolean,\n}\n```\n\n**Field options write format**\n```js\n{\n    // The ID of the table this field links to\n    linkedTableId: TableId,\n    // The ID of the view in the linked table to use when showing\n    // a list of records to select from\n    viewIdForRecordSelection?: ViewId,\n}\n```\n\nCreating `MULTIPLE_RECORD_LINKS` fields is supported but updating options for existing\n`MULTIPLE_RECORD_LINKS` fields is not supported.\n"},"sources":[{"fileName":"src/types/field.ts","line":401,"character":25}],"defaultValue":"\"multipleRecordLinks\""},{"id":147,"name":"MULTIPLE_SELECTS","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Multiple select allows you to select one or more predefined choices from a dropdown","text":"Similar to MULTIPLE_ATTACHMENTS and MULTIPLE_COLLABORATORS, this array-type field\nwill override the current cell value when being updated. Be sure to spread the current\ncell value if you want to keep the currently selected choices.\n\n**Cell read format**\n```js\nArray<{\n    id: string,\n    name: string,\n    color?: Color,\n}>\n```\nThe currently selected choices.\n\n**Cell write format**\n```js\nArray<{id: string} | {name: string}>\n```\n\n**Field options read format**\n```js\n{\n    choices: Array<{\n        id: string,\n        name: string,\n        color?: Color,\n    }>,\n}\n```\n\n**Field options write format**\n```js\n{\n    choices: Array<\n        // New choice format\n        {name: string, color?: Color} |\n        // Pre-existing choices use read format specified above\n    >,\n}\n```\nYou must pass all pre-existing choices in `choices` when updating a `MULTIPLE_SELECT` field\n(similar to updating a `MULTIPLE` field type cell value). You can do this by spreading\nthe current choices:\n```js\nconst multipleSelectField = table.getFieldByName('My multiple select field');\nawait multipleSelectField.updateOptionsAsync({\n    choices: [\n        ...multipleSelectField.options.choices,\n        {name: 'My new choice'},\n    ],\n})\n\n```\n"},"sources":[{"fileName":"src/types/field.ts","line":247,"character":20}],"defaultValue":"\"multipleSelects\""},{"id":143,"name":"NUMBER","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A number.","text":"The `precision` option indicates the number of digits shown to the right of\nthe decimal point for this field.\n\n**Cell format**\n```js\nnumber\n```\n\n**Field options**\n```js\n{\n    precision: number, // from 0 to 8 inclusive\n}\n```\n"},"sources":[{"fileName":"src/types/field.ts","line":94,"character":10}],"defaultValue":"\"number\""},{"id":144,"name":"PERCENT","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A percentage.","text":"When reading from and writing to a \"Percent\" field, the cell value is a decimal.\nFor example, 0 is 0%, 0.5 is 50%, and 1 is 100%.\n\n**Cell format**\n```js\nnumber\n```\n\n**Field options**\n```js\n{\n    precision: number, // from 0 to 8 inclusive\n}\n```\n"},"sources":[{"fileName":"src/types/field.ts","line":113,"character":11}],"defaultValue":"\"percent\""},{"id":153,"name":"PHONE_NUMBER","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A telephone number (e.g. (415) 555-9876).","text":"**Cell format**\n```js\nstring\n```\n\n**Field options**\n\nNone\n"},"sources":[{"fileName":"src/types/field.ts","line":514,"character":16}],"defaultValue":"\"phoneNumber\""},{"id":163,"name":"RATING","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A rating (e.g. stars out of 5)","text":"**Cell format**\n```js\nnumber\n```\n\n**Field options**\n```js\n{\n    // the icon name used to display the rating\n    icon: 'star' | 'heart' | 'thumbsUp' | 'flag',\n    // the maximum value for the rating, from 1 to 10 inclusive\n    max: number,\n    // the color of selected icons\n    color: 'yellowBright' | 'orangeBright' | 'redBright' | 'pinkBright' | 'purpleBright' | 'blueBright' | 'cyanBright' | 'tealBright' | 'greenBright' | 'grayBright' ,\n}\n```\n\nBases on a free or plus plan are limited to using the 'star' icon and 'yellowBright' color.\n"},"sources":[{"fileName":"src/types/field.ts","line":866,"character":10}],"defaultValue":"\"rating\""},{"id":164,"name":"RICH_TEXT","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A long text field with rich formatting enabled.","text":"Returned string is formatted with [markdown syntax for Airtable rich text formatting](https://support.airtable.com/hc/en-us/articles/360044741993-Markdown-syntax-for-Airtable-rich-text-formatting).\nUse this formatting when updating cell values.\n\n**Cell format**\n```js\nstring\n```\n**Field options**\n\nn/a\n\n"},"sources":[{"fileName":"src/types/field.ts","line":882,"character":13}],"defaultValue":"\"richText\""},{"id":158,"name":"ROLLUP","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A rollup allows you to summarize data from records that are linked to this table.","text":"**Cell read format**\nCheck `options.result` to know the resulting field type.\n```js\nany\n```\n\n**Cell write format**\n\nn/a\n\n**Field options read format**\n```js\n{\n    // false if the formula contains an error\n    isValid: boolean,\n    // the linked record field in this table that this field is\n    // summarizing.\n    recordLinkFieldId: FieldId,\n    // the field id in the linked table that this field is summarizing.\n    fieldIdInLinkedTable: FieldId,\n    // the other fields in the record that are used in the formula\n    referencedFieldIds: Array<FieldId>,\n    // the resulting field type and options returned by the formula\n    result: {\n        // the field type of the formula result\n        type: string,\n        // that types options\n        options?: any,\n    },\n}\n```\n\n**Field options write format**\n\nCreating or updating `ROLLUP` fields is not supported.\n"},"sources":[{"fileName":"src/types/field.ts","line":733,"character":10}],"defaultValue":"\"rollup\""},{"id":148,"name":"SINGLE_COLLABORATOR","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A collaborator field lets you add collaborators to your records. Collaborators can optionally\nbe notified when they're added. A single collaborator field has been configured to only\nreference one collaborator.","text":"**Cell read format**\n```js\n{\n    id: string,\n    email: string,\n    name?: string,\n    profilePicUrl?: string,\n}\n```\nThe currently selected collaborator.\n\n**Cell write format**\n```js\n{ id: string }\n```\n\n**Field options read format**\n```js\n{\n    choices: Array<{\n        id: string,\n        email: string,\n        name?: string,\n        profilePicUrl?: string,\n    }>,\n}\n```\n\n**Field options write format**\n\nN/A\n\nOptions are not required when creating a `SINGLE_COLLABORATOR` field, and updating options is\nnot supported.\n\n"},"sources":[{"fileName":"src/types/field.ts","line":289,"character":23}],"defaultValue":"\"singleCollaborator\""},{"id":139,"name":"SINGLE_LINE_TEXT","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A single line of text.","text":"**Cell format**\n```js\nstring\n```\n\n**Field options**\n\nn/a\n"},"sources":[{"fileName":"src/types/field.ts","line":35,"character":20}],"defaultValue":"\"singleLineText\""},{"id":146,"name":"SINGLE_SELECT","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Single select allows you to select a single choice from predefined choices in a dropdown.","text":"**Cell read format**\n```js\n{\n    id: string,\n    name: string,\n    color?: Color\n}\n```\nThe currently selected choices.\n\n**Cell write format**\n```js\n{ id: string } | { name: string }\n```\n\n**Field options read format**\n```js\n{\n    choices: Array<{\n        id: string,\n        name: string,\n        color?: {@link Color}, // Color is not provided when field coloring is disabled.\n    }>,\n}\n```\n\nAll colors except base colors from {@link Color} can be used as choice colors (e.g.\n\"blueBright\", \"blueDark1\", \"blueLight1\", \"blueLight2\" are supported, \"blue\" is not)\n\nBases on a free or plus plan are limited to colors ending in \"Light2\".\n\n**Field options write format**\n```js\n{\n    choices: Array<\n        // New choice format\n        {name: string, color?: {@link Color}} |\n        // Pre-existing choices use read format specified above\n    >,\n}\n```\nYou must pass all pre-existing choices in `choices` when updating a `SINGLE_SELECT` field\n(similar to updating a `MULTIPLE` field type cell value). You can do this by spreading\nthe current choices:\n```js\nconst selectField = table.getFieldByName('My select field');\nawait selectField.updateOptionsAsync({\n    choices: [\n        ...selectField.options.choices,\n        {name: 'My new choice'},\n    ],\n})\n\n```\n"},"sources":[{"fileName":"src/types/field.ts","line":189,"character":17}],"defaultValue":"\"singleSelect\""},{"id":141,"name":"URL","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"A valid URL (e.g. airtable.com or https://airtable.com/universe).","text":"**Cell format**\n```js\nstring\n```\n\n**Field options**\n\nn/a\n"},"sources":[{"fileName":"src/types/field.ts","line":61,"character":7}],"defaultValue":"\"url\""}],"groups":[{"title":"Enumeration members","kind":16,"children":[161,162,169,155,159,167,157,145,151,152,165,140,156,168,166,142,154,149,160,150,147,143,144,153,163,164,158,148,139,146,141]}],"sources":[{"fileName":"src/types/field.ts","line":22,"character":21}]},{"id":1724,"name":"Field","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Model class representing a field in a table.","tags":[{"tag":"example","text":"\n```js\nimport {base} from '@airtable/blocks';\n\nconst table = base.getTableByName('Table 1');\nconst field = table.getFieldByName('Name');\nconsole.log('The type of this field is', field.type);\n```"},{"tag":"docspath","text":"models/Field\n"}]},"children":[{"id":1762,"name":"availableAggregators","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"A list of available aggregators given this field's configuration.","tags":[{"tag":"example","text":"\n```js\nconst fieldAggregators = myField.availableAggregators;\n```\n"}]},"getSignature":[{"id":1763,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"A list of available aggregators given this field's configuration.","tags":[{"tag":"example","text":"\n```js\nconst fieldAggregators = myField.availableAggregators;\n```\n"}]},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Aggregator","id":1692}]}}],"sources":[{"fileName":"src/models/field.ts","line":324,"character":28}]},{"id":1745,"name":"config","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The type and options of the field to make type narrowing `FieldOptions` easier.","tags":[{"tag":"see","text":"{@link FieldConfig}"},{"tag":"example","text":"\nconst fieldConfig = field.config;\nif (fieldConfig.type === FieldType.SINGLE_SELECT) {\n    return fieldConfig.options.choices;\n} else if (fieldConfig.type === FieldType.MULTIPLE_LOOKUP_VALUES && fieldConfig.options.isValid) {\n    if (fieldConfig.options.result.type === FieldType.SINGLE_SELECT) {\n        return fieldConfig.options.result.options.choices;\n    }\n}\nreturn DEFAULT_CHOICES;\n"}]},"getSignature":[{"id":1746,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The type and options of the field to make type narrowing `FieldOptions` easier.","tags":[{"tag":"see","text":"{@link FieldConfig}"},{"tag":"example","text":"\nconst fieldConfig = field.config;\nif (fieldConfig.type === FieldType.SINGLE_SELECT) {\n    return fieldConfig.options.choices;\n} else if (fieldConfig.type === FieldType.MULTIPLE_LOOKUP_VALUES && fieldConfig.options.isValid) {\n    if (fieldConfig.options.result.type === FieldType.SINGLE_SELECT) {\n        return fieldConfig.options.result.options.choices;\n    }\n}\nreturn DEFAULT_CHOICES;\n"}]},"type":{"type":"reference","name":"FieldConfig","id":345}}],"sources":[{"fileName":"src/models/field.ts","line":167,"character":14}]},{"id":1760,"name":"description","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The description of the field, if it has one. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myField.description);\n// => 'This is my field'\n```\n"}]},"getSignature":[{"id":1761,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The description of the field, if it has one. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myField.description);\n// => 'This is my field'\n```\n"}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/field.ts","line":310,"character":19}]},{"id":1776,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":1777,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":1756,"name":"isComputed","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if this field is computed, `false` otherwise. A field is\n\"computed\" if it's value is not set by user input (e.g. autoNumber, formula,\netc.). Can be watched","tags":[{"tag":"example","text":"\n```js\nconsole.log(mySingleLineTextField.isComputed);\n// => false\nconsole.log(myAutoNumberField.isComputed);\n// => true\n```\n"}]},"getSignature":[{"id":1757,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if this field is computed, `false` otherwise. A field is\n\"computed\" if it's value is not set by user input (e.g. autoNumber, formula,\netc.). Can be watched","tags":[{"tag":"example","text":"\n```js\nconsole.log(mySingleLineTextField.isComputed);\n// => false\nconsole.log(myAutoNumberField.isComputed);\n// => true\n```\n"}]},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/field.ts","line":289,"character":18}]},{"id":1780,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"getSignature":[{"id":1781,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":81,"character":17}],"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}},{"id":1758,"name":"isPrimaryField","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if this field is its parent table's primary field, `false` otherwise.\nShould never change because the primary field of a table cannot change."},"getSignature":[{"id":1759,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if this field is its parent table's primary field, `false` otherwise.\nShould never change because the primary field of a table cannot change."},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/field.ts","line":297,"character":22}]},{"id":1739,"name":"name","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The name of the field. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myField.name);\n// => 'Name'\n```\n"}]},"getSignature":[{"id":1740,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The name of the field. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myField.name);\n// => 'Name'\n```\n"}]},"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/field.ts","line":92,"character":12}]},{"id":1743,"name":"options","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The configuration options of the field. The structure of the field's\noptions depend on the field's type. `null` if the field has no options.\nCan be watched.","tags":[{"tag":"see","text":"{@link FieldType}"},{"tag":"example","text":"\n```js\nimport {FieldType} from '@airtable/blocks/models';\n\nif (myField.type === FieldType.CURRENCY) {\n    console.log(myField.options.symbol);\n    // => '$'\n}\n```\n"}]},"getSignature":[{"id":1744,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The configuration options of the field. The structure of the field's\noptions depend on the field's type. `null` if the field has no options.\nCan be watched.","tags":[{"tag":"see","text":"{@link FieldType}"},{"tag":"example","text":"\n```js\nimport {FieldType} from '@airtable/blocks/models';\n\nif (myField.type === FieldType.CURRENCY) {\n    console.log(myField.options.symbol);\n    // => '$'\n}\n```\n"}]},"type":{"type":"union","types":[{"type":"reference","name":"FieldOptions"},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/field.ts","line":138,"character":15}]},{"id":1741,"name":"type","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The type of the field. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myField.type);\n// => 'singleLineText'\n```\n"}]},"getSignature":[{"id":1742,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The type of the field. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myField.type);\n// => 'singleLineText'\n```\n"}]},"type":{"type":"reference","name":"FieldType","id":138}}],"sources":[{"fileName":"src/models/field.ts","line":104,"character":12}]},{"id":1747,"name":"checkPermissionsForUpdateOptions","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Checks whether the current user has permission to perform the given options update.\n\nAccepts partial input, in the same format as {@link updateOptionsAsync}.\n\nReturns `{hasPermission: true}` if the current user can update the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nconst updateFieldCheckResult = field.checkPermissionsForUpdateOptions();\n\nif (!updateFieldCheckResult.hasPermission) {\n    alert(updateFieldCheckResult.reasonDisplayString);\n}\n```\n"}]},"signatures":[{"id":1748,"name":"checkPermissionsForUpdateOptions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Checks whether the current user has permission to perform the given options update.\n\nAccepts partial input, in the same format as {@link updateOptionsAsync}.\n\nReturns `{hasPermission: true}` if the current user can update the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nconst updateFieldCheckResult = field.checkPermissionsForUpdateOptions();\n\nif (!updateFieldCheckResult.hasPermission) {\n    alert(updateFieldCheckResult.reasonDisplayString);\n}\n```\n"}]},"parameters":[{"id":1749,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"new options for the field\n"},"type":{"type":"reference","name":"FieldOptions"}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/field.ts","line":195,"character":36}]},{"id":1767,"name":"convertStringToCellValue","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Attempt to parse a given string and return a valid cell value for the field's current config.\nReturns `null` if unable to parse the given string.","tags":[{"tag":"example","text":"\n```js\nconst inputString = '42';\nconst cellValue = myNumberField.convertStringToCellValue(inputString);\nconsole.log(cellValue === 42);\n// => true\n```\n"}]},"signatures":[{"id":1768,"name":"convertStringToCellValue","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Attempt to parse a given string and return a valid cell value for the field's current config.\nReturns `null` if unable to parse the given string.","tags":[{"tag":"example","text":"\n```js\nconst inputString = '42';\nconst cellValue = myNumberField.convertStringToCellValue(inputString);\nconsole.log(cellValue === 42);\n// => true\n```\n"}]},"parameters":[{"id":1769,"name":"string","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The string to parse."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/models/field.ts","line":379,"character":28}]},{"id":1750,"name":"hasPermissionToUpdateOptions","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"An alias for `checkPermissionsForUpdateOptions(options).hasPermission`.\n\nChecks whether the current user has permission to perform the options update.\n\nAccepts partial input, in the same format as {@link updateOptionsAsync}.\n","tags":[{"tag":"example","text":"\n```js\nconst canUpdateField = field.hasPermissionToUpdateOptions();\n\nif (!canUpdateField) {\n    alert('not allowed!');\n}\n```\n"}]},"signatures":[{"id":1751,"name":"hasPermissionToUpdateOptions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"An alias for `checkPermissionsForUpdateOptions(options).hasPermission`.\n\nChecks whether the current user has permission to perform the options update.\n\nAccepts partial input, in the same format as {@link updateOptionsAsync}.\n","tags":[{"tag":"example","text":"\n```js\nconst canUpdateField = field.hasPermissionToUpdateOptions();\n\nif (!canUpdateField) {\n    alert('not allowed!');\n}\n```\n"}]},"parameters":[{"id":1752,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"new options for the field\n"},"type":{"type":"reference","name":"FieldOptions"}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/field.ts","line":227,"character":32}]},{"id":1764,"name":"isAggregatorAvailable","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks if the given aggregator is available for this field.","tags":[{"tag":"example","text":"\n```js\nimport {aggregators} from '@airtable/blocks/models';\nconst aggregator = aggregators.totalAttachmentSize;\n\n// Using an aggregator object\nconsole.log(myAttachmentField.isAggregatorAvailable(aggregator));\n// => true\n\n// Using an aggregator key\nconsole.log(myTextField.isAggregatorAvailable('totalAttachmentSize'));\n// => false\n```\n"}]},"signatures":[{"id":1765,"name":"isAggregatorAvailable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks if the given aggregator is available for this field.","tags":[{"tag":"example","text":"\n```js\nimport {aggregators} from '@airtable/blocks/models';\nconst aggregator = aggregators.totalAttachmentSize;\n\n// Using an aggregator object\nconsole.log(myAttachmentField.isAggregatorAvailable(aggregator));\n// => true\n\n// Using an aggregator key\nconsole.log(myTextField.isAggregatorAvailable('totalAttachmentSize'));\n// => false\n```\n"}]},"parameters":[{"id":1766,"name":"aggregator","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The aggregator object or aggregator key."},"type":{"type":"union","types":[{"type":"reference","name":"Aggregator","id":1692},{"type":"reference","name":"AggregatorKey","id":1001}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/field.ts","line":356,"character":25}]},{"id":1784,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":1785,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":1812,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"signatures":[{"id":1813,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"parameters":[{"id":1814,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableFieldKey","id":1828},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableFieldKey","id":1828}]}]}},{"id":1815,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reflection","declaration":{"id":1816,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":1817,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1818,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":1819,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableFieldKey","id":1828}},{"id":1820,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":113,"character":17}]}}},{"id":1821,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableFieldKey","id":1828}]},"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/watchable.ts","line":111,"character":11}],"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":1753,"name":"updateOptionsAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Updates the options for this field.\n\nThrows an error if the user does not have permission to update the field, if invalid\noptions are provided, if this field has no writable options, or if updates to this field\ntype is not supported.\n\nRefer to {@link FieldType} for supported field types, the write format for options, and\nother specifics for certain field types.\n\nThis action is asynchronous. Unlike updates to cell values, updates to field options are\n**not** applied optimistically locally. You must `await` the returned promise before\nrelying on the change in your app.\n","tags":[{"tag":"example","text":"\n```js\nasync function addChoiceToSelectField(selectField, nameForNewOption) {\n    const updatedOptions = {\n        choices: [\n            ...selectField.options.choices,\n            {name: nameForNewOption},\n        ]\n    };\n\n    if (selectField.hasPermissionToUpdateOptions(updatedOptions)) {\n        await selectField.updateOptionsAsync(updatedOptions);\n    }\n}\n```\n"}]},"signatures":[{"id":1754,"name":"updateOptionsAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Updates the options for this field.\n\nThrows an error if the user does not have permission to update the field, if invalid\noptions are provided, if this field has no writable options, or if updates to this field\ntype is not supported.\n\nRefer to {@link FieldType} for supported field types, the write format for options, and\nother specifics for certain field types.\n\nThis action is asynchronous. Unlike updates to cell values, updates to field options are\n**not** applied optimistically locally. You must `await` the returned promise before\nrelying on the change in your app.\n","tags":[{"tag":"example","text":"\n```js\nasync function addChoiceToSelectField(selectField, nameForNewOption) {\n    const updatedOptions = {\n        choices: [\n            ...selectField.options.choices,\n            {name: nameForNewOption},\n        ]\n    };\n\n    if (selectField.hasPermissionToUpdateOptions(updatedOptions)) {\n        await selectField.updateOptionsAsync(updatedOptions);\n    }\n}\n```\n"}]},"parameters":[{"id":1755,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"new options for the field\n"},"type":{"type":"reference","name":"FieldOptions"}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]}}],"sources":[{"fileName":"src/models/field.ts","line":265,"character":28}]},{"id":1802,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":1803,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":1804,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableFieldKey","id":1828},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableFieldKey","id":1828}]}]}},{"id":1805,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reflection","declaration":{"id":1806,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":1807,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1808,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":1809,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableFieldKey","id":1828}},{"id":1810,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":66,"character":17}]}}},{"id":1811,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableFieldKey","id":1828}]},"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/watchable.ts","line":64,"character":9}],"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Accessors","kind":262144,"children":[1762,1745,1760,1776,1756,1780,1758,1739,1743,1741]},{"title":"Methods","kind":2048,"children":[1747,1767,1750,1764,1784,1812,1753,1802]}],"sources":[{"fileName":"src/models/field.ts","line":44,"character":11}],"extendedTypes":[{"type":"reference","name":"AbstractModel","id":890,"typeArguments":[{"type":"reference","name":"FieldData"},{"type":"reference","name":"WatchableFieldKey","id":1828}]}]},{"id":345,"name":"FieldConfig","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A type for use with Field objects to make type narrowing FieldOptions easier.","tags":[{"tag":"example","text":"\nconst fieldConfig = field.config;\nif (fieldConfig.type === FieldType.SINGLE_SELECT) {\n    return fieldConfig.options.choices;\n} else if (fieldConfig.type === FieldType.MULTIPLE_LOOKUP_VALUES && fieldConfig.options.isValid) {\n    if (fieldConfig.options.result.type === FieldType.SINGLE_SELECT) {\n        return fieldConfig.options.result.options.choices;\n    }\n}\nreturn DEFAULT_CHOICES;\n"}]},"sources":[{"fileName":"src/types/field.ts","line":1372,"character":23}],"type":{"type":"union","types":[{"type":"reference","name":"OptionlessFieldConfig"},{"type":"reference","name":"NumericFieldConfig"},{"type":"reference","name":"CurrencyFieldConfig"},{"type":"reference","name":"SelectFieldConfig"},{"type":"reference","name":"CollaboratorFieldConfig"},{"type":"reference","name":"LinkedRecordFieldConfig"},{"type":"reference","name":"DateFieldConfig"},{"type":"reference","name":"DateTimeFieldConfig"},{"type":"reference","name":"AttachmentsFieldConfig"},{"type":"reference","name":"CheckboxFieldConfig"},{"type":"reference","name":"FormulaFieldConfig"},{"type":"reference","name":"CreatedTimeFieldConfig"},{"type":"reference","name":"RollupFieldConfig"},{"type":"reference","name":"CountFieldConfig"},{"type":"reference","name":"LookupFieldConfig"},{"type":"reference","name":"RatingFieldConfig"},{"type":"reference","name":"DurationFieldConfig"},{"type":"reference","name":"LastModifiedTimeFieldConfig"},{"type":"reference","name":"CreatedByFieldConfig"},{"type":"reference","name":"LastModifiedByFieldConfig"}]}},{"id":331,"name":"FieldId","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/field.ts","line":7,"character":19}],"type":{"type":"intrinsic","name":"string"}},{"id":1828,"name":"WatchableFieldKey","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"All the watchable keys in a field.\n- `name`\n- `type`\n- `options`\n- `isComputed`\n- `description`"},"sources":[{"fileName":"src/models/field.ts","line":29,"character":29}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"name"},{"type":"stringLiteral","value":"description"},{"type":"stringLiteral","value":"type"},{"type":"stringLiteral","value":"options"},{"type":"stringLiteral","value":"isComputed"}]}}],"groups":[{"title":"Enumerations","kind":4,"children":[138]},{"title":"Classes","kind":128,"children":[1724]},{"title":"Type aliases","kind":4194304,"children":[345,331,1828]}],"sources":[{"fileName":"src/types/field.ts","line":1,"character":0}]},{"id":97,"name":"@airtable/blocks/models: Record","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/types/record.ts","comment":{},"children":[{"id":1568,"name":"Record","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Model class representing a record in a table.","text":"Do not instantiate. You can get instances of this class by calling `table.selectRecords`\nor `view.selectRecords` and using the resulting {@link RecordQueryResult}.\n","tags":[{"tag":"docspath","text":"models/Record\n"}]},"children":[{"id":1623,"name":"commentCount","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The number of comments on this record.","tags":[{"tag":"example","text":"\n```js\nconst commentCount = myRecord.commentCount;\nconst isSingular = commentCount === 1;\nconsole.log(\n    `This record has ${commentCount} comment${isSingular ? '' : 's'}`\n);\n```\n"}]},"getSignature":[{"id":1624,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The number of comments on this record.","tags":[{"tag":"example","text":"\n```js\nconst commentCount = myRecord.commentCount;\nconst isSingular = commentCount === 1;\nconsole.log(\n    `This record has ${commentCount} comment${isSingular ? '' : 's'}`\n);\n```\n"}]},"type":{"type":"intrinsic","name":"number"}}],"sources":[{"fileName":"src/models/record.ts","line":391,"character":20}]},{"id":1625,"name":"createdTime","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The created time of this record.","tags":[{"tag":"example","text":"\n```js\nconsole.log(`\n    This record was created at ${myRecord.createdTime.toISOString()}\n`);\n```\n"}]},"getSignature":[{"id":1626,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The created time of this record.","tags":[{"tag":"example","text":"\n```js\nconsole.log(`\n    This record was created at ${myRecord.createdTime.toISOString()}\n`);\n```\n"}]},"type":{"type":"reference","name":"Date"}}],"sources":[{"fileName":"src/models/record.ts","line":404,"character":19}]},{"id":1636,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":1637,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":1640,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"getSignature":[{"id":1641,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":81,"character":17}],"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}},{"id":1621,"name":"name","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The primary cell value in this record, formatted as a `string`.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myRecord.name);\n// => '42'\n```\n"}]},"getSignature":[{"id":1622,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The primary cell value in this record, formatted as a `string`.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myRecord.name);\n// => '42'\n```\n"}]},"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/record.ts","line":376,"character":12}]},{"id":1619,"name":"url","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The URL for the record. You can visit this URL in the browser to be taken to the record in the Airtable UI.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myRecord.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/recxxxxxxxxxxxxxx'\n```\n"}]},"getSignature":[{"id":1620,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The URL for the record. You can visit this URL in the browser to be taken to the record in the Airtable UI.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myRecord.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/recxxxxxxxxxxxxxx'\n```\n"}]},"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/record.ts","line":361,"character":11}]},{"id":1601,"name":"getAttachmentClientUrlFromCellValueUrl","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Returns a URL that is suitable for rendering an attachment on the current client.\nThe URL that is returned will only work for the current user.","tags":[{"tag":"example","text":"\n```js\nimport React from 'react';\n\nfunction RecordAttachments(props) {\n    const {record, attachmentField} = props;\n    const attachmentCellValue = record.getCellValue(attachmentField);\n    if (attachmentCellValue === null) {\n        return null;\n    }\n    return (\n        <div>\n            {attachmentCellValue.map(attachmentObj => {\n                const clientUrl =\n                    record.getAttachmentClientUrlFromCellValueUrl(\n                        attachmentObj.id,\n                        attachmentObj.url\n                    );\n                return (\n                    <img key={attachmentObj.id} src={clientUrl} width={200} />\n                );\n            })}\n        </div>\n    );\n}\n```\n"}]},"signatures":[{"id":1602,"name":"getAttachmentClientUrlFromCellValueUrl","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a URL that is suitable for rendering an attachment on the current client.\nThe URL that is returned will only work for the current user.","tags":[{"tag":"example","text":"\n```js\nimport React from 'react';\n\nfunction RecordAttachments(props) {\n    const {record, attachmentField} = props;\n    const attachmentCellValue = record.getCellValue(attachmentField);\n    if (attachmentCellValue === null) {\n        return null;\n    }\n    return (\n        <div>\n            {attachmentCellValue.map(attachmentObj => {\n                const clientUrl =\n                    record.getAttachmentClientUrlFromCellValueUrl(\n                        attachmentObj.id,\n                        attachmentObj.url\n                    );\n                return (\n                    <img key={attachmentObj.id} src={clientUrl} width={200} />\n                );\n            })}\n        </div>\n    );\n}\n```\n"}]},"parameters":[{"id":1603,"name":"attachmentId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the attachment."},"type":{"type":"intrinsic","name":"string"}},{"id":1604,"name":"attachmentUrl","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The attachment's URL (which is not suitable for rendering on the client)."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/record.ts","line":266,"character":42}]},{"id":1595,"name":"getCellValue","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the cell value of the given field for this record.","tags":[{"tag":"example","text":"\n```js\nconst cellValue = myRecord.getCellValue(mySingleLineTextField);\nconsole.log(cellValue);\n// => 'cell value'\n```\n"}]},"signatures":[{"id":1596,"name":"getCellValue","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the cell value of the given field for this record.","tags":[{"tag":"example","text":"\n```js\nconst cellValue = myRecord.getCellValue(mySingleLineTextField);\nconsole.log(cellValue);\n// => 'cell value'\n```\n"}]},"parameters":[{"id":1597,"name":"fieldOrFieldIdOrFieldName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The field (or field ID or field name) whose cell value you'd like to get."},"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/models/record.ts","line":163,"character":16}]},{"id":1598,"name":"getCellValueAsString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the cell value of the given field for this record, formatted as a `string`.","tags":[{"tag":"example","text":"\n```js\nconst stringValue = myRecord.getCellValueAsString(myNumberField);\nconsole.log(stringValue);\n// => '42'\n```\n"}]},"signatures":[{"id":1599,"name":"getCellValueAsString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the cell value of the given field for this record, formatted as a `string`.","tags":[{"tag":"example","text":"\n```js\nconst stringValue = myRecord.getCellValueAsString(myNumberField);\nconsole.log(stringValue);\n// => '42'\n```\n"}]},"parameters":[{"id":1600,"name":"fieldOrFieldIdOrFieldName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The field (or field ID or field name) whose cell value you'd like to get."},"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/record.ts","line":210,"character":24}]},{"id":1608,"name":"getColorHexInView","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the CSS hex string for this record in a given view, or null if the record has no color\nin that view.","text":"Can be watched with the 'colorInView:${ViewId}' key.\n"},"signatures":[{"id":1609,"name":"getColorHexInView","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the CSS hex string for this record in a given view, or null if the record has no color\nin that view.","text":"Can be watched with the 'colorInView:${ViewId}' key.\n"},"parameters":[{"id":1610,"name":"viewOrViewIdOrViewName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The view (or view ID or view name) to use for record coloring.\n"},"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/record.ts","line":296,"character":21}]},{"id":1605,"name":"getColorInView","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the color of this record in a given view, or null if the record has no color in that\nview.","text":"Can be watched with the 'colorInView:${ViewId}' key.\n"},"signatures":[{"id":1606,"name":"getColorInView","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the color of this record in a given view, or null if the record has no color in that\nview.","text":"Can be watched with the 'colorInView:${ViewId}' key.\n"},"parameters":[{"id":1607,"name":"viewOrViewIdOrViewName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The view (or view ID or view name) to use for record coloring.\n"},"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"reference","name":"ViewId","id":128},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"union","types":[{"type":"reference","name":"Color","id":90},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/record.ts","line":283,"character":18}]},{"id":1611,"name":"selectLinkedRecordsFromCell","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Select records referenced in a `multipleRecordLinks` cell value. Returns a query result\ncontaining the records in the given `multipleRecordLinks` field.\nSee {@link RecordQueryResult} for more."},"signatures":[{"id":1612,"name":"selectLinkedRecordsFromCell","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Select records referenced in a `multipleRecordLinks` cell value. Returns a query result\ncontaining the records in the given `multipleRecordLinks` field.\nSee {@link RecordQueryResult} for more."},"parameters":[{"id":1613,"name":"fieldOrFieldIdOrFieldName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The `multipleRecordLinks` field (or field ID or field name) to use."},"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]}},{"id":1614,"name":"opts","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Options for the query, such as sorts and fields.\n"},"type":{"type":"reference","name":"RecordQueryResultOpts","id":3563},"defaultValue":" {}"}],"type":{"type":"reference","name":"LinkedRecordsQueryResult","id":1336}}],"sources":[{"fileName":"src/models/record.ts","line":311,"character":31}]},{"id":1615,"name":"selectLinkedRecordsFromCellAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Select and load records referenced in a `multipleRecordLinks` cell value. Returns a query result\npromise containing the records in the given `multipleRecordLinks` field.\nSee {@link RecordQueryResult} for more.","text":"Remember to call `queryResult.unloadData` once you're finished with the query.\n"},"signatures":[{"id":1616,"name":"selectLinkedRecordsFromCellAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Select and load records referenced in a `multipleRecordLinks` cell value. Returns a query result\npromise containing the records in the given `multipleRecordLinks` field.\nSee {@link RecordQueryResult} for more.","text":"Remember to call `queryResult.unloadData` once you're finished with the query.\n"},"parameters":[{"id":1617,"name":"fieldOrFieldIdOrFieldName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The `multipleRecordLinks` field (or field ID or field name) to use."},"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]}},{"id":1618,"name":"opts","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Options for the query, such as sorts and fields.\n"},"type":{"type":"reference","name":"RecordQueryResultOpts","id":3563},"defaultValue":" {}"}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"reference","name":"LinkedRecordsQueryResult","id":1336}]}}],"sources":[{"fileName":"src/models/record.ts","line":344,"character":42}]},{"id":1644,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":1645,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":1672,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"signatures":[{"id":1673,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"parameters":[{"id":1674,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableRecordKey","id":1690},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableRecordKey","id":1690}]}]}},{"id":1675,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reflection","declaration":{"id":1676,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":1677,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1678,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":1679,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableRecordKey","id":1690}},{"id":1680,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":113,"character":17}]}}},{"id":1681,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableRecordKey","id":1690}]},"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/watchable.ts","line":111,"character":11}],"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":1662,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":1663,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":1664,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableRecordKey","id":1690},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableRecordKey","id":1690}]}]}},{"id":1665,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reflection","declaration":{"id":1666,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":1667,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1668,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":1669,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableRecordKey","id":1690}},{"id":1670,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":66,"character":17}]}}},{"id":1671,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableRecordKey","id":1690}]},"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/watchable.ts","line":64,"character":9}],"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Accessors","kind":262144,"children":[1623,1625,1636,1640,1621,1619]},{"title":"Methods","kind":2048,"children":[1601,1595,1598,1608,1605,1611,1615,1644,1672,1662]}],"sources":[{"fileName":"src/models/record.ts","line":50,"character":12}],"extendedTypes":[{"type":"reference","name":"AbstractModel","id":890,"typeArguments":[{"type":"reference","name":"RecordData"},{"type":"reference","name":"WatchableRecordKey","id":1690}]}]},{"id":104,"name":"RecordDef","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/record.ts","line":9,"character":21}],"type":{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"unknown"}]}},{"id":103,"name":"RecordId","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/record.ts","line":6,"character":20}],"type":{"type":"intrinsic","name":"string"}},{"id":1690,"name":"WatchableRecordKey","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Any key within record that can be watched:\n- `'name'`\n- `'commentCount'`\n- `'cellValues'`\n- `'cellValueInField:' + someFieldId`\n- `'colorInView:' + someViewId`"},"sources":[{"fileName":"src/models/record.ts","line":40,"character":23}],"type":{"type":"union","types":[{"type":"union","types":[{"type":"stringLiteral","value":"cellValues"},{"type":"stringLiteral","value":"name"},{"type":"stringLiteral","value":"commentCount"}]},{"type":"intrinsic","name":"string"}]}}],"groups":[{"title":"Classes","kind":128,"children":[1568]},{"title":"Type aliases","kind":4194304,"children":[104,103,1690]}],"sources":[{"fileName":"src/types/record.ts","line":1,"character":0}]},{"id":1829,"name":"@airtable/blocks/models: Record Coloring","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/models/record_coloring.ts","comment":{},"children":[{"id":1832,"name":"BySelectFieldRecordColorMode","kind":256,"kindString":"Interface","flags":{},"comment":{},"children":[{"id":1834,"name":"selectField","kind":1024,"kindString":"Property","flags":{},"comment":{},"sources":[{"fileName":"src/models/record_coloring.ts","line":44,"character":15}],"type":{"type":"reference","name":"Field","id":1724}},{"id":1833,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{},"sources":[{"fileName":"src/models/record_coloring.ts","line":42,"character":8}],"type":{"type":"stringLiteral","value":"bySelectField"}}],"groups":[{"title":"Properties","kind":1024,"children":[1834,1833]}],"sources":[{"fileName":"src/models/record_coloring.ts","line":40,"character":38}]},{"id":1835,"name":"ByViewRecordColorMode","kind":256,"kindString":"Interface","flags":{},"comment":{},"children":[{"id":1836,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{},"sources":[{"fileName":"src/models/record_coloring.ts","line":50,"character":8}],"type":{"type":"stringLiteral","value":"byView"}},{"id":1837,"name":"view","kind":1024,"kindString":"Property","flags":{},"comment":{},"sources":[{"fileName":"src/models/record_coloring.ts","line":52,"character":8}],"type":{"type":"reference","name":"View","id":2404}}],"groups":[{"title":"Properties","kind":1024,"children":[1836,1837]}],"sources":[{"fileName":"src/models/record_coloring.ts","line":48,"character":31}]},{"id":1830,"name":"NoRecordColorMode","kind":256,"kindString":"Interface","flags":{},"comment":{},"children":[{"id":1831,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{},"sources":[{"fileName":"src/models/record_coloring.ts","line":36,"character":8}],"type":{"type":"stringLiteral","value":"none"}}],"groups":[{"title":"Properties","kind":1024,"children":[1831]}],"sources":[{"fileName":"src/models/record_coloring.ts","line":34,"character":27}]},{"id":1843,"name":"RecordColorMode","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/models/record_coloring.ts","line":56,"character":27}],"type":{"type":"union","types":[{"type":"reference","name":"NoRecordColorMode","id":1830},{"type":"reference","name":"BySelectFieldRecordColorMode","id":1832},{"type":"reference","name":"ByViewRecordColorMode","id":1835}]}},{"id":1847,"name":"modes","kind":2097152,"kindString":"Object literal","flags":{"isExported":true,"isConst":true},"comment":{"shortText":"Record coloring config creators.","tags":[{"tag":"alias","text":"recordColoring.modes"},{"tag":"example","text":"\n```js\nimport {recordColoring} from '@airtable/blocks/models';\nimport {useRecords} from '@airtable/blocks/ui';\n\n// no record coloring:\nconst recordColorMode = recordColoring.modes.none();\n// color by select field:\nconst recordColorMode = recordColoring.modes.bySelectField(someSelectField);\n// color from view:\nconst recordColorMode = recordColoring.modes.byView(someView);\n\n// with useRecords:\nconst queryResult = useRecords(table, { recordColorMode })\n\n// with a query result:\nconst queryResult = table.selectRecords({ recordColorMode });\n```\n"}]},"children":[{"id":1850,"name":"bySelectField","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Returns a {@link RecordColorMode} that colors records by the specified Select field.","tags":[{"tag":"alias","text":"recordColoring.modes.bySelectField"}]},"signatures":[{"id":1851,"name":"bySelectField","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a {@link RecordColorMode} that colors records by the specified Select field.","tags":[{"tag":"alias","text":"recordColoring.modes.bySelectField"}]},"parameters":[{"id":1852,"name":"selectField","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"\n"},"type":{"type":"reference","name":"Field","id":1724}}],"type":{"type":"reference","name":"BySelectFieldRecordColorMode","id":1832}}],"sources":[{"fileName":"src/models/record_coloring.ts","line":111,"character":17}]},{"id":1853,"name":"byView","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Returns a {@link RecordColorMode} that colors records by the specified View.","tags":[{"tag":"alias","text":"recordColoring.modes.byView"}]},"signatures":[{"id":1854,"name":"byView","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a {@link RecordColorMode} that colors records by the specified View.","tags":[{"tag":"alias","text":"recordColoring.modes.byView"}]},"parameters":[{"id":1855,"name":"view","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"\n"},"type":{"type":"reference","name":"View","id":2404}}],"type":{"type":"reference","name":"ByViewRecordColorMode","id":1835}}],"sources":[{"fileName":"src/models/record_coloring.ts","line":123,"character":10}]},{"id":1848,"name":"none","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Returns a {@link RecordColorMode} that represents no record coloring.","tags":[{"tag":"alias","text":"recordColoring.modes.none\n"}]},"signatures":[{"id":1849,"name":"none","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a {@link RecordColorMode} that represents no record coloring.","tags":[{"tag":"alias","text":"recordColoring.modes.none\n"}]},"type":{"type":"reference","name":"NoRecordColorMode","id":1830}}],"sources":[{"fileName":"src/models/record_coloring.ts","line":100,"character":8}]}],"groups":[{"title":"Functions","kind":64,"children":[1850,1853,1848]}],"sources":[{"fileName":"src/models/record_coloring.ts","line":94,"character":18}],"type":{"type":"intrinsic","name":"object"}}],"groups":[{"title":"Interfaces","kind":256,"children":[1832,1835,1830]},{"title":"Type aliases","kind":4194304,"children":[1843]},{"title":"Object literals","kind":2097152,"children":[1847]}],"sources":[{"fileName":"src/models/record_coloring.ts","line":1,"character":0}]},{"id":1334,"name":"@airtable/blocks/models: RecordQueryResult","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/models/linked_records_query_result.ts","comment":{},"children":[{"id":1336,"name":"LinkedRecordsQueryResult","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Represents a set of records from a LinkedRecord cell value. See {@link RecordQueryResult} for main\ndocumentation.","text":"Do not instantiate. You can get instances of this class by calling\n`record.selectLinkedRecordsFromCell`.\n","tags":[{"tag":"docspath","text":"models/query results/LinkedRecordsQueryResult\n"}]},"children":[{"id":1373,"name":"fields","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The fields that were used to create this LinkedRecordsQueryResult."},"getSignature":[{"id":1374,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The fields that were used to create this LinkedRecordsQueryResult."},"type":{"type":"union","types":[{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Field","id":1724}]},{"type":"intrinsic","name":"null"}]},"overwrites":{"type":"reference","name":"RecordQueryResult.fields","id":3582}}],"sources":[{"fileName":"src/models/linked_records_query_result.ts","line":162,"character":14}],"overwrites":{"type":"reference","name":"RecordQueryResult.fields","id":3582}},{"id":1536,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":1537,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":1525,"name":"isDataLoaded","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{},"getSignature":[{"id":1526,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDataLoaded","id":1031}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":111,"character":20}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDataLoaded","id":1031}},{"id":1523,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"getSignature":[{"id":1524,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDeleted","id":1029}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":104,"character":17}],"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDeleted","id":1029}},{"id":1365,"name":"isValid","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"Is the query result currently valid? This value always starts as 'true',\nbut can become false if the record from which this result was created is\ndeleted, if the field is deleted, if the field config changes to link to\na different table, or if the field config changes to link to a type\nother than MULTIPLE_RECORD_LINKS. Once `isValid` has become false, it\nwill never become true again. Many fields will throw on attempting to\naccess them, and watches will no longer fire."},"getSignature":[{"id":1366,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Is the query result currently valid? This value always starts as 'true',\nbut can become false if the record from which this result was created is\ndeleted, if the field is deleted, if the field config changes to link to\na different table, or if the field config changes to link to a type\nother than MULTIPLE_RECORD_LINKS. Once `isValid` has become false, it\nwill never become true again. Many fields will throw on attempting to\naccess them, and watches will no longer fire."},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/linked_records_query_result.ts","line":118,"character":15}]},{"id":1369,"name":"recordIds","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"Ordered array of all the linked record ids. Watchable."},"getSignature":[{"id":1370,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Ordered array of all the linked record ids. Watchable."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"string"}]},"overwrites":{"type":"reference","name":"RecordQueryResult.recordIds","id":3578}}],"sources":[{"fileName":"src/models/linked_records_query_result.ts","line":135,"character":17}],"overwrites":{"type":"reference","name":"RecordQueryResult.recordIds","id":3578}},{"id":1371,"name":"records","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"Ordered array of all the linked records. Watchable."},"getSignature":[{"id":1372,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Ordered array of all the linked records. Watchable."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]},"overwrites":{"type":"reference","name":"RecordQueryResult.records","id":3609}}],"sources":[{"fileName":"src/models/linked_records_query_result.ts","line":149,"character":15}],"overwrites":{"type":"reference","name":"RecordQueryResult.records","id":3609}},{"id":1491,"name":"getRecordById","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"signatures":[{"id":1492,"name":"getRecordById","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"parameters":[{"id":1493,"name":"recordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the ID of the {@link Record} you want\n"},"type":{"type":"reference","name":"RecordId","id":103}}],"type":{"type":"reference","name":"Record","id":1568},"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordById","id":3614}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":531,"character":17}],"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordById","id":3614}},{"id":1488,"name":"getRecordByIdIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"signatures":[{"id":1489,"name":"getRecordByIdIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"parameters":[{"id":1490,"name":"recordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the ID of the {@link Record} you want\n"},"type":{"type":"reference","name":"RecordId","id":103}}],"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"intrinsic","name":"null"}]},"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordByIdIfExists","id":3611}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":516,"character":25}],"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordByIdIfExists","id":3611}},{"id":1500,"name":"getRecordColor","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."},"signatures":[{"id":1501,"name":"getRecordColor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."},"parameters":[{"id":1502,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the record or record ID you want the color of.\n"},"type":{"type":"union","types":[{"type":"reference","name":"RecordId","id":103},{"type":"reference","name":"Record","id":1568}]}}],"type":{"type":"union","types":[{"type":"reference","name":"Color","id":90},{"type":"intrinsic","name":"null"}]},"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordColor","id":3623}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":567,"character":18}],"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordColor","id":3623}},{"id":1497,"name":"hasRecord","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."},"signatures":[{"id":1498,"name":"hasRecord","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."},"parameters":[{"id":1499,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the record or record id to check the presence of\n"},"type":{"type":"union","types":[{"type":"reference","name":"RecordId","id":103},{"type":"reference","name":"Record","id":1568}]}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"RecordQueryResult.hasRecord","id":3620}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":554,"character":13}],"inheritedFrom":{"type":"reference","name":"RecordQueryResult.hasRecord","id":3620}},{"id":1385,"name":"loadDataAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"signatures":[{"id":1386,"name":"loadDataAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]},"overwrites":{"type":"reference","name":"AbstractModelWithAsyncData.loadDataAsync","id":1039}}],"sources":[{"fileName":"src/models/linked_records_query_result.ts","line":219,"character":23}],"overwrites":{"type":"reference","name":"AbstractModelWithAsyncData.loadDataAsync","id":1039}},{"id":1542,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":1543,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":1527,"name":"unloadData","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{},"signatures":[{"id":1528,"name":"unloadData","kind":4096,"kindString":"Call signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unloadData","id":1041}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":169,"character":14}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unloadData","id":1041}},{"id":1380,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"signatures":[{"id":1381,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"parameters":[{"id":1382,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]}]}},{"id":1383,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":1384,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]},"overwrites":{"type":"reference","name":"RecordQueryResult.unwatch","id":3633}}],"sources":[{"fileName":"src/models/linked_records_query_result.ts","line":193,"character":11}],"overwrites":{"type":"reference","name":"RecordQueryResult.unwatch","id":3633}},{"id":1375,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"signatures":[{"id":1376,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"parameters":[{"id":1377,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]}]}},{"id":1378,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":1379,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]},"overwrites":{"type":"reference","name":"RecordQueryResult.watch","id":3628}}],"sources":[{"fileName":"src/models/linked_records_query_result.ts","line":169,"character":9}],"overwrites":{"type":"reference","name":"RecordQueryResult.watch","id":3628}}],"groups":[{"title":"Accessors","kind":262144,"children":[1373,1536,1525,1523,1365,1369,1371]},{"title":"Methods","kind":2048,"children":[1491,1488,1500,1497,1385,1542,1527,1380,1375]}],"sources":[{"fileName":"src/models/linked_records_query_result.ts","line":38,"character":30}],"extendedTypes":[{"type":"reference","name":"RecordQueryResult","id":3575,"typeArguments":[{"type":"reference","name":"LinkedRecordsQueryResultData","id":1335}]}]},{"id":3575,"name":"RecordQueryResult","kind":128,"kindString":"Class","flags":{"isExported":true,"isAbstract":true},"comment":{"shortText":"A RecordQueryResult represents a set of records. It's a little bit like a one-off View in Airtable: it\ncontains a bunch of records, filtered to a useful subset of the records in the table. Those\nrecords can be sorted according to your specification, and they can be colored by a select field\nor using the color from a view. Just like a view, you can either have all the fields in a table\navailable, or you can just ask for the fields that are relevant to you. There are two types of\nQueryResult:","text":"- {@link TableOrViewQueryResult} is the most common, and is a query result filtered to all the\n  records in a specific {@link Table} or {@link View}. You can get one of these with\n  `table.selectRecords()` or `view.selectRecords()`.\n- {@link LinkedRecordsQueryResult} is a query result of all the records in a particular\n  [linked record cell](https://support.airtable.com/hc/en-us/articles/206452848-Linked-record-fields).\n  You can get one of these with `record.selectLinkedRecordsFromCell(someField)`.\n\nOnce you've got a query result, you need to load it before you can start working with it -\napps don't load record data by default. We recommend using {@link useRecords},\n{@link useRecordIds}, {@link useRecordById} or {@link useLoadable} to handle this.\n\nIf you're not using a query result in a React component, you can manually load the data and\nunload it when you're finished:\n\n```js\nasync function fetchRecordsAndDoSomethingAsync(myTable) {\n    // query for all the records in \"myTable\"\n    const queryResult = myTable.selectRecords();\n\n    // load the data in the query result:\n    await queryResult.loadDataAsync();\n\n    // work with the data in the query result\n    doSomething(queryResult);\n\n    // when you're done, unload the data:\n    queryResult.unloadData();\n}\n```\n\nWhilst loaded, a query result will automatically keep up to date with what's in Airtable:\nrecords will get added or removed, the order will change, cell values will be updated, etc.\nAgain, if you're writing a React component then our hooks will look after that for you. If not,\nyou can get notified of these changes with `.watch()`.\n\nWhen calling a `.select*` method, you can pass in a number of options to control the sort order,\nfields loaded and coloring mode of records: see {@link RecordQueryResultOpts} for examples.\n","tags":[{"tag":"docspath","text":"models/query results/RecordQueryResult\n"}]},"typeParameter":[{"id":3576,"name":"DataType","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":3582,"name":"fields","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The fields that were used to create this QueryResult.\nNull if fields were not specified, which means the QueryResult\nwill load all fields in the table."},"getSignature":[{"id":3583,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The fields that were used to create this QueryResult.\nNull if fields were not specified, which means the QueryResult\nwill load all fields in the table."},"type":{"type":"union","types":[{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Field","id":1724}]},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":358,"character":23}]},{"id":3675,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":3676,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":3658,"name":"isDataLoaded","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{},"getSignature":[{"id":3659,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDataLoaded","id":1031}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":111,"character":20}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDataLoaded","id":1031}},{"id":3656,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"getSignature":[{"id":3657,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDeleted","id":1029}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":104,"character":17}],"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDeleted","id":1029}},{"id":3578,"name":"recordIds","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The record IDs in this QueryResult.\nThrows if data is not loaded yet.\nCan be watched."},"getSignature":[{"id":3579,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The record IDs in this QueryResult.\nThrows if data is not loaded yet.\nCan be watched."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"RecordId","id":103}]}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":345,"character":26}]},{"id":3609,"name":"records","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."},"getSignature":[{"id":3610,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":502,"character":15}]},{"id":3614,"name":"getRecordById","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"signatures":[{"id":3615,"name":"getRecordById","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"parameters":[{"id":3616,"name":"recordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the ID of the {@link Record} you want\n"},"type":{"type":"reference","name":"RecordId","id":103}}],"type":{"type":"reference","name":"Record","id":1568}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":531,"character":17}]},{"id":3611,"name":"getRecordByIdIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"signatures":[{"id":3612,"name":"getRecordByIdIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"parameters":[{"id":3613,"name":"recordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the ID of the {@link Record} you want\n"},"type":{"type":"reference","name":"RecordId","id":103}}],"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":516,"character":25}]},{"id":3623,"name":"getRecordColor","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."},"signatures":[{"id":3624,"name":"getRecordColor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."},"parameters":[{"id":3625,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the record or record ID you want the color of.\n"},"type":{"type":"union","types":[{"type":"reference","name":"RecordId","id":103},{"type":"reference","name":"Record","id":1568}]}}],"type":{"type":"union","types":[{"type":"reference","name":"Color","id":90},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":567,"character":18}]},{"id":3620,"name":"hasRecord","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."},"signatures":[{"id":3621,"name":"hasRecord","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."},"parameters":[{"id":3622,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the record or record id to check the presence of\n"},"type":{"type":"union","types":[{"type":"reference","name":"RecordId","id":103},{"type":"reference","name":"Record","id":1568}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":554,"character":13}]},{"id":3664,"name":"loadDataAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.","text":"Returns a Promise that will resolve once the data is loaded.\n"},"signatures":[{"id":3665,"name":"loadDataAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.","text":"Returns a Promise that will resolve once the data is loaded.\n"},"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.loadDataAsync","id":1039}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":133,"character":23}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.loadDataAsync","id":1039}},{"id":3683,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":3684,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":3666,"name":"unloadData","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{},"signatures":[{"id":3667,"name":"unloadData","kind":4096,"kindString":"Call signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unloadData","id":1041}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":169,"character":14}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unloadData","id":1041}},{"id":3633,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nUnwatching a key that needs to load data asynchronously will automatically\ncause the data to be unloaded.\n\nReturns the array of keys that were unwatched\n"},"signatures":[{"id":3634,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nUnwatching a key that needs to load data asynchronously will automatically\ncause the data to be unloaded.\n\nReturns the array of keys that were unwatched\n"},"parameters":[{"id":3635,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]}]}},{"id":3636,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":3637,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]},"overwrites":{"type":"reference","name":"AbstractModelWithAsyncData.unwatch","id":1024}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":656,"character":11}],"overwrites":{"type":"reference","name":"AbstractModelWithAsyncData.unwatch","id":1024}},{"id":3628,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the query result.","text":"Watchable keys are:\n- `'records'`\n- `'recordIds'`\n- `'cellValues'`\n- `'recordColors'`\n- `'isDataLoaded'`\n- `'cellValuesInField:' + someFieldId`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n\nWatching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the `callback`\nwill be called.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":3629,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the query result.","text":"Watchable keys are:\n- `'records'`\n- `'recordIds'`\n- `'cellValues'`\n- `'recordColors'`\n- `'isDataLoaded'`\n- `'cellValuesInField:' + someFieldId`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n\nWatching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the `callback`\nwill be called.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":3630,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]}]}},{"id":3631,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":3632,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]},"overwrites":{"type":"reference","name":"AbstractModelWithAsyncData.watch","id":1019}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":628,"character":9}],"overwrites":{"type":"reference","name":"AbstractModelWithAsyncData.watch","id":1019}}],"groups":[{"title":"Accessors","kind":262144,"children":[3582,3675,3658,3656,3578,3609]},{"title":"Methods","kind":2048,"children":[3614,3611,3623,3620,3664,3683,3666,3633,3628]}],"sources":[{"fileName":"src/models/record_query_result.ts","line":332,"character":32}],"extendedTypes":[{"type":"reference","name":"AbstractModelWithAsyncData","id":1003,"typeArguments":[{"type":"typeParameter","name":"DataType"},{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]}],"extendedBy":[{"type":"reference","name":"LinkedRecordsQueryResult","id":1336},{"type":"reference","name":"TableOrViewQueryResult","id":2142}]},{"id":2142,"name":"TableOrViewQueryResult","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Represents a set of records directly from a view or table. See {@link RecordQueryResult} for main\ndocumentation.","text":"Do not instantiate. You can get instances of this class by calling\n`table.selectRecords` or `view.selectRecords`.\n","tags":[{"tag":"docspath","text":"models/query results/TableOrViewQueryResult\n"}]},"children":[{"id":2192,"name":"fields","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The fields that were used to create this RecordQueryResult.\nNull if fields were not specified, which means the RecordQueryResult\nwill load all fields in the table."},"getSignature":[{"id":2193,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The fields that were used to create this RecordQueryResult.\nNull if fields were not specified, which means the RecordQueryResult\nwill load all fields in the table."},"type":{"type":"union","types":[{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Field","id":1724}]},{"type":"intrinsic","name":"null"}]},"overwrites":{"type":"reference","name":"RecordQueryResult.fields","id":3582}}],"sources":[{"fileName":"src/models/table_or_view_query_result.ts","line":270,"character":14}],"overwrites":{"type":"reference","name":"RecordQueryResult.fields","id":3582}},{"id":2377,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":2378,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":2368,"name":"isDataLoaded","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{},"getSignature":[{"id":2369,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDataLoaded","id":1031}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":111,"character":20}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDataLoaded","id":1031}},{"id":2366,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"getSignature":[{"id":2367,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDeleted","id":1029}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":104,"character":17}],"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDeleted","id":1029}},{"id":2181,"name":"recordIds","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The record IDs in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."},"getSignature":[{"id":2182,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The record IDs in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"string"}]},"overwrites":{"type":"reference","name":"RecordQueryResult.recordIds","id":3578}}],"sources":[{"fileName":"src/models/table_or_view_query_result.ts","line":209,"character":17}],"overwrites":{"type":"reference","name":"RecordQueryResult.recordIds","id":3578}},{"id":2329,"name":"records","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."},"getSignature":[{"id":2330,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]},"inheritedFrom":{"type":"reference","name":"RecordQueryResult.records","id":3609}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":502,"character":15}],"inheritedFrom":{"type":"reference","name":"RecordQueryResult.records","id":3609}},{"id":2334,"name":"getRecordById","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"signatures":[{"id":2335,"name":"getRecordById","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"parameters":[{"id":2336,"name":"recordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the ID of the {@link Record} you want\n"},"type":{"type":"reference","name":"RecordId","id":103}}],"type":{"type":"reference","name":"Record","id":1568},"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordById","id":3614}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":531,"character":17}],"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordById","id":3614}},{"id":2331,"name":"getRecordByIdIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"signatures":[{"id":2332,"name":"getRecordByIdIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."},"parameters":[{"id":2333,"name":"recordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the ID of the {@link Record} you want\n"},"type":{"type":"reference","name":"RecordId","id":103}}],"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"intrinsic","name":"null"}]},"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordByIdIfExists","id":3611}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":516,"character":25}],"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordByIdIfExists","id":3611}},{"id":2343,"name":"getRecordColor","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."},"signatures":[{"id":2344,"name":"getRecordColor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."},"parameters":[{"id":2345,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the record or record ID you want the color of.\n"},"type":{"type":"union","types":[{"type":"reference","name":"RecordId","id":103},{"type":"reference","name":"Record","id":1568}]}}],"type":{"type":"union","types":[{"type":"reference","name":"Color","id":90},{"type":"intrinsic","name":"null"}]},"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordColor","id":3623}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":567,"character":18}],"inheritedFrom":{"type":"reference","name":"RecordQueryResult.getRecordColor","id":3623}},{"id":2340,"name":"hasRecord","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."},"signatures":[{"id":2341,"name":"hasRecord","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."},"parameters":[{"id":2342,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the record or record id to check the presence of\n"},"type":{"type":"union","types":[{"type":"reference","name":"RecordId","id":103},{"type":"reference","name":"Record","id":1568}]}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"RecordQueryResult.hasRecord","id":3620}}],"sources":[{"fileName":"src/models/record_query_result.ts","line":554,"character":13}],"inheritedFrom":{"type":"reference","name":"RecordQueryResult.hasRecord","id":3620}},{"id":2224,"name":"loadDataAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"signatures":[{"id":2225,"name":"loadDataAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]},"overwrites":{"type":"reference","name":"AbstractModelWithAsyncData.loadDataAsync","id":1039}}],"sources":[{"fileName":"src/models/table_or_view_query_result.ts","line":440,"character":23}],"overwrites":{"type":"reference","name":"AbstractModelWithAsyncData.loadDataAsync","id":1039}},{"id":2381,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":2382,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":2230,"name":"unloadData","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"signatures":[{"id":2231,"name":"unloadData","kind":4096,"kindString":"Call signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","name":"AbstractModelWithAsyncData.unloadData","id":1041}}],"sources":[{"fileName":"src/models/table_or_view_query_result.ts","line":562,"character":14}],"overwrites":{"type":"reference","name":"AbstractModelWithAsyncData.unloadData","id":1041}},{"id":2219,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"signatures":[{"id":2220,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"parameters":[{"id":2221,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]}]}},{"id":2222,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":2223,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]},"overwrites":{"type":"reference","name":"RecordQueryResult.unwatch","id":3633}}],"sources":[{"fileName":"src/models/table_or_view_query_result.ts","line":405,"character":11}],"overwrites":{"type":"reference","name":"RecordQueryResult.unwatch","id":3633}},{"id":2214,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"signatures":[{"id":2215,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"parameters":[{"id":2216,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]}]}},{"id":2217,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":2218,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableRecordQueryResultKey","id":3708}]},"overwrites":{"type":"reference","name":"RecordQueryResult.watch","id":3628}}],"sources":[{"fileName":"src/models/table_or_view_query_result.ts","line":358,"character":9}],"overwrites":{"type":"reference","name":"RecordQueryResult.watch","id":3628}}],"groups":[{"title":"Accessors","kind":262144,"children":[2192,2377,2368,2366,2181,2329]},{"title":"Methods","kind":2048,"children":[2334,2331,2343,2340,2224,2381,2230,2219,2214]}],"sources":[{"fileName":"src/models/table_or_view_query_result.ts","line":48,"character":28}],"extendedTypes":[{"type":"reference","name":"RecordQueryResult","id":3575,"typeArguments":[{"type":"reference","name":"TableOrViewQueryResultData"}]}]},{"id":1335,"name":"LinkedRecordsQueryResultData","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"internal"},"sources":[{"fileName":"src/models/linked_records_query_result.ts","line":27,"character":38}]},{"id":3563,"name":"RecordQueryResultOpts","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Used to control what data is loaded in a {@link RecordQueryResult}. Used when creating a\nquery result using `table/view.selectRecords()` and in convenience hooks {@link useRecords}.","text":"## sorts\nPass an array of sorts to control the order of records. The first sort in the array has the\nhighest priority. If you don't specify sorts, the result will use the inherent order of the\nsource model: the same order you'd see in the main UI for views and linked record fields, and\nan arbitrary (but stable) order for tables.\n\nRecord creation time is used as a tiebreaker: pass an empty array to sort by creation time.\n\n```js\nconst opts = {\n    sorts: [\n        // sort by someField in ascending order...\n        {field: someField},\n        // then by someOtherField in descending order\n        {field: someOtherField, direction: 'desc'},\n    ]\n};\nconst records = useRecords(table, opts);\nconst queryResult = table.selectRecords(opts);\n```\n\n## fields\nGenerally, it's a good idea to load as little data into your app as possible - Airtable bases\ncan get pretty big, and we have to keep all that information in memory and up to date if you ask\nfor it. The fields option lets you make sure that only data relevant to you is loaded.\n\nYou can specify fields with a {@link Field}, by ID, or by name:\n```js\nconst opts = {\n    fields: [\n        // we want to only load fieldA:\n        fieldA,\n        // the field with this id:\n        'fldXXXXXXXXXXXXXX',\n        // and the field named 'Rating':\n        'Rating',\n    ],\n};\nconst records = useRecords(table, opts);\nconst queryResult = table.selectRecords(opts);\n```\n\n## recordColorMode\nJust like a view in Airtable, you can control the colors of records in a field. There are three\nsupported record color modes: none, by a view, and by a select field.\n\n```js\nimport {recordColoring} from '@airtable/blocks/models';\n// No record coloring:\nconst opts = {\n    recordColorMode: recordColoring.modes.none(),\n};\n\n// Color according to the rules of a view:\nconst opts = {\n    recordColorMode: recordColoring.modes.byView(someView),\n};\n\n// Color by a single select field:\nconst opts = {\n    recordColorMode: recordColoring.modes.bySelectField(someSelectField),\n});\n```\n\nYou can access view coloring information directly from a {@link RecordQueryResult} or a\n{@link Record}, but you can only directly access single select coloring from a RecordQueryResult:\n\n```\nconst queryResult = table.selectRecords(opts);\nconst records = useRecords(table, opts);\n\n// Returns based on opts coloring mode\nqueryResult.getRecordColor(recordId);\n\n// Returns based on view\n// Will throw if you did not pass recordColoring.modes.byView(view) in opts\nrecords[0].getColorInView(view);\n```\n\nUse `record.getCellValue(singleSelectField).color` to access the color of a single select field\nfor a record.\n\nBy default, views will have whichever coloring is set up in Airtable and tables won't have any\nrecord coloring:\n\n```js\n// these two are the same:\nsomeView.selectRecords();\nsomeView.selectRecords({\n    recordColorMode: recordColoring.modes.byView(someView),\n});\n\n// as are these two:\nsomeTable.selectRecords();\nsomeTable.selectRecords({\n    recordColorMode: recordColoring.modes.none(),\n});\n```\n\n"},"children":[{"id":3565,"name":"fields","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The fields (or field names or field ids) to load. Falsey values will be removed."},"sources":[{"fileName":"src/models/record_query_result.ts","line":200,"character":10}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"void"},{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"false"}]}]}},{"id":3566,"name":"recordColorMode","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"How records in this QueryResult should be colored."},"sources":[{"fileName":"src/models/record_query_result.ts","line":202,"character":19}],"type":{"type":"union","types":[{"type":"intrinsic","name":"null"},{"type":"reference","name":"RecordColorMode","id":1843}]}},{"id":3564,"name":"sorts","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The order in which to sort the query result"},"sources":[{"fileName":"src/models/record_query_result.ts","line":198,"character":9}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"SortConfig","id":3552}]}}],"groups":[{"title":"Properties","kind":1024,"children":[3565,3566,3564]}],"sources":[{"fileName":"src/models/record_query_result.ts","line":196,"character":38}]},{"id":3552,"name":"SortConfig","kind":256,"kindString":"Interface","flags":{},"comment":{},"children":[{"id":3554,"name":"direction","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The order to sort in. Defaults to asc."},"sources":[{"fileName":"src/models/record_query_result.ts","line":61,"character":13}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"asc"},{"type":"stringLiteral","value":"desc"}]}},{"id":3553,"name":"field","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A field, field id, or field name."},"sources":[{"fileName":"src/models/record_query_result.ts","line":59,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[3554,3553]}],"sources":[{"fileName":"src/models/record_query_result.ts","line":57,"character":20}]},{"id":3710,"name":"RecordIdQueryResultOpts","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A subset of {@link RecordQueryResultOpts} used in {@link useRecordIds} that omits fields and\nrecordColorMode, as record cell values and color are not accessible via this hook.","text":"See RecordQueryResultOpts for full details and examples.\n\n```js\nconst opts = {\n    sorts: [\n        // sort by someField in ascending order...\n        {field: someField},\n        // then by someOtherField in descending order\n        {field: someOtherField, direction: 'desc'},\n    ]\n};\nconst recordIds = useRecordIds(table, opts);\n"},"sources":[{"fileName":"src/models/record_query_result.ts","line":237,"character":35}],"type":{"type":"reference","name":"Pick","typeArguments":[{"type":"reference","name":"RecordQueryResultOpts","id":3563},{"type":"stringLiteral","value":"sorts"}]}},{"id":3709,"name":"SingleRecordQueryResultOpts","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A subset of {@link RecordQueryResultOpts} used in {@link useRecordById} that omits sorts, as\nthere is only a single record.","text":"See RecordQueryResultOpts for full details and examples.\n\n```js\nconst opts = {\n    fields: ['My field'],\n    recordColorMode: recordColoring.modes.byView(view),\n};\nconst record = useRecordById(table, recordId, opts);\n"},"sources":[{"fileName":"src/models/record_query_result.ts","line":218,"character":39}],"type":{"type":"reference","name":"Pick","typeArguments":[{"type":"reference","name":"RecordQueryResultOpts","id":3563},{"type":"union","types":[{"type":"stringLiteral","value":"fields"},{"type":"stringLiteral","value":"recordColorMode"}]}]}},{"id":3708,"name":"WatchableRecordQueryResultKey","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A key in {@link RecordQueryResult} that can be watched\n- `records`\n- `recordIds`\n- `cellValues`\n- `recordColors`\n- `isDataLoaded`\n- `cellValuesInField:{FIELD_ID}`"},"sources":[{"fileName":"src/models/record_query_result.ts","line":52,"character":41}],"type":{"type":"union","types":[{"type":"union","types":[{"type":"stringLiteral","value":"groups"},{"type":"stringLiteral","value":"groupLevels"},{"type":"stringLiteral","value":"recordColors"},{"type":"stringLiteral","value":"records"},{"type":"stringLiteral","value":"recordIds"},{"type":"stringLiteral","value":"cellValues"},{"type":"stringLiteral","value":"isDataLoaded"}]},{"type":"intrinsic","name":"string"}]}}],"groups":[{"title":"Classes","kind":128,"children":[1336,3575,2142]},{"title":"Interfaces","kind":256,"children":[1335,3563,3552]},{"title":"Type aliases","kind":4194304,"children":[3710,3709,3708]}],"sources":[{"fileName":"src/models/linked_records_query_result.ts","line":1,"character":0}]},{"id":2931,"name":"@airtable/blocks/models: Session","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/models/session.ts","comment":{},"children":[{"id":2936,"name":"Session","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Model class representing the current user's session.","tags":[{"tag":"example","text":"\n```js\nimport {useSession} from '@airtable/blocks/ui';\n\nfunction Username() {\n    const session = useSession();\n\n    if (session.currentUser !== null) {\n        return <span>The current user's name is {session.currentUser.name}</span>;\n    } else {\n        return <span>This app is being viewed in a public share</span>;\n    }\n}\n```"},{"tag":"docspath","text":"models/Session\n"}]},"children":[{"id":2948,"name":"currentUser","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The current user, or `null` if the app is running in a publicly shared base.","tags":[{"tag":"example","text":"\n```js\nimport {useSession} from '@airtable/blocks/ui';\n\nfunction CurrentUser() {\n    const session = useSession();\n\n    if (!session.currentUser) {\n        return <div>This app is being used in a public share.</div>;\n    }\n\n    return <ul>\n        <li>ID: {session.currentUser.id}</li>\n        <li>E-mail: {session.currentUser.email}</li>\n        <li>Name: {session.currentUser.name}</li>\n    </ul>;\n}\n```\n"}]},"getSignature":[{"id":2949,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The current user, or `null` if the app is running in a publicly shared base.","tags":[{"tag":"example","text":"\n```js\nimport {useSession} from '@airtable/blocks/ui';\n\nfunction CurrentUser() {\n    const session = useSession();\n\n    if (!session.currentUser) {\n        return <div>This app is being used in a public share.</div>;\n    }\n\n    return <ul>\n        <li>ID: {session.currentUser.id}</li>\n        <li>E-mail: {session.currentUser.email}</li>\n        <li>Name: {session.currentUser.name}</li>\n    </ul>;\n}\n```\n"}]},"type":{"type":"union","types":[{"type":"reference","name":"CollaboratorData","id":375},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/session.ts","line":115,"character":19}]},{"id":2977,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":2978,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":2981,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"getSignature":[{"id":2982,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":81,"character":17}],"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}},{"id":2954,"name":"checkPermissionsForCreateRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to create any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForCreateRecords}.","text":"Returns `{hasPermission: true}` if the current user can create records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nimport {useSession} from '@airtable/blocks/ui';\n\nfunction CreateButton({onClick}) {\n    const session = useSession();\n    const updateRecordsCheckResult = session.checkPermissionsForCreateRecords();\n    const deniedReason = updateRecordsCheckResult.hasPermission\n        ? <span>{updateRecordsCheckResult.reasonDisplayString}</span>\n        : null;\n\n    return <div>\n        {deniedReason}\n        <button onClick={onClick} disabled={!!deniedReason}>\n            Create\n        </button>\n    </div>;\n}\n"}]},"signatures":[{"id":2955,"name":"checkPermissionsForCreateRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to create any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForCreateRecords}.","text":"Returns `{hasPermission: true}` if the current user can create records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nimport {useSession} from '@airtable/blocks/ui';\n\nfunction CreateButton({onClick}) {\n    const session = useSession();\n    const updateRecordsCheckResult = session.checkPermissionsForCreateRecords();\n    const deniedReason = updateRecordsCheckResult.hasPermission\n        ? <span>{updateRecordsCheckResult.reasonDisplayString}</span>\n        : null;\n\n    return <div>\n        {deniedReason}\n        <button onClick={onClick} disabled={!!deniedReason}>\n            Create\n        </button>\n    </div>;\n}\n"}]},"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/session.ts","line":192,"character":36}]},{"id":2958,"name":"checkPermissionsForDeleteRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to delete any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForDeleteRecords}.","text":"Returns `{hasPermission: true}` if the current user can delete records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nimport {useSession} from '@airtable/blocks/ui';\n\nfunction DeleteButton({onClick}) {\n    const session = useSession();\n    const updateRecordsCheckResult = session.checkPermissionsForDeleteRecords();\n    const deniedReason = updateRecordsCheckResult.hasPermission\n        ? <span>{updateRecordsCheckResult.reasonDisplayString}</span>\n        : null;\n\n    return <div>\n        {deniedReason}\n        <button onClick={onClick} disabled={!!deniedReason}>\n            Delete\n        </button>\n    </div>;\n"}]},"signatures":[{"id":2959,"name":"checkPermissionsForDeleteRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to delete any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForDeleteRecords}.","text":"Returns `{hasPermission: true}` if the current user can delete records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nimport {useSession} from '@airtable/blocks/ui';\n\nfunction DeleteButton({onClick}) {\n    const session = useSession();\n    const updateRecordsCheckResult = session.checkPermissionsForDeleteRecords();\n    const deniedReason = updateRecordsCheckResult.hasPermission\n        ? <span>{updateRecordsCheckResult.reasonDisplayString}</span>\n        : null;\n\n    return <div>\n        {deniedReason}\n        <button onClick={onClick} disabled={!!deniedReason}>\n            Delete\n        </button>\n    </div>;\n"}]},"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/session.ts","line":232,"character":36}]},{"id":2950,"name":"checkPermissionsForUpdateRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to update any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForUpdateRecords}.","text":"Returns `{hasPermission: true}` if the current user can update records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may\nbe used to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nimport {useSession} from '@airtable/blocks/ui';\n\nfunction UpdateButton({onClick}) {\n    const session = useSession();\n    const updateRecordsCheckResult = session.checkPermissionsForUpdateRecords();\n    const deniedReason = updateRecordsCheckResult.hasPermission\n        ? <span>{updateRecordsCheckResult.reasonDisplayString}</span>\n        : null;\n\n    return <div>\n        {deniedReason}\n        <button onClick={onClick} disabled={!!deniedReason}>\n            Update\n        </button>\n    </div>;\n}\n"}]},"signatures":[{"id":2951,"name":"checkPermissionsForUpdateRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to update any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForUpdateRecords}.","text":"Returns `{hasPermission: true}` if the current user can update records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may\nbe used to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nimport {useSession} from '@airtable/blocks/ui';\n\nfunction UpdateButton({onClick}) {\n    const session = useSession();\n    const updateRecordsCheckResult = session.checkPermissionsForUpdateRecords();\n    const deniedReason = updateRecordsCheckResult.hasPermission\n        ? <span>{updateRecordsCheckResult.reasonDisplayString}</span>\n        : null;\n\n    return <div>\n        {deniedReason}\n        <button onClick={onClick} disabled={!!deniedReason}>\n            Update\n        </button>\n    </div>;\n}\n"}]},"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/session.ts","line":151,"character":36}]},{"id":2956,"name":"hasPermissionToCreateRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `session.checkPermissionsForCreateRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToCreateRecords}."},"signatures":[{"id":2957,"name":"hasPermissionToCreateRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `session.checkPermissionsForCreateRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToCreateRecords}."},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/session.ts","line":203,"character":32}]},{"id":2960,"name":"hasPermissionToDeleteRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `session.checkPermissionsForDeleteRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToDeleteRecords}."},"signatures":[{"id":2961,"name":"hasPermissionToDeleteRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `session.checkPermissionsForDeleteRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToDeleteRecords}."},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/session.ts","line":243,"character":32}]},{"id":2952,"name":"hasPermissionToUpdateRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `session.checkPermissionsForUpdateRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToUpdateRecords}."},"signatures":[{"id":2953,"name":"hasPermissionToUpdateRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `session.checkPermissionsForUpdateRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToUpdateRecords}."},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/session.ts","line":162,"character":32}]},{"id":2985,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":2986,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":3013,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"signatures":[{"id":3014,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"parameters":[{"id":3015,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableSessionKey","id":3029},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableSessionKey","id":3029}]}]}},{"id":3016,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reflection","declaration":{"id":3017,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":3018,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3019,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":3020,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableSessionKey","id":3029}},{"id":3021,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":113,"character":17}]}}},{"id":3022,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableSessionKey","id":3029}]},"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/watchable.ts","line":111,"character":11}],"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":3003,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":3004,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":3005,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableSessionKey","id":3029},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableSessionKey","id":3029}]}]}},{"id":3006,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reflection","declaration":{"id":3007,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":3008,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3009,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":3010,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableSessionKey","id":3029}},{"id":3011,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":66,"character":17}]}}},{"id":3012,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableSessionKey","id":3029}]},"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/watchable.ts","line":64,"character":9}],"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Accessors","kind":262144,"children":[2948,2977,2981]},{"title":"Methods","kind":2048,"children":[2954,2958,2950,2956,2960,2952,2985,3013,3003]}],"sources":[{"fileName":"src/models/session.ts","line":53,"character":13}],"extendedTypes":[{"type":"reference","name":"AbstractModel","id":890,"typeArguments":[{"type":"reference","name":"SessionData"},{"type":"reference","name":"WatchableSessionKey","id":3029}]}]},{"id":3029,"name":"WatchableSessionKey","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Watchable keys in {@link Session}.\n- `currentUser`\n- `permissionLevel`"},"sources":[{"fileName":"src/models/session.ts","line":32,"character":24}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"permissionLevel"},{"type":"stringLiteral","value":"currentUser"}]}}],"groups":[{"title":"Classes","kind":128,"children":[2936]},{"title":"Type aliases","kind":4194304,"children":[3029]}],"sources":[{"fileName":"src/models/session.ts","line":1,"character":0}]},{"id":346,"name":"@airtable/blocks/models: Table","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/types/table.ts","comment":{},"children":[{"id":2507,"name":"Table","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Model class representing a table. Every {@link Base} has one or more tables.","tags":[{"tag":"docspath","text":"models/Table\n"}]},"children":[{"id":2539,"name":"description","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The description of the table, if it has one. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myTable.description);\n// => 'This is my table'\n```\n"}]},"getSignature":[{"id":2540,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The description of the table, if it has one. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myTable.description);\n// => 'This is my table'\n```\n"}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/table.ts","line":119,"character":19}]},{"id":2545,"name":"fields","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The fields in this table. The order is arbitrary, since fields are\nonly ordered in the context of a specific view.","text":"Can be watched to know when fields are created or deleted.\n","tags":[{"tag":"example","text":"\n```js\nconsole.log(`This table has ${myTable.fields.length} fields`);\n```\n"}]},"getSignature":[{"id":2546,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The fields in this table. The order is arbitrary, since fields are\nonly ordered in the context of a specific view.","text":"Can be watched to know when fields are created or deleted.\n","tags":[{"tag":"example","text":"\n```js\nconsole.log(`This table has ${myTable.fields.length} fields`);\n```\n"}]},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Field","id":1724}]}}],"sources":[{"fileName":"src/models/table.ts","line":159,"character":14}]},{"id":2710,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":2711,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":2714,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"getSignature":[{"id":2715,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":81,"character":17}],"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}},{"id":2537,"name":"name","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The name of the table. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myTable.name);\n// => 'Table 1'\n```\n"}]},"getSignature":[{"id":2538,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The name of the table. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myTable.name);\n// => 'Table 1'\n```\n"}]},"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/table.ts","line":107,"character":12}]},{"id":2543,"name":"primaryField","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The table's primary field. Every table has exactly one primary\nfield. The primary field of a table will not change.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myTable.primaryField.name);\n// => 'Name'\n```\n"}]},"getSignature":[{"id":2544,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The table's primary field. Every table has exactly one primary\nfield. The primary field of a table will not change.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myTable.primaryField.name);\n// => 'Name'\n```\n"}]},"type":{"type":"reference","name":"Field","id":1724}}],"sources":[{"fileName":"src/models/table.ts","line":144,"character":20}]},{"id":2541,"name":"url","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The URL for the table. You can visit this URL in the browser to be taken to the table in the Airtable UI.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myTable.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx'\n```\n"}]},"getSignature":[{"id":2542,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The URL for the table. You can visit this URL in the browser to be taken to the table in the Airtable UI.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myTable.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx'\n```\n"}]},"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/table.ts","line":131,"character":11}]},{"id":2565,"name":"views","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The views in this table. Can be watched to know when views are created,\ndeleted, or reordered.","tags":[{"tag":"example","text":"\n```js\nconsole.log(`This table has ${myTable.views.length} views`);\n```\n"}]},"getSignature":[{"id":2566,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The views in this table. Can be watched to know when views are created,\ndeleted, or reordered.","tags":[{"tag":"example","text":"\n```js\nconsole.log(`This table has ${myTable.views.length} views`);\n```\n"}]},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"View","id":2404}]}}],"sources":[{"fileName":"src/models/table.ts","line":305,"character":13}]},{"id":2678,"name":"checkPermissionsForCreateField","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Checks whether the current user has permission to create a field in this table.\n\nAccepts partial input, in the same format as {@link createFieldAsync}.\n\nReturns `{hasPermission: true}` if the current user can update the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nconst createFieldCheckResult = table.checkPermissionsForCreateField();\n\nif (!createFieldCheckResult.hasPermission) {\n    alert(createFieldCheckResult.reasonDisplayString);\n}\n```\n"}]},"signatures":[{"id":2679,"name":"checkPermissionsForCreateField","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Checks whether the current user has permission to create a field in this table.\n\nAccepts partial input, in the same format as {@link createFieldAsync}.\n\nReturns `{hasPermission: true}` if the current user can update the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nconst createFieldCheckResult = table.checkPermissionsForCreateField();\n\nif (!createFieldCheckResult.hasPermission) {\n    alert(createFieldCheckResult.reasonDisplayString);\n}\n```\n"}]},"parameters":[{"id":2680,"name":"name","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"name for the field. must be case-insensitive unique for the table"},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":2681,"name":"type","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"type for the field"},"type":{"type":"reference","name":"FieldType","id":138}},{"id":2682,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"options for the field. omit for fields without writable options\n"},"type":{"type":"union","types":[{"type":"reference","name":"FieldOptions"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/table.ts","line":1589,"character":34}]},{"id":2654,"name":"checkPermissionsForCreateRecord","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to create the specified record.","text":"Accepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can create the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can create a specific record, when you already know what\n// fields/cell values will be set for the record.\nconst createRecordCheckResult = table.checkPermissionsForCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!createRecordCheckResult.hasPermission) {\n    alert(createRecordCheckResult.reasonDisplayString);\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst checkResultWithFieldIds = table.checkPermissionsForCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating a record.)\nconst createUnknownRecordCheckResult =\n    table.checkPermissionsForCreateRecord();\n```\n"}]},"signatures":[{"id":2655,"name":"checkPermissionsForCreateRecord","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to create the specified record.","text":"Accepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can create the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can create a specific record, when you already know what\n// fields/cell values will be set for the record.\nconst createRecordCheckResult = table.checkPermissionsForCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!createRecordCheckResult.hasPermission) {\n    alert(createRecordCheckResult.reasonDisplayString);\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst checkResultWithFieldIds = table.checkPermissionsForCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating a record.)\nconst createUnknownRecordCheckResult =\n    table.checkPermissionsForCreateRecord();\n```\n"}]},"parameters":[{"id":2656,"name":"fields","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"object mapping `FieldId` or field name to value for that field."},"type":{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"union","types":[{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"void"}]}]}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/table.ts","line":1302,"character":35}]},{"id":2665,"name":"checkPermissionsForCreateRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to create the specified records.","text":"Accepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can create the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can create specific records, when you already know what\n// fields/cell values will be set for the records.\nconst createRecordsCheckResult = table.checkPermissionsForCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         },\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         },\n    },\n    {},\n]);\nif (!createRecordsCheckResult.hasPermission) {\n    alert(createRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating records.)\n// Equivalent to table.checkPermissionsForCreateRecord()\nconst createUnknownRecordCheckResult =\n    table.checkPermissionsForCreateRecords();\n```\n"}]},"signatures":[{"id":2666,"name":"checkPermissionsForCreateRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to create the specified records.","text":"Accepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can create the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can create specific records, when you already know what\n// fields/cell values will be set for the records.\nconst createRecordsCheckResult = table.checkPermissionsForCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         },\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         },\n    },\n    {},\n]);\nif (!createRecordsCheckResult.hasPermission) {\n    alert(createRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating records.)\n// Equivalent to table.checkPermissionsForCreateRecord()\nconst createUnknownRecordCheckResult =\n    table.checkPermissionsForCreateRecords();\n```\n"}]},"parameters":[{"id":2667,"name":"records","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Array of objects mapping `FieldId` or field name to value for that field."},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reflection","declaration":{"id":2668,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2669,"name":"fields","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/table.ts","line":1491,"character":27}],"type":{"type":"union","types":[{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"union","types":[{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"void"}]}]},{"type":"intrinsic","name":"void"}]}}],"groups":[{"title":"Variables","kind":32,"children":[2669]}],"sources":[{"fileName":"src/models/table.ts","line":1490,"character":32}]}}]}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/table.ts","line":1489,"character":36}]},{"id":2636,"name":"checkPermissionsForDeleteRecord","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to delete the specified record.","text":"Accepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can delete the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can delete a specific record\nconst deleteRecordCheckResult =\n    table.checkPermissionsForDeleteRecord(record);\nif (!deleteRecordCheckResult.hasPermission) {\n    alert(deleteRecordCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for\n// example, to show/hide UI controls that let you select a record to delete).\nconst deleteUnknownRecordCheckResult =\n    table.checkPermissionsForDeleteRecord();\n```\n"}]},"signatures":[{"id":2637,"name":"checkPermissionsForDeleteRecord","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to delete the specified record.","text":"Accepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can delete the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can delete a specific record\nconst deleteRecordCheckResult =\n    table.checkPermissionsForDeleteRecord(record);\nif (!deleteRecordCheckResult.hasPermission) {\n    alert(deleteRecordCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for\n// example, to show/hide UI controls that let you select a record to delete).\nconst deleteUnknownRecordCheckResult =\n    table.checkPermissionsForDeleteRecord();\n```\n"}]},"parameters":[{"id":2638,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the record to be deleted"},"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordId","id":103}]}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/table.ts","line":1057,"character":35}]},{"id":2645,"name":"checkPermissionsForDeleteRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to delete the specified records.","text":"Accepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can delete the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can delete specific records\nconst deleteRecordsCheckResult =\n    table.checkPermissionsForDeleteRecords([record1, record2]);\nif (!deleteRecordsCheckResult.hasPermission) {\n    alert(deleteRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for\n// example, to show/hide UI controls that let you select records to delete).\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst deleteUnknownRecordsCheckResult =\n    table.checkPermissionsForDeleteRecords();\n```\n"}]},"signatures":[{"id":2646,"name":"checkPermissionsForDeleteRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to delete the specified records.","text":"Accepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can delete the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can delete specific records\nconst deleteRecordsCheckResult =\n    table.checkPermissionsForDeleteRecords([record1, record2]);\nif (!deleteRecordsCheckResult.hasPermission) {\n    alert(deleteRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for\n// example, to show/hide UI controls that let you select records to delete).\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst deleteUnknownRecordsCheckResult =\n    table.checkPermissionsForDeleteRecords();\n```\n"}]},"parameters":[{"id":2647,"name":"recordsOrRecordIds","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the records to be deleted"},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordId","id":103}]}]}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/table.ts","line":1163,"character":36}]},{"id":2607,"name":"checkPermissionsForUpdateRecord","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to perform the given record update.","text":"Accepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can update the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update specific fields for a specific record.\nconst updateRecordCheckResult =\n    table.checkPermissionsForUpdateRecord(record, {\n        'Post Title': 'How to make: orange-mango pound cake',\n        'Publication Date': '2020-01-01',\n    });\nif (!updateRecordCheckResult.hasPermission) {\n    alert(updateRecordCheckResult.reasonDisplayString);\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst updateRecordCheckResultWithFieldIds =\n    table.checkPermissionsForUpdateRecord(record, {\n        [postTitleField.id]: 'Cake decorating tips & tricks',\n        [publicationDateField.id]: '2020-02-02',\n    });\n\n// Check if user could update a given record, when you don't know the\n// specific fields that will be updated yet (e.g. to check whether you should\n// allow a user to select a certain record to update).\nconst updateUnknownFieldsCheckResult =\n    table.checkPermissionsForUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the\n// specific record that will be updated yet. (for example, if the field is\n// selected by the user and you want to check if your app can write to it).\nconst updateUnknownRecordCheckResult =\n    table.checkPermissionsForUpdateRecord(undefined, {\n        'My field name': 'updated value',\n        // You can use undefined if you know you're going to update a field,\n        // but don't know the new cell value yet.\n        'Another field name': undefined,\n    });\n\n// Check if user could perform updates within the table, without knowing the\n// specific record or fields that will be updated yet (e.g., to render your\n// app in \"read only\" mode).\nconst updateUnknownRecordAndFieldsCheckResult =\n    table.checkPermissionsForUpdateRecord();\n```\n"}]},"signatures":[{"id":2608,"name":"checkPermissionsForUpdateRecord","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to perform the given record update.","text":"Accepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can update the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update specific fields for a specific record.\nconst updateRecordCheckResult =\n    table.checkPermissionsForUpdateRecord(record, {\n        'Post Title': 'How to make: orange-mango pound cake',\n        'Publication Date': '2020-01-01',\n    });\nif (!updateRecordCheckResult.hasPermission) {\n    alert(updateRecordCheckResult.reasonDisplayString);\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst updateRecordCheckResultWithFieldIds =\n    table.checkPermissionsForUpdateRecord(record, {\n        [postTitleField.id]: 'Cake decorating tips & tricks',\n        [publicationDateField.id]: '2020-02-02',\n    });\n\n// Check if user could update a given record, when you don't know the\n// specific fields that will be updated yet (e.g. to check whether you should\n// allow a user to select a certain record to update).\nconst updateUnknownFieldsCheckResult =\n    table.checkPermissionsForUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the\n// specific record that will be updated yet. (for example, if the field is\n// selected by the user and you want to check if your app can write to it).\nconst updateUnknownRecordCheckResult =\n    table.checkPermissionsForUpdateRecord(undefined, {\n        'My field name': 'updated value',\n        // You can use undefined if you know you're going to update a field,\n        // but don't know the new cell value yet.\n        'Another field name': undefined,\n    });\n\n// Check if user could perform updates within the table, without knowing the\n// specific record or fields that will be updated yet (e.g., to render your\n// app in \"read only\" mode).\nconst updateUnknownRecordAndFieldsCheckResult =\n    table.checkPermissionsForUpdateRecord();\n```\n"}]},"parameters":[{"id":2609,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the record to update"},"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordId","id":103}]}},{"id":2610,"name":"fields","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"cell values to update in that record, specified as object mapping `FieldId` or field name to value for that field."},"type":{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"union","types":[{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"void"}]}]}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/table.ts","line":688,"character":35}]},{"id":2621,"name":"checkPermissionsForUpdateRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to perform the given record updates.","text":"Accepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can update the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what\n        // fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what\n        // record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a\n            // field, but don't know the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst updateRecordsCheckResult =\n    table.checkPermissionsForUpdateRecords(recordsToUpdate);\nif (!updateRecordsCheckResult.hasPermission) {\n    alert(updateRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.checkPermissionsForUpdateRecord()\nconst updateUnknownRecordAndFieldsCheckResult =\n    table.checkPermissionsForUpdateRecords();\n```\n"}]},"signatures":[{"id":2622,"name":"checkPermissionsForUpdateRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to perform the given record updates.","text":"Accepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can update the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what\n        // fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what\n        // record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a\n            // field, but don't know the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst updateRecordsCheckResult =\n    table.checkPermissionsForUpdateRecords(recordsToUpdate);\nif (!updateRecordsCheckResult.hasPermission) {\n    alert(updateRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.checkPermissionsForUpdateRecord()\nconst updateUnknownRecordAndFieldsCheckResult =\n    table.checkPermissionsForUpdateRecords();\n```\n"}]},"parameters":[{"id":2623,"name":"records","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Array of objects containing recordId and fields/cellValues to update for that record (specified as an object mapping `FieldId` or field name to cell value)"},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reflection","declaration":{"id":2624,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2626,"name":"fields","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/table.ts","line":916,"character":27}],"type":{"type":"union","types":[{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"union","types":[{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"void"}]}]},{"type":"intrinsic","name":"void"}]}},{"id":2625,"name":"id","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/table.ts","line":915,"character":23}],"type":{"type":"union","types":[{"type":"reference","name":"RecordId","id":103},{"type":"intrinsic","name":"void"}]}}],"groups":[{"title":"Variables","kind":32,"children":[2626,2625]}],"sources":[{"fileName":"src/models/table.ts","line":914,"character":32}]}}]}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/models/table.ts","line":913,"character":36}]},{"id":2688,"name":"createFieldAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Creates a new field.\n\nSimilar to creating a field from the Airtable UI, the new field will not be visible\nin views that have other hidden fields and views that are publicly shared.\n\nThrows an error if the user does not have permission to create a field, if invalid\nname, type or options are provided, or if creating fields of this type is not supported.\n\nRefer to {@link FieldType} for supported field types, the write format for options, and\nother specifics for certain field types.\n\nThis action is asynchronous. Unlike new records, new fields are **not** created\noptimistically locally. You must `await` the returned promise before using the new\nfield in your app.\n","tags":[{"tag":"example","text":"\n```js\nasync function createNewSingleLineTextField(table, name) {\n    if (table.hasPermissionToCreateField(name, FieldType.SINGLE_LINE_TEXT)) {\n        await table.createFieldAsync(name, FieldType.SINGLE_LINE_TEXT);\n    }\n}\n\nasync function createNewCheckboxField(table, name) {\n    const options = {\n        icon: 'check',\n        color: 'greenBright',\n    };\n    if (table.hasPermissionToCreateField(name, FieldType.CHECKBOX, options)) {\n        await table.createFieldAsync(name, FieldType.CHECKBOX, options);\n    }\n}\n\nasync function createNewDateField(table, name) {\n    const options = {\n        dateFormat: {\n            name: 'iso',\n        },\n    };\n    if (table.hasPermissionToCreateField(name, FieldType.DATE, options)) {\n        await table.createFieldAsync(name, FieldType.DATE, options);\n    }\n}\n```\n"}]},"signatures":[{"id":2689,"name":"createFieldAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"Creates a new field.\n\nSimilar to creating a field from the Airtable UI, the new field will not be visible\nin views that have other hidden fields and views that are publicly shared.\n\nThrows an error if the user does not have permission to create a field, if invalid\nname, type or options are provided, or if creating fields of this type is not supported.\n\nRefer to {@link FieldType} for supported field types, the write format for options, and\nother specifics for certain field types.\n\nThis action is asynchronous. Unlike new records, new fields are **not** created\noptimistically locally. You must `await` the returned promise before using the new\nfield in your app.\n","tags":[{"tag":"example","text":"\n```js\nasync function createNewSingleLineTextField(table, name) {\n    if (table.hasPermissionToCreateField(name, FieldType.SINGLE_LINE_TEXT)) {\n        await table.createFieldAsync(name, FieldType.SINGLE_LINE_TEXT);\n    }\n}\n\nasync function createNewCheckboxField(table, name) {\n    const options = {\n        icon: 'check',\n        color: 'greenBright',\n    };\n    if (table.hasPermissionToCreateField(name, FieldType.CHECKBOX, options)) {\n        await table.createFieldAsync(name, FieldType.CHECKBOX, options);\n    }\n}\n\nasync function createNewDateField(table, name) {\n    const options = {\n        dateFormat: {\n            name: 'iso',\n        },\n    };\n    if (table.hasPermissionToCreateField(name, FieldType.DATE, options)) {\n        await table.createFieldAsync(name, FieldType.DATE, options);\n    }\n}\n```\n"}]},"parameters":[{"id":2690,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"name for the field. must be case-insensitive unique"},"type":{"type":"intrinsic","name":"string"}},{"id":2691,"name":"type","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"type for the field"},"type":{"type":"reference","name":"FieldType","id":138}},{"id":2692,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"options for the field. omit for fields without writable options\n"},"type":{"type":"union","types":[{"type":"reference","name":"FieldOptions"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"reference","name":"Field","id":1724}]}}],"sources":[{"fileName":"src/models/table.ts","line":1693,"character":26}]},{"id":2651,"name":"createRecordAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Creates a new record with the specified cell values.","text":"Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nRefer to {@link FieldType} for cell value write formats.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n\nThe returned promise will resolve to the RecordId of the new record once it is persisted.\n","tags":[{"tag":"example","text":"\n```js\nfunction createNewRecord(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        table.createRecordAsync(recordFields);\n    }\n    // You can now access the new record in your app (eg\n    // `table.selectRecords()`) but it is still being saved to Airtable\n    // servers (e.g. other users may not be able to see it yet).\n}\n\nasync function createNewRecordAsync(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        const newRecordId = await table.createRecordAsync(recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`new record with ID ${newRecordId} has been created`);\n}\n\n// Fields can be specified by name or ID\ncreateNewRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\ncreateNewRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Cell values should generally have format matching the output of\n// record.getCellValue() for the field being updated\ncreateNewRecord({\n    'Project Name': 'Cat video 2'\n    'Category (single select)': {name: 'Video'},\n    'Tags (multiple select)': [{name: 'Cats'}, {id: 'someChoiceId'}],\n    'Assets (attachment)': [{url: 'http://mywebsite.com/cats.mp4'}],\n    'Related projects (linked records)': [{id: 'someRecordId'}],\n});\n```\n"}]},"signatures":[{"id":2652,"name":"createRecordAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a new record with the specified cell values.","text":"Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nRefer to {@link FieldType} for cell value write formats.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n\nThe returned promise will resolve to the RecordId of the new record once it is persisted.\n","tags":[{"tag":"example","text":"\n```js\nfunction createNewRecord(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        table.createRecordAsync(recordFields);\n    }\n    // You can now access the new record in your app (eg\n    // `table.selectRecords()`) but it is still being saved to Airtable\n    // servers (e.g. other users may not be able to see it yet).\n}\n\nasync function createNewRecordAsync(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        const newRecordId = await table.createRecordAsync(recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`new record with ID ${newRecordId} has been created`);\n}\n\n// Fields can be specified by name or ID\ncreateNewRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\ncreateNewRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Cell values should generally have format matching the output of\n// record.getCellValue() for the field being updated\ncreateNewRecord({\n    'Project Name': 'Cat video 2'\n    'Category (single select)': {name: 'Video'},\n    'Tags (multiple select)': [{name: 'Cats'}, {id: 'someChoiceId'}],\n    'Assets (attachment)': [{url: 'http://mywebsite.com/cats.mp4'}],\n    'Related projects (linked records)': [{id: 'someRecordId'}],\n});\n```\n"}]},"parameters":[{"id":2653,"name":"fields","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"object mapping `FieldId` or field name to value for that field."},"type":{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"unknown"}]},"defaultValue":" {}"}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"reference","name":"RecordId","id":103}]}}],"sources":[{"fileName":"src/models/table.ts","line":1261,"character":27}]},{"id":2660,"name":"createRecordsAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Creates new records with the specified cell values.","text":"Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nRefer to {@link FieldType} for cell value write formats.\n\nYou may only create up to 50 records in one call to `createRecordsAsync`.\nSee [Write back to Airtable](/guides/write-back-to-airtable#size-limits-rate-limits) for\nmore information about write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n\nThe returned promise will resolve to an array of RecordIds of the new records once the new\nrecords are persisted.\n","tags":[{"tag":"example","text":"\n```js\nconst recordDefs = [\n    // Fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         },\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         },\n    },\n    // Specifying no fields will create a new record with no cell values set\n    {\n         fields: {},\n    },\n    // Cell values should generally have format matching the output of\n    // record.getCellValue() for the field being updated\n    {\n         fields: {\n             'Project Name': 'Cat video 2'\n             'Category (single select)': {name: 'Video'},\n             'Tags (multiple select)': [{name: 'Cats'}, {id: 'choiceId'}],\n             'Assets (attachment)': [{url: 'http://mywebsite.com/cats.mp4'}],\n             'Related projects (linked records)': [{id: 'someRecordId'}],\n         },\n    },\n];\n\nfunction createNewRecords() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        table.createRecordsAsync(recordDefs);\n    }\n    // You can now access the new records in your app (e.g.\n    // `table.selectRecords()`) but they are still being saved to Airtable\n    // servers (e.g. other users may not be able to see them yet.)\n}\n\nasync function createNewRecordsAsync() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        const newRecordIds = await table.createRecordsAsync(recordDefs);\n    }\n    // New records have been saved to Airtable servers.\n    alert(`new records with IDs ${newRecordIds} have been created`);\n}\n```\n"}]},"signatures":[{"id":2661,"name":"createRecordsAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates new records with the specified cell values.","text":"Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nRefer to {@link FieldType} for cell value write formats.\n\nYou may only create up to 50 records in one call to `createRecordsAsync`.\nSee [Write back to Airtable](/guides/write-back-to-airtable#size-limits-rate-limits) for\nmore information about write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n\nThe returned promise will resolve to an array of RecordIds of the new records once the new\nrecords are persisted.\n","tags":[{"tag":"example","text":"\n```js\nconst recordDefs = [\n    // Fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         },\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         },\n    },\n    // Specifying no fields will create a new record with no cell values set\n    {\n         fields: {},\n    },\n    // Cell values should generally have format matching the output of\n    // record.getCellValue() for the field being updated\n    {\n         fields: {\n             'Project Name': 'Cat video 2'\n             'Category (single select)': {name: 'Video'},\n             'Tags (multiple select)': [{name: 'Cats'}, {id: 'choiceId'}],\n             'Assets (attachment)': [{url: 'http://mywebsite.com/cats.mp4'}],\n             'Related projects (linked records)': [{id: 'someRecordId'}],\n         },\n    },\n];\n\nfunction createNewRecords() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        table.createRecordsAsync(recordDefs);\n    }\n    // You can now access the new records in your app (e.g.\n    // `table.selectRecords()`) but they are still being saved to Airtable\n    // servers (e.g. other users may not be able to see them yet.)\n}\n\nasync function createNewRecordsAsync() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        const newRecordIds = await table.createRecordsAsync(recordDefs);\n    }\n    // New records have been saved to Airtable servers.\n    alert(`new records with IDs ${newRecordIds} have been created`);\n}\n```\n"}]},"parameters":[{"id":2662,"name":"records","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Array of objects with a `fields` key mapping `FieldId` or field name to value for that field."},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reflection","declaration":{"id":2663,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2664,"name":"fields","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"src/models/table.ts","line":1420,"character":38}],"type":{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"unknown"}]}}],"groups":[{"title":"Variables","kind":32,"children":[2664]}],"sources":[{"fileName":"src/models/table.ts","line":1420,"character":31}]}}]}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"RecordId","id":103}]}]}}],"sources":[{"fileName":"src/models/table.ts","line":1419,"character":28}]},{"id":2633,"name":"deleteRecordAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Delete the given record.","text":"Throws an error if the user does not have permission to delete the given record.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\nfunction deleteRecord(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        table.deleteRecordAsync(record);\n    }\n    // The record is now deleted within your app (eg will not be returned\n    // in `table.selectRecords`) but it is still being saved to Airtable\n    // servers (e.g. it may not look deleted to other users yet).\n}\n\nasync function deleteRecordAsync(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        await table.deleteRecordAsync(record);\n    }\n    // Record deletion has been saved to Airtable servers.\n    alert('record has been deleted');\n}\n```\n"}]},"signatures":[{"id":2634,"name":"deleteRecordAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Delete the given record.","text":"Throws an error if the user does not have permission to delete the given record.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\nfunction deleteRecord(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        table.deleteRecordAsync(record);\n    }\n    // The record is now deleted within your app (eg will not be returned\n    // in `table.selectRecords`) but it is still being saved to Airtable\n    // servers (e.g. it may not look deleted to other users yet).\n}\n\nasync function deleteRecordAsync(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        await table.deleteRecordAsync(record);\n    }\n    // Record deletion has been saved to Airtable servers.\n    alert('record has been deleted');\n}\n```\n"}]},"parameters":[{"id":2635,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the record to be deleted"},"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordId","id":103}]}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]}}],"sources":[{"fileName":"src/models/table.ts","line":1027,"character":27}]},{"id":2642,"name":"deleteRecordsAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Delete the given records.","text":"Throws an error if the user does not have permission to delete the given records.\n\nYou may only delete up to 50 records in one call to `deleteRecordsAsync`.\nSee [Write back to Airtable](/guides/write-back-to-airtable#size-limits-rate-limits) for\nmore information about write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\n\nfunction deleteRecords(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        table.deleteRecordsAsync(records);\n    }\n    // The records are now deleted within your app (eg will not be\n    // returned in `table.selectRecords()`) but are still being saved to\n    // Airtable servers (e.g. they may not look deleted to other users yet).\n}\n\nasync function deleteRecordsAsync(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        await table.deleteRecordsAsync(records);\n    }\n    // Record deletions have been saved to Airtable servers.\n    alert('records have been deleted');\n}\n```\n"}]},"signatures":[{"id":2643,"name":"deleteRecordsAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Delete the given records.","text":"Throws an error if the user does not have permission to delete the given records.\n\nYou may only delete up to 50 records in one call to `deleteRecordsAsync`.\nSee [Write back to Airtable](/guides/write-back-to-airtable#size-limits-rate-limits) for\nmore information about write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\n\nfunction deleteRecords(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        table.deleteRecordsAsync(records);\n    }\n    // The records are now deleted within your app (eg will not be\n    // returned in `table.selectRecords()`) but are still being saved to\n    // Airtable servers (e.g. they may not look deleted to other users yet).\n}\n\nasync function deleteRecordsAsync(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        await table.deleteRecordsAsync(records);\n    }\n    // Record deletions have been saved to Airtable servers.\n    alert('records have been deleted');\n}\n```\n"}]},"parameters":[{"id":2644,"name":"recordsOrRecordIds","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Array of Records and RecordIds"},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordId","id":103}]}]}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]}}],"sources":[{"fileName":"src/models/table.ts","line":1124,"character":28}]},{"id":2562,"name":"getField","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The field matching the given ID or name. Throws if no matching field exists within this table.\nUse {@link getFieldIfExists} instead if you are unsure whether a field exists with the given\nname/ID.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getFieldById} or {@link getFieldByName} methods\ninstead.\n"},"signatures":[{"id":2563,"name":"getField","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The field matching the given ID or name. Throws if no matching field exists within this table.\nUse {@link getFieldIfExists} instead if you are unsure whether a field exists with the given\nname/ID.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getFieldById} or {@link getFieldByName} methods\ninstead.\n"},"parameters":[{"id":2564,"name":"fieldIdOrName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID or name of the field you're looking for.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","name":"Field","id":1724}}],"sources":[{"fileName":"src/models/table.ts","line":285,"character":12}]},{"id":2550,"name":"getFieldById","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the field matching the given ID. Throws if that field does not exist in this table. Use\n{@link getFieldByIdIfExists} instead if you are unsure whether a field exists with the given\nID.","tags":[{"tag":"example","text":"\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldById(fieldId);\nconsole.log(field.name);\n// => 'Name'\n```\n"}]},"signatures":[{"id":2551,"name":"getFieldById","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the field matching the given ID. Throws if that field does not exist in this table. Use\n{@link getFieldByIdIfExists} instead if you are unsure whether a field exists with the given\nID.","tags":[{"tag":"example","text":"\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldById(fieldId);\nconsole.log(field.name);\n// => 'Name'\n```\n"}]},"parameters":[{"id":2552,"name":"fieldId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the field."},"type":{"type":"reference","name":"FieldId","id":331}}],"type":{"type":"reference","name":"Field","id":1724}}],"sources":[{"fileName":"src/models/table.ts","line":209,"character":16}]},{"id":2547,"name":"getFieldByIdIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the field matching the given ID, or `null` if that field does not exist in this table.","tags":[{"tag":"example","text":"\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldByIdIfExists(fieldId);\nif (field !== null) {\n    console.log(field.name);\n} else {\n    console.log('No field exists with that ID');\n}\n```\n"}]},"signatures":[{"id":2548,"name":"getFieldByIdIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the field matching the given ID, or `null` if that field does not exist in this table.","tags":[{"tag":"example","text":"\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldByIdIfExists(fieldId);\nif (field !== null) {\n    console.log(field.name);\n} else {\n    console.log('No field exists with that ID');\n}\n```\n"}]},"parameters":[{"id":2549,"name":"fieldId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the field."},"type":{"type":"reference","name":"FieldId","id":331}}],"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/table.ts","line":185,"character":24}]},{"id":2556,"name":"getFieldByName","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the field matching the given name. Throws if no field exists with that name in this\ntable. Use {@link getFieldByNameIfExists} instead if you are unsure whether a field exists\nwith the given name.","tags":[{"tag":"example","text":"\n```js\nconst field = myTable.getFieldByName('Name');\nconsole.log(field.id);\n// => 'fldxxxxxxxxxxxxxx'\n```\n"}]},"signatures":[{"id":2557,"name":"getFieldByName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the field matching the given name. Throws if no field exists with that name in this\ntable. Use {@link getFieldByNameIfExists} instead if you are unsure whether a field exists\nwith the given name.","tags":[{"tag":"example","text":"\n```js\nconst field = myTable.getFieldByName('Name');\nconsole.log(field.id);\n// => 'fldxxxxxxxxxxxxxx'\n```\n"}]},"parameters":[{"id":2558,"name":"fieldName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The name of the field you're looking for."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"Field","id":1724}}],"sources":[{"fileName":"src/models/table.ts","line":252,"character":18}]},{"id":2553,"name":"getFieldByNameIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the field matching the given name, or `null` if no field exists with that name in this\ntable.","tags":[{"tag":"example","text":"\n```js\nconst field = myTable.getFieldByNameIfExists('Name');\nif (field !== null) {\n    console.log(field.id);\n} else {\n    console.log('No field exists with that name');\n}\n```\n"}]},"signatures":[{"id":2554,"name":"getFieldByNameIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the field matching the given name, or `null` if no field exists with that name in this\ntable.","tags":[{"tag":"example","text":"\n```js\nconst field = myTable.getFieldByNameIfExists('Name');\nif (field !== null) {\n    console.log(field.id);\n} else {\n    console.log('No field exists with that name');\n}\n```\n"}]},"parameters":[{"id":2555,"name":"fieldName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The name of the field you're looking for."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/table.ts","line":231,"character":26}]},{"id":2559,"name":"getFieldIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The field matching the given ID or name. Returns `null` if no matching field exists within\nthis table.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getFieldByIdIfExists} or\n{@link getFieldByNameIfExists} methods instead.\n"},"signatures":[{"id":2560,"name":"getFieldIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The field matching the given ID or name. Returns `null` if no matching field exists within\nthis table.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getFieldByIdIfExists} or\n{@link getFieldByNameIfExists} methods instead.\n"},"parameters":[{"id":2561,"name":"fieldIdOrName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID or name of the field you're looking for.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/table.ts","line":269,"character":20}]},{"id":2591,"name":"getFirstViewOfType","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Returns the first view in the table where the type is one of `allowedViewTypes`, or `null` if\nno such view exists in the table.","tags":[{"tag":"example","text":"\n```js\nimport {ViewType} from '@airtable/blocks/models';\nconst firstCalendarView = myTable.getFirstViewOfType(ViewType.CALENDAR);\nif (firstCalendarView !== null) {\n    console.log(firstCalendarView.name);\n} else {\n    console.log('No calendar views exist in the table');\n}\n```\n"}]},"signatures":[{"id":2592,"name":"getFirstViewOfType","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the first view in the table where the type is one of `allowedViewTypes`, or `null` if\nno such view exists in the table.","tags":[{"tag":"example","text":"\n```js\nimport {ViewType} from '@airtable/blocks/models';\nconst firstCalendarView = myTable.getFirstViewOfType(ViewType.CALENDAR);\nif (firstCalendarView !== null) {\n    console.log(firstCalendarView.name);\n} else {\n    console.log('No calendar views exist in the table');\n}\n```\n"}]},"parameters":[{"id":2593,"name":"allowedViewTypes","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"An array of view types or a single view type to match against."},"type":{"type":"union","types":[{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"ViewType","id":106}]},{"type":"reference","name":"ViewType","id":106}]}},{"id":2594,"name":"preferredViewOrViewId","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"If a view or view ID is supplied and that view exists & has the\ncorrect type, that view will be returned before checking the other views in the table."},"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"reference","name":"ViewId","id":128},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/table.ts","line":524,"character":22}]},{"id":2582,"name":"getView","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The view matching the given ID or name. Throws if no matching view exists within this table.\nUse {@link getViewIfExists} instead if you are unsure whether a view exists with the given\nname/ID.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getViewById} or {@link getViewByName} methods\ninstead.\n"},"signatures":[{"id":2583,"name":"getView","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The view matching the given ID or name. Throws if no matching view exists within this table.\nUse {@link getViewIfExists} instead if you are unsure whether a view exists with the given\nname/ID.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getViewById} or {@link getViewByName} methods\ninstead.\n"},"parameters":[{"id":2584,"name":"viewIdOrName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID or name of the view you're looking for.\n"},"type":{"type":"union","types":[{"type":"reference","name":"ViewId","id":128},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","name":"View","id":2404}}],"sources":[{"fileName":"src/models/table.ts","line":432,"character":11}]},{"id":2570,"name":"getViewById","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the view matching the given ID. Throws if that view does not exist in this table. Use\n{@link getViewByIdIfExists} instead if you are unsure whether a view exists with the given\nID.","tags":[{"tag":"example","text":"\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewById(viewId);\nconsole.log(view.name);\n// => 'Grid view'\n```\n"}]},"signatures":[{"id":2571,"name":"getViewById","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the view matching the given ID. Throws if that view does not exist in this table. Use\n{@link getViewByIdIfExists} instead if you are unsure whether a view exists with the given\nID.","tags":[{"tag":"example","text":"\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewById(viewId);\nconsole.log(view.name);\n// => 'Grid view'\n```\n"}]},"parameters":[{"id":2572,"name":"viewId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the view."},"type":{"type":"reference","name":"ViewId","id":128}}],"type":{"type":"reference","name":"View","id":2404}}],"sources":[{"fileName":"src/models/table.ts","line":358,"character":15}]},{"id":2567,"name":"getViewByIdIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the view matching the given ID, or `null` if that view does not exist in this table.","tags":[{"tag":"example","text":"\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewByIdIfExists(viewId);\nif (view !== null) {\n    console.log(view.name);\n} else {\n    console.log('No view exists with that ID');\n}\n```\n"}]},"signatures":[{"id":2568,"name":"getViewByIdIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the view matching the given ID, or `null` if that view does not exist in this table.","tags":[{"tag":"example","text":"\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewByIdIfExists(viewId);\nif (view !== null) {\n    console.log(view.name);\n} else {\n    console.log('No view exists with that ID');\n}\n```\n"}]},"parameters":[{"id":2569,"name":"viewId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the view."},"type":{"type":"reference","name":"ViewId","id":128}}],"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/table.ts","line":329,"character":23}]},{"id":2576,"name":"getViewByName","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the view matching the given name. Throws if no view exists with that name in this table.\nUse {@link getViewByNameIfExists} instead if you are unsure whether a view exists with the\ngiven name.","tags":[{"tag":"example","text":"\n```js\nconst view = myTable.getViewByName('Name');\nconsole.log(view.id);\n// => 'viwxxxxxxxxxxxxxx'\n```\n"}]},"signatures":[{"id":2577,"name":"getViewByName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the view matching the given name. Throws if no view exists with that name in this table.\nUse {@link getViewByNameIfExists} instead if you are unsure whether a view exists with the\ngiven name.","tags":[{"tag":"example","text":"\n```js\nconst view = myTable.getViewByName('Name');\nconsole.log(view.id);\n// => 'viwxxxxxxxxxxxxxx'\n```\n"}]},"parameters":[{"id":2578,"name":"viewName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The name of the view you're looking for."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"View","id":2404}}],"sources":[{"fileName":"src/models/table.ts","line":401,"character":17}]},{"id":2573,"name":"getViewByNameIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Gets the view matching the given name, or `null` if no view exists with that name in this\ntable.","tags":[{"tag":"example","text":"\n```js\nconst view = myTable.getViewByNameIfExists('Name');\nif (view !== null) {\n    console.log(view.id);\n} else {\n    console.log('No view exists with that name');\n}\n```\n"}]},"signatures":[{"id":2574,"name":"getViewByNameIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the view matching the given name, or `null` if no view exists with that name in this\ntable.","tags":[{"tag":"example","text":"\n```js\nconst view = myTable.getViewByNameIfExists('Name');\nif (view !== null) {\n    console.log(view.id);\n} else {\n    console.log('No view exists with that name');\n}\n```\n"}]},"parameters":[{"id":2575,"name":"viewName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The name of the view you're looking for."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/table.ts","line":380,"character":25}]},{"id":2579,"name":"getViewIfExists","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"The view matching the given ID or name. Returns `null` if no matching view exists within\nthis table.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getViewByIdIfExists} or\n{@link getViewByNameIfExists} methods instead.\n"},"signatures":[{"id":2580,"name":"getViewIfExists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The view matching the given ID or name. Returns `null` if no matching view exists within\nthis table.","text":"This method is convenient when building an app for a specific base, but for more generic\napps the best practice is to use the {@link getViewByIdIfExists} or\n{@link getViewByNameIfExists} methods instead.\n"},"parameters":[{"id":2581,"name":"viewIdOrName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID or name of the view you're looking for.\n"},"type":{"type":"union","types":[{"type":"reference","name":"ViewId","id":128},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/models/table.ts","line":418,"character":19}]},{"id":2683,"name":"hasPermissionToCreateField","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"An alias for `checkPermissionsForCreateField(name, type, options).hasPermission`.\n\nChecks whether the current user has permission to create a field in this table.\n\nAccepts partial input, in the same format as {@link createFieldAsync}.\n","tags":[{"tag":"example","text":"\n```js\nconst canCreateField = table.hasPermissionToCreateField();\n\nif (!canCreateField) {\n    alert('not allowed!');\n}\n```\n"}]},"signatures":[{"id":2684,"name":"hasPermissionToCreateField","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"_Beta feature with unstable API. May have breaking changes before release._","text":"An alias for `checkPermissionsForCreateField(name, type, options).hasPermission`.\n\nChecks whether the current user has permission to create a field in this table.\n\nAccepts partial input, in the same format as {@link createFieldAsync}.\n","tags":[{"tag":"example","text":"\n```js\nconst canCreateField = table.hasPermissionToCreateField();\n\nif (!canCreateField) {\n    alert('not allowed!');\n}\n```\n"}]},"parameters":[{"id":2685,"name":"name","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"name for the field. must be case-insensitive unique for the table"},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":2686,"name":"type","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"type for the field"},"type":{"type":"reference","name":"FieldType","id":138}},{"id":2687,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"options for the field. omit for fields without writable options\n"},"type":{"type":"union","types":[{"type":"reference","name":"FieldOptions"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/table.ts","line":1633,"character":30}]},{"id":2657,"name":"hasPermissionToCreateRecord","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `checkPermissionsForCreateRecord(fields).hasPermission`.","text":"Checks whether the current user has permission to create the specified record.\n\nAccepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can create a specific record, when you already know what\n// fields/cell values will be set for the record.\nconst canCreateRecord = table.hasPermissionToCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!canCreateRecord) {\n    alert('not allowed!');\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst canCreateRecordWithFieldIds = table.hasPermissionToCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating a record.)\nconst canCreateUnknownRecord = table.hasPermissionToCreateRecord();\n```\n"}]},"signatures":[{"id":2658,"name":"hasPermissionToCreateRecord","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `checkPermissionsForCreateRecord(fields).hasPermission`.","text":"Checks whether the current user has permission to create the specified record.\n\nAccepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can create a specific record, when you already know what\n// fields/cell values will be set for the record.\nconst canCreateRecord = table.hasPermissionToCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!canCreateRecord) {\n    alert('not allowed!');\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst canCreateRecordWithFieldIds = table.hasPermissionToCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating a record.)\nconst canCreateUnknownRecord = table.hasPermissionToCreateRecord();\n```\n"}]},"parameters":[{"id":2659,"name":"fields","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"object mapping `FieldId` or field name to value for that field."},"type":{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"union","types":[{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"void"}]}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/table.ts","line":1344,"character":31}]},{"id":2670,"name":"hasPermissionToCreateRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `checkPermissionsForCreateRecords(records).hasPermission`.","text":"Checks whether the current user has permission to create the specified records.\n\nAccepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can create specific records, when you already know what fields/cell values\n// will be set for the records.\nconst canCreateRecords = table.hasPermissionToCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         }\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         }\n    },\n    {},\n]);\nif (!canCreateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating records).\n// Equivalent to table.hasPermissionToCreateRecord()\nconst canCreateUnknownRecords = table.hasPermissionToCreateRecords();\n```\n"}]},"signatures":[{"id":2671,"name":"hasPermissionToCreateRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `checkPermissionsForCreateRecords(records).hasPermission`.","text":"Checks whether the current user has permission to create the specified records.\n\nAccepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can create specific records, when you already know what fields/cell values\n// will be set for the records.\nconst canCreateRecords = table.hasPermissionToCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         }\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         }\n    },\n    {},\n]);\nif (!canCreateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating records).\n// Equivalent to table.hasPermissionToCreateRecord()\nconst canCreateUnknownRecords = table.hasPermissionToCreateRecords();\n```\n"}]},"parameters":[{"id":2672,"name":"records","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Array of objects mapping `FieldId` or field name to value for that field."},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reflection","declaration":{"id":2673,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2674,"name":"fields","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/table.ts","line":1549,"character":27}],"type":{"type":"union","types":[{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"union","types":[{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"void"}]}]},{"type":"intrinsic","name":"void"}]}}],"groups":[{"title":"Variables","kind":32,"children":[2674]}],"sources":[{"fileName":"src/models/table.ts","line":1548,"character":32}]}}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/table.ts","line":1547,"character":32}]},{"id":2639,"name":"hasPermissionToDeleteRecord","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `checkPermissionsForDeleteRecord(recordOrRecordId).hasPermission`.","text":"Checks whether the current user has permission to delete the specified record.\n\nAccepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can delete a specific record\nconst canDeleteRecord = table.hasPermissionToDeleteRecord(record);\nif (!canDeleteRecord) {\n    alert('not allowed');\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for\n// example, to show/hide UI controls that let you select a record to delete).\nconst canDeleteUnknownRecord = table.hasPermissionToDeleteRecord();\n```\n"}]},"signatures":[{"id":2640,"name":"hasPermissionToDeleteRecord","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `checkPermissionsForDeleteRecord(recordOrRecordId).hasPermission`.","text":"Checks whether the current user has permission to delete the specified record.\n\nAccepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can delete a specific record\nconst canDeleteRecord = table.hasPermissionToDeleteRecord(record);\nif (!canDeleteRecord) {\n    alert('not allowed');\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for\n// example, to show/hide UI controls that let you select a record to delete).\nconst canDeleteUnknownRecord = table.hasPermissionToDeleteRecord();\n```\n"}]},"parameters":[{"id":2641,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the record to be deleted"},"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordId","id":103}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/table.ts","line":1085,"character":31}]},{"id":2648,"name":"hasPermissionToDeleteRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `checkPermissionsForDeleteRecords(recordsOrRecordIds).hasPermission`.","text":"Checks whether the current user has permission to delete the specified records.\n\nAccepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can delete specific records\nconst canDeleteRecords =\n    table.hasPermissionToDeleteRecords([record1, record2]);\nif (!canDeleteRecords) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for\n// example, to show/hide UI controls that let you select records to delete).\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst canDeleteUnknownRecords = table.hasPermissionToDeleteRecords();\n```\n"}]},"signatures":[{"id":2649,"name":"hasPermissionToDeleteRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `checkPermissionsForDeleteRecords(recordsOrRecordIds).hasPermission`.","text":"Checks whether the current user has permission to delete the specified records.\n\nAccepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can delete specific records\nconst canDeleteRecords =\n    table.hasPermissionToDeleteRecords([record1, record2]);\nif (!canDeleteRecords) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for\n// example, to show/hide UI controls that let you select records to delete).\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst canDeleteUnknownRecords = table.hasPermissionToDeleteRecords();\n```\n"}]},"parameters":[{"id":2650,"name":"recordsOrRecordIds","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the records to be deleted"},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordId","id":103}]}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/table.ts","line":1201,"character":32}]},{"id":2611,"name":"hasPermissionToUpdateRecord","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `checkPermissionsForUpdateRecord(recordOrRecordId, fields).hasPermission`.","text":"Checks whether the current user has permission to perform the given record update.\n\nAccepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update specific fields for a specific record.\nconst canUpdateRecord = table.hasPermissionToUpdateRecord(record, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nif (!canUpdateRecord) {\n    alert('not allowed!');\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst canUpdateRecordWithFieldIds =\n    table.hasPermissionToUpdateRecord(record, {\n        [postTitleField.id]: 'Cake decorating tips & tricks',\n        [publicationDateField.id]: '2020-02-02',\n    });\n\n// Check if user could update a given record, when you don't know the\n// specific fields that will be updated yet (e.g. to check whether you should\n// allow a user to select a certain record to update).\nconst canUpdateUnknownFields = table.hasPermissionToUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the\n// specific record that will be updated yet (e.g. if the field is selected\n// by the user and you want to check if your app can write to it).\nconst canUpdateUnknownRecord =\n    table.hasPermissionToUpdateRecord(undefined, {\n        'My field name': 'updated value',\n        // You can use undefined if you know you're going to update a field,\n        // but don't know the new cell value yet.\n        'Another field name': undefined,\n    });\n\n// Check if user could perform updates within the table, without knowing the\n// specific record or fields that will be updated yet. (for example, to\n// render your app in \"read only\" mode)\nconst canUpdateUnknownRecordAndFields = table.hasPermissionToUpdateRecord();\n```\n"}]},"signatures":[{"id":2612,"name":"hasPermissionToUpdateRecord","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `checkPermissionsForUpdateRecord(recordOrRecordId, fields).hasPermission`.","text":"Checks whether the current user has permission to perform the given record update.\n\nAccepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update specific fields for a specific record.\nconst canUpdateRecord = table.hasPermissionToUpdateRecord(record, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nif (!canUpdateRecord) {\n    alert('not allowed!');\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst canUpdateRecordWithFieldIds =\n    table.hasPermissionToUpdateRecord(record, {\n        [postTitleField.id]: 'Cake decorating tips & tricks',\n        [publicationDateField.id]: '2020-02-02',\n    });\n\n// Check if user could update a given record, when you don't know the\n// specific fields that will be updated yet (e.g. to check whether you should\n// allow a user to select a certain record to update).\nconst canUpdateUnknownFields = table.hasPermissionToUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the\n// specific record that will be updated yet (e.g. if the field is selected\n// by the user and you want to check if your app can write to it).\nconst canUpdateUnknownRecord =\n    table.hasPermissionToUpdateRecord(undefined, {\n        'My field name': 'updated value',\n        // You can use undefined if you know you're going to update a field,\n        // but don't know the new cell value yet.\n        'Another field name': undefined,\n    });\n\n// Check if user could perform updates within the table, without knowing the\n// specific record or fields that will be updated yet. (for example, to\n// render your app in \"read only\" mode)\nconst canUpdateUnknownRecordAndFields = table.hasPermissionToUpdateRecord();\n```\n"}]},"parameters":[{"id":2613,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the record to update"},"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordId","id":103}]}},{"id":2614,"name":"fields","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"cell values to update in that record, specified as object mapping `FieldId` or field name to value for that field."},"type":{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"union","types":[{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"void"}]}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/table.ts","line":754,"character":31}]},{"id":2627,"name":"hasPermissionToUpdateRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `checkPermissionsForUpdateRecords(records).hasPermission`.","text":"Checks whether the current user has permission to perform the given record updates.\n\nAccepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what\n        // fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what\n        // record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a\n            // field, but don't know the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst canUpdateRecords = table.hasPermissionToUpdateRecords(recordsToUpdate);\nif (!canUpdateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.hasPermissionToUpdateRecord()\nconst canUpdateUnknownRecordsAndFields =\n    table.hasPermissionToUpdateRecords();\n```\n"}]},"signatures":[{"id":2628,"name":"hasPermissionToUpdateRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `checkPermissionsForUpdateRecords(records).hasPermission`.","text":"Checks whether the current user has permission to perform the given record updates.\n\nAccepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what\n        // fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what\n        // record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a\n            // field, but don't know the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst canUpdateRecords = table.hasPermissionToUpdateRecords(recordsToUpdate);\nif (!canUpdateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.hasPermissionToUpdateRecord()\nconst canUpdateUnknownRecordsAndFields =\n    table.hasPermissionToUpdateRecords();\n```\n"}]},"parameters":[{"id":2629,"name":"records","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Array of objects containing recordId and fields/cellValues to update for that record (specified as an object mapping `FieldId` or field name to cell value)"},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reflection","declaration":{"id":2630,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2632,"name":"fields","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/table.ts","line":991,"character":27}],"type":{"type":"union","types":[{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"union","types":[{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"void"}]}]},{"type":"intrinsic","name":"void"}]}},{"id":2631,"name":"id","kind":32,"kindString":"Variable","flags":{"isOptional":true},"sources":[{"fileName":"src/models/table.ts","line":990,"character":23}],"type":{"type":"union","types":[{"type":"reference","name":"RecordId","id":103},{"type":"intrinsic","name":"void"}]}}],"groups":[{"title":"Variables","kind":32,"children":[2632,2631]}],"sources":[{"fileName":"src/models/table.ts","line":989,"character":32}]}}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/models/table.ts","line":988,"character":32}]},{"id":2585,"name":"selectRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Select records from the table. Returns a {@link RecordQueryResult}.","text":"Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`). Record hooks handle\nloading/unloading and updating your UI automatically, but manually `select`ing records is\nuseful for one-off data processing.\n","tags":[{"tag":"example","text":"\n```js\nimport {useBase, useRecords} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = useBase();\n    const table = base.getTableByName('Tasks');\n\n    const queryResult = table.selectRecords();\n    const records = useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.name || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"}]},"signatures":[{"id":2586,"name":"selectRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Select records from the table. Returns a {@link RecordQueryResult}.","text":"Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`). Record hooks handle\nloading/unloading and updating your UI automatically, but manually `select`ing records is\nuseful for one-off data processing.\n","tags":[{"tag":"example","text":"\n```js\nimport {useBase, useRecords} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = useBase();\n    const table = base.getTableByName('Tasks');\n\n    const queryResult = table.selectRecords();\n    const records = useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.name || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"}]},"parameters":[{"id":2587,"name":"opts","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Options for the query, such as sorts and fields."},"type":{"type":"reference","name":"RecordQueryResultOpts","id":3563}}],"type":{"type":"reference","name":"TableOrViewQueryResult","id":2142}}],"sources":[{"fileName":"src/models/table.ts","line":472,"character":17}]},{"id":2588,"name":"selectRecordsAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Select and load records from the table. Returns a {@link RecordQueryResult} promise where\nrecord data has been loaded.","text":"Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`). Record hooks handle\nloading/unloading and updating your UI automatically, but manually `select`ing records is\nuseful for one-off data processing.\n\nOnce you've finished with your query, remember to call `queryResult.unloadData()`.\n","tags":[{"tag":"example","text":"\n```js\nasync function logRecordCountAsync(table) {\n    const query = await table.selectRecordsAsync();\n    console.log(query.recordIds.length);\n    query.unloadData();\n}\n```\n"}]},"signatures":[{"id":2589,"name":"selectRecordsAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Select and load records from the table. Returns a {@link RecordQueryResult} promise where\nrecord data has been loaded.","text":"Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`). Record hooks handle\nloading/unloading and updating your UI automatically, but manually `select`ing records is\nuseful for one-off data processing.\n\nOnce you've finished with your query, remember to call `queryResult.unloadData()`.\n","tags":[{"tag":"example","text":"\n```js\nasync function logRecordCountAsync(table) {\n    const query = await table.selectRecordsAsync();\n    console.log(query.recordIds.length);\n    query.unloadData();\n}\n```\n"}]},"parameters":[{"id":2590,"name":"opts","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Options for the query, such as sorts and fields."},"type":{"type":"reference","name":"RecordQueryResultOpts","id":3563}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"reference","name":"TableOrViewQueryResult","id":2142}]}}],"sources":[{"fileName":"src/models/table.ts","line":501,"character":28}]},{"id":2718,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":2719,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":2746,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"signatures":[{"id":2747,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"parameters":[{"id":2748,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableTableKey","id":2762},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableTableKey","id":2762}]}]}},{"id":2749,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reflection","declaration":{"id":2750,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":2751,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2752,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":2753,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableTableKey","id":2762}},{"id":2754,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":113,"character":17}]}}},{"id":2755,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableTableKey","id":2762}]},"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/watchable.ts","line":111,"character":11}],"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":2603,"name":"updateRecordAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Updates cell values for a record.","text":"Throws an error if the user does not have permission to update the given cell values in\nthe record, or if invalid input is provided (eg. invalid cell values).\n\nRefer to {@link FieldType} for cell value write formats.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the updated\ncell values to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\nfunction updateRecord(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        table.updateRecordAsync(record, recordFields);\n    }\n    // The updated values will now show in your app (eg in\n    // `table.selectRecords()` result) but are still being saved to Airtable\n    // servers (e.g. other users may not be able to see them yet).\n}\n\nasync function updateRecordAsync(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        await table.updateRecordAsync(record, recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`record with ID ${record.id} has been updated`);\n}\n\n// Fields can be specified by name or ID\nupdateRecord(record1, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nupdateRecord(record2, {\n    [postTitleField.id]: 'Cake decorating tips & tricks',\n    [publicationDateField.id]: '2020-02-02',\n});\n\n// Cell values should generally have format matching the output of\n// record.getCellValue() for the field being updated\nupdateRecord(record1, {\n    'Category (single select)': {name: 'Recipe'},\n    'Tags (multiple select)': [{name: 'Desserts'}, {id: 'someChoiceId'}],\n    'Images (attachment)': [{url: 'http://mywebsite.com/cake.png'}],\n    'Related posts (linked records)': [{id: 'someRecordId'}],\n});\n```\n"}]},"signatures":[{"id":2604,"name":"updateRecordAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Updates cell values for a record.","text":"Throws an error if the user does not have permission to update the given cell values in\nthe record, or if invalid input is provided (eg. invalid cell values).\n\nRefer to {@link FieldType} for cell value write formats.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the updated\ncell values to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\nfunction updateRecord(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        table.updateRecordAsync(record, recordFields);\n    }\n    // The updated values will now show in your app (eg in\n    // `table.selectRecords()` result) but are still being saved to Airtable\n    // servers (e.g. other users may not be able to see them yet).\n}\n\nasync function updateRecordAsync(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        await table.updateRecordAsync(record, recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`record with ID ${record.id} has been updated`);\n}\n\n// Fields can be specified by name or ID\nupdateRecord(record1, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nupdateRecord(record2, {\n    [postTitleField.id]: 'Cake decorating tips & tricks',\n    [publicationDateField.id]: '2020-02-02',\n});\n\n// Cell values should generally have format matching the output of\n// record.getCellValue() for the field being updated\nupdateRecord(record1, {\n    'Category (single select)': {name: 'Recipe'},\n    'Tags (multiple select)': [{name: 'Desserts'}, {id: 'someChoiceId'}],\n    'Images (attachment)': [{url: 'http://mywebsite.com/cake.png'}],\n    'Related posts (linked records)': [{id: 'someRecordId'}],\n});\n```\n"}]},"parameters":[{"id":2605,"name":"recordOrRecordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the record to update"},"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordId","id":103}]}},{"id":2606,"name":"fields","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"cell values to update in that record, specified as object mapping `FieldId` or field name to value for that field."},"type":{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"unknown"}]}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]}}],"sources":[{"fileName":"src/models/table.ts","line":619,"character":27}]},{"id":2615,"name":"updateRecordsAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Updates cell values for records.","text":"Throws an error if the user does not have permission to update the given cell values in\nthe records, or if invalid input is provided (eg. invalid cell values).\n\nRefer to {@link FieldType} for cell value write formats.\n\nYou may only update up to 50 records in one call to `updateRecordsAsync`.\nSee [Write back to Airtable](/guides/write-back-to-airtable) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\nconst recordsToUpdate = [\n    // Fields can be specified by name or ID\n    {\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        id: record2.id,\n        fields: {\n            // Sets the cell values to be empty.\n            'Post Title': '',\n            'Publication Date': '',\n        },\n    },\n    {\n        id: record3.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    // Cell values should generally have format matching the output of\n    // record.getCellValue() for the field being updated\n    {\n        id: record4.id,\n        fields: {\n            'Category (single select)': {name: 'Recipe'},\n            'Tags (multiple select)': [{name: 'Desserts'}, {id: 'choiceId'}],\n            'Images (attachment)': [{url: 'http://mywebsite.com/cake.png'}],\n            'Related posts (linked records)': [{id: 'someRecordId'}],\n        },\n    },\n];\n\nfunction updateRecords() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        table.updateRecordsAsync(recordsToUpdate);\n    }\n    // The records are now updated within your app (eg will be reflected in\n    // `table.selectRecords()`) but are still being saved to Airtable servers\n    // (e.g. they may not be updated for other users yet).\n}\n\nasync function updateRecordsAsync() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        await table.updateRecordsAsync(recordsToUpdate);\n    }\n    // Record updates have been saved to Airtable servers.\n    alert('records have been updated');\n}\n```\n"}]},"signatures":[{"id":2616,"name":"updateRecordsAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Updates cell values for records.","text":"Throws an error if the user does not have permission to update the given cell values in\nthe records, or if invalid input is provided (eg. invalid cell values).\n\nRefer to {@link FieldType} for cell value write formats.\n\nYou may only update up to 50 records in one call to `updateRecordsAsync`.\nSee [Write back to Airtable](/guides/write-back-to-airtable) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your app\nbefore the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\nconst recordsToUpdate = [\n    // Fields can be specified by name or ID\n    {\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        id: record2.id,\n        fields: {\n            // Sets the cell values to be empty.\n            'Post Title': '',\n            'Publication Date': '',\n        },\n    },\n    {\n        id: record3.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    // Cell values should generally have format matching the output of\n    // record.getCellValue() for the field being updated\n    {\n        id: record4.id,\n        fields: {\n            'Category (single select)': {name: 'Recipe'},\n            'Tags (multiple select)': [{name: 'Desserts'}, {id: 'choiceId'}],\n            'Images (attachment)': [{url: 'http://mywebsite.com/cake.png'}],\n            'Related posts (linked records)': [{id: 'someRecordId'}],\n        },\n    },\n];\n\nfunction updateRecords() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        table.updateRecordsAsync(recordsToUpdate);\n    }\n    // The records are now updated within your app (eg will be reflected in\n    // `table.selectRecords()`) but are still being saved to Airtable servers\n    // (e.g. they may not be updated for other users yet).\n}\n\nasync function updateRecordsAsync() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        await table.updateRecordsAsync(recordsToUpdate);\n    }\n    // Record updates have been saved to Airtable servers.\n    alert('records have been updated');\n}\n```\n"}]},"parameters":[{"id":2617,"name":"records","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Array of objects containing recordId and fields/cellValues to update for that record (specified as an object mapping `FieldId` or field name to cell value)"},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reflection","declaration":{"id":2618,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2620,"name":"fields","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"src/models/table.ts","line":838,"character":27}],"type":{"type":"reference","name":"ObjectMap","typeArguments":[{"type":"union","types":[{"type":"reference","name":"FieldId","id":331},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"unknown"}]}},{"id":2619,"name":"id","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"src/models/table.ts","line":837,"character":23}],"type":{"type":"reference","name":"RecordId","id":103}}],"groups":[{"title":"Variables","kind":32,"children":[2620,2619]}],"sources":[{"fileName":"src/models/table.ts","line":836,"character":31}]}}]}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]}}],"sources":[{"fileName":"src/models/table.ts","line":835,"character":28}]},{"id":2736,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":2737,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":2738,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableTableKey","id":2762},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableTableKey","id":2762}]}]}},{"id":2739,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reflection","declaration":{"id":2740,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":2741,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2742,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":2743,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableTableKey","id":2762}},{"id":2744,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":66,"character":17}]}}},{"id":2745,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableTableKey","id":2762}]},"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/watchable.ts","line":64,"character":9}],"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Accessors","kind":262144,"children":[2539,2545,2710,2714,2537,2543,2541,2565]},{"title":"Methods","kind":2048,"children":[2678,2654,2665,2636,2645,2607,2621,2688,2651,2660,2633,2642,2562,2550,2547,2556,2553,2559,2591,2582,2570,2567,2576,2573,2579,2683,2657,2670,2639,2648,2611,2627,2585,2588,2718,2746,2603,2615,2736]}],"sources":[{"fileName":"src/models/table.ts","line":43,"character":11}],"extendedTypes":[{"type":"reference","name":"AbstractModel","id":890,"typeArguments":[{"type":"reference","name":"TableData"},{"type":"reference","name":"WatchableTableKey","id":2762}]}]},{"id":367,"name":"TableId","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/table.ts","line":8,"character":19}],"type":{"type":"intrinsic","name":"string"}},{"id":2762,"name":"WatchableTableKey","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A key in {@link Table} that can be watched.\n- `name`\n- `description`\n- `views`\n- `fields`"},"sources":[{"fileName":"src/models/table.ts","line":36,"character":29}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"name"},{"type":"stringLiteral","value":"description"},{"type":"stringLiteral","value":"views"},{"type":"stringLiteral","value":"fields"}]}}],"groups":[{"title":"Classes","kind":128,"children":[2507]},{"title":"Type aliases","kind":4194304,"children":[367,2762]}],"sources":[{"fileName":"src/types/table.ts","line":1,"character":0}]},{"id":105,"name":"@airtable/blocks/models: View","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/types/view.ts","comment":{},"children":[{"id":106,"name":"ViewType","kind":4,"kindString":"Enumeration","flags":{"isExported":true},"comment":{"shortText":"An enum of Airtable's view types","tags":[{"tag":"example","text":"\n```js\nimport {ViewType} from '@airtable/blocks/models';\nconst gridViews = myTable.views.filter(view => (\n    view.type === ViewType.GRID\n));\n```\n"}]},"children":[{"id":112,"name":"BLOCK","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/view.ts","line":33,"character":9}],"defaultValue":"\"block\""},{"id":109,"name":"CALENDAR","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/view.ts","line":27,"character":12}],"defaultValue":"\"calendar\""},{"id":108,"name":"FORM","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/view.ts","line":25,"character":8}],"defaultValue":"\"form\""},{"id":110,"name":"GALLERY","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/view.ts","line":29,"character":11}],"defaultValue":"\"gallery\""},{"id":107,"name":"GRID","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/view.ts","line":23,"character":8}],"defaultValue":"\"grid\""},{"id":111,"name":"KANBAN","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/view.ts","line":31,"character":10}],"defaultValue":"\"kanban\""}],"groups":[{"title":"Enumeration members","kind":16,"children":[112,109,108,110,107,111]}],"sources":[{"fileName":"src/types/view.ts","line":21,"character":20}]},{"id":2404,"name":"View","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"A class that represents an Airtable view. Every {@link Table} has one or more views.","tags":[{"tag":"docspath","text":"models/View\n"}]},"children":[{"id":2453,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":2454,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":2457,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"getSignature":[{"id":2458,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if the model has been deleted, and `false` otherwise.","text":"In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":81,"character":17}],"inheritedFrom":{"type":"reference","name":"AbstractModel.isDeleted","id":910}},{"id":2422,"name":"name","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The name of the view. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myView.name);\n// => 'Grid view'\n```\n"}]},"getSignature":[{"id":2423,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The name of the view. Can be watched.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myView.name);\n// => 'Grid view'\n```\n"}]},"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/view.ts","line":94,"character":12}]},{"id":2424,"name":"type","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The type of the view, such as Grid, Calendar, or Kanban. Should never change because view types cannot be modified.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myView.type);\n// => 'kanban'\n```\n"}]},"getSignature":[{"id":2425,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The type of the view, such as Grid, Calendar, or Kanban. Should never change because view types cannot be modified.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myView.type);\n// => 'kanban'\n```\n"}]},"type":{"type":"reference","name":"ViewType","id":106}}],"sources":[{"fileName":"src/models/view.ts","line":106,"character":12}]},{"id":2426,"name":"url","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The URL for the view. You can visit this URL in the browser to be taken to the view in the Airtable UI.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myView.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/viwxxxxxxxxxxxxxx'\n```\n"}]},"getSignature":[{"id":2427,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The URL for the view. You can visit this URL in the browser to be taken to the view in the Airtable UI.","tags":[{"tag":"example","text":"\n```js\nconsole.log(myView.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/viwxxxxxxxxxxxxxx'\n```\n"}]},"type":{"type":"intrinsic","name":"string"}}],"sources":[{"fileName":"src/models/view.ts","line":118,"character":11}]},{"id":2434,"name":"selectMetadata","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Select the field order and visible fields from the view. Returns a\n{@link ViewMetadataQueryResult}.","text":"Consider using {@link useViewMetadata} instead if you're creating a React UI. The\n{@link useViewMetadata} hook handles loading/unloading and updating your UI automatically,\nbut manually `select`ing data is useful for one-off data processing.\n","tags":[{"tag":"example","text":"\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = view.selectMetadata();\n    await viewMetadata.loadDataAsync();\n\n    console.log('Visible fields:');\n    console.log(viewMetadata.visibleFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3']\n\n    console.log('All fields:');\n    console.log(viewMetadata.allFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3', 'Hidden field 4']\n\n    viewMetadata.unloadData();\n}\n```\n"}]},"signatures":[{"id":2435,"name":"selectMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Select the field order and visible fields from the view. Returns a\n{@link ViewMetadataQueryResult}.","text":"Consider using {@link useViewMetadata} instead if you're creating a React UI. The\n{@link useViewMetadata} hook handles loading/unloading and updating your UI automatically,\nbut manually `select`ing data is useful for one-off data processing.\n","tags":[{"tag":"example","text":"\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = view.selectMetadata();\n    await viewMetadata.loadDataAsync();\n\n    console.log('Visible fields:');\n    console.log(viewMetadata.visibleFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3']\n\n    console.log('All fields:');\n    console.log(viewMetadata.allFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3', 'Hidden field 4']\n\n    viewMetadata.unloadData();\n}\n```\n"}]},"type":{"type":"reference","name":"ViewMetadataQueryResult","id":2034}}],"sources":[{"fileName":"src/models/view.ts","line":232,"character":18}]},{"id":2436,"name":"selectMetadataAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Select and load the field order and visible fields from the view. Returns a\n{@link ViewMetadataQueryResult} promise where the metadata has already been loaded.","text":"Consider using {@link useViewMetadata} instead if you're creating a React UI. The\n{@link useViewMetadata} hook handles loading/unloading and updating your UI automatically,\nbut manually `select`ing data is useful for one-off data processing.\n","tags":[{"tag":"example","text":"\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = await view.selectMetadata();\n\n    console.log('Visible fields:');\n    console.log(viewMetadata.visibleFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3']\n\n    console.log('All fields:');\n    console.log(viewMetadata.allFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3', 'Hidden field 4']\n\n    viewMetadata.unloadData();\n}\n```\n"}]},"signatures":[{"id":2437,"name":"selectMetadataAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Select and load the field order and visible fields from the view. Returns a\n{@link ViewMetadataQueryResult} promise where the metadata has already been loaded.","text":"Consider using {@link useViewMetadata} instead if you're creating a React UI. The\n{@link useViewMetadata} hook handles loading/unloading and updating your UI automatically,\nbut manually `select`ing data is useful for one-off data processing.\n","tags":[{"tag":"example","text":"\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = await view.selectMetadata();\n\n    console.log('Visible fields:');\n    console.log(viewMetadata.visibleFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3']\n\n    console.log('All fields:');\n    console.log(viewMetadata.allFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3', 'Hidden field 4']\n\n    viewMetadata.unloadData();\n}\n```\n"}]},"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"reference","name":"ViewMetadataQueryResult","id":2034}]}}],"sources":[{"fileName":"src/models/view.ts","line":264,"character":29}]},{"id":2428,"name":"selectRecords","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Select records from the view. Returns a {@link RecordQueryResult}.","text":"Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`). Record hooks handle\nloading/unloading and updating your UI automatically, but manually `select`ing records is\nuseful for one-off data processing.\n","tags":[{"tag":"example","text":"\n```js\nimport {useBase, useRecords} from '@airtable/blocks/UI';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = useBase();\n    const table = base.getTableByName('Tasks');\n    const view = table.getViewByName('Grid view');\n\n    const queryResult = view.selectRecords();\n    const records = useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.name || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"}]},"signatures":[{"id":2429,"name":"selectRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Select records from the view. Returns a {@link RecordQueryResult}.","text":"Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`). Record hooks handle\nloading/unloading and updating your UI automatically, but manually `select`ing records is\nuseful for one-off data processing.\n","tags":[{"tag":"example","text":"\n```js\nimport {useBase, useRecords} from '@airtable/blocks/UI';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = useBase();\n    const table = base.getTableByName('Tasks');\n    const view = table.getViewByName('Grid view');\n\n    const queryResult = view.selectRecords();\n    const records = useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.name || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"}]},"parameters":[{"id":2430,"name":"opts","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Options for the query, such as sorts, fields, and record coloring. By\ndefault, records will be coloured according to the view."},"type":{"type":"reference","name":"RecordQueryResultOpts","id":3563},"defaultValue":" {}"}],"type":{"type":"reference","name":"TableOrViewQueryResult","id":2142}}],"sources":[{"fileName":"src/models/view.ts","line":159,"character":17}]},{"id":2431,"name":"selectRecordsAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Select and load records from the view. Returns a {@link RecordQueryResult} promise where\nrecord data has been loaded.","text":"Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`). Record hooks handle\nloading/unloading and updating your UI automatically, but manually `select`ing records is\nuseful for one-off data processing.\n\nOnce you've finished with your query, remember to call `queryResult.unloadData()`.\n","tags":[{"tag":"example","text":"\n```js\nasync function getRecordCountAsync(view) {\n    const query = await view.selectRecordsAsync();\n    const recordCount = query.recordIds.length;\n    query.unloadData();\n    return recordCount;\n}\n```\n"}]},"signatures":[{"id":2432,"name":"selectRecordsAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Select and load records from the view. Returns a {@link RecordQueryResult} promise where\nrecord data has been loaded.","text":"Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`). Record hooks handle\nloading/unloading and updating your UI automatically, but manually `select`ing records is\nuseful for one-off data processing.\n\nOnce you've finished with your query, remember to call `queryResult.unloadData()`.\n","tags":[{"tag":"example","text":"\n```js\nasync function getRecordCountAsync(view) {\n    const query = await view.selectRecordsAsync();\n    const recordCount = query.recordIds.length;\n    query.unloadData();\n    return recordCount;\n}\n```\n"}]},"parameters":[{"id":2433,"name":"opts","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Options for the query, such as sorts, fields, and record coloring. By\ndefault, records will be coloured according to the view."},"type":{"type":"reference","name":"RecordQueryResultOpts","id":3563},"defaultValue":" {}"}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"reference","name":"TableOrViewQueryResult","id":2142}]}}],"sources":[{"fileName":"src/models/view.ts","line":201,"character":28}]},{"id":2461,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":2462,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":2489,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"signatures":[{"id":2490,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"parameters":[{"id":2491,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableViewKey","id":2505},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableViewKey","id":2505}]}]}},{"id":2492,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reflection","declaration":{"id":2493,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":2494,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2495,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":2496,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableViewKey","id":2505}},{"id":2497,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":113,"character":17}]}}},{"id":2498,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableViewKey","id":2505}]},"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/watchable.ts","line":111,"character":11}],"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":2479,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":2480,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":2481,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableViewKey","id":2505},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableViewKey","id":2505}]}]}},{"id":2482,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reflection","declaration":{"id":2483,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":2484,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2485,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":2486,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableViewKey","id":2505}},{"id":2487,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":66,"character":17}]}}},{"id":2488,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableViewKey","id":2505}]},"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/watchable.ts","line":64,"character":9}],"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Accessors","kind":262144,"children":[2453,2457,2422,2424,2426]},{"title":"Methods","kind":2048,"children":[2434,2436,2428,2431,2461,2489,2479]}],"sources":[{"fileName":"src/models/view.ts","line":36,"character":10}],"extendedTypes":[{"type":"reference","name":"AbstractModel","id":890,"typeArguments":[{"type":"reference","name":"ViewData"},{"type":"reference","name":"WatchableViewKey","id":2505}]}]},{"id":2034,"name":"ViewMetadataQueryResult","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Contains information about a view that isn't loaded by default e.g. field order and visible fields.","text":"In a React component, we recommend using {@link useViewMetadata} instead.\n","tags":[{"tag":"example","text":"\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = view.selectMetadata();\n    await viewMetadata.loadDataAsync();\n\n    console.log(viewMetadata.visibleFields);\n    // => [Field, Field, Field]\n\n    console.log(viewMetadata.allFields);\n    // => [Field, Field, Field, Field, Field]\n\n    viewMetadata.unloadData();\n}\n```"},{"tag":"docspath","text":"models/query results/ViewMetadataQueryResult\n"}]},"children":[{"id":2042,"name":"parentView","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/models/view_metadata_query_result.ts","line":92,"character":23}],"type":{"type":"reference","name":"View","id":2404}},{"id":2065,"name":"allFields","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"Returns every field in the table in the order they appear in this view. Watchable."},"getSignature":[{"id":2066,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Returns every field in the table in the order they appear in this view. Watchable."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Field","id":1724}]}}],"sources":[{"fileName":"src/models/view_metadata_query_result.ts","line":173,"character":17}]},{"id":2102,"name":"id","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The ID for this model."},"getSignature":[{"id":2103,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The ID for this model."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":55,"character":10}],"inheritedFrom":{"type":"reference","name":"AbstractModel.id","id":904}},{"id":2089,"name":"isDataLoaded","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{},"getSignature":[{"id":2090,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDataLoaded","id":1031}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":111,"character":20}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDataLoaded","id":1031}},{"id":2087,"name":"isDeleted","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"getSignature":[{"id":2088,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"tags":[{"tag":"inheritdoc","text":""}]},"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDeleted","id":1029}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":104,"character":17}],"overwrites":{"type":"reference","name":"AbstractModel.isDeleted","id":910},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.isDeleted","id":1029}},{"id":2067,"name":"visibleFields","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"Returns every field visible in this view. Watchable."},"getSignature":[{"id":2068,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Returns every field visible in this view. Watchable."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Field","id":1724}]}}],"sources":[{"fileName":"src/models/view_metadata_query_result.ts","line":182,"character":21}]},{"id":2091,"name":"loadDataAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.","text":"Returns a Promise that will resolve once the data is loaded.\n"},"signatures":[{"id":2092,"name":"loadDataAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.","text":"Returns a Promise that will resolve once the data is loaded.\n"},"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.loadDataAsync","id":1039}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":133,"character":23}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.loadDataAsync","id":1039}},{"id":2108,"name":"toString","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"A string representation of the model for use in debugging."},"signatures":[{"id":2109,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A string representation of the model for use in debugging."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}}],"sources":[{"fileName":"src/models/abstract_model.ts","line":96,"character":12}],"inheritedFrom":{"type":"reference","name":"AbstractModel.toString","id":914}},{"id":2093,"name":"unloadData","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{},"signatures":[{"id":2094,"name":"unloadData","kind":4096,"kindString":"Call signature","flags":{},"comment":{},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unloadData","id":1041}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":169,"character":14}],"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unloadData","id":1041}},{"id":2082,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"signatures":[{"id":2083,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"parameters":[{"id":2084,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"WatchableViewMetadataKey","id":2135},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableViewMetadataKey","id":2135}]}]}},{"id":2085,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":2086,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableViewMetadataKey","id":2135}]},"overwrites":{"type":"reference","name":"Watchable.unwatch","id":439},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unwatch","id":1024}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":86,"character":11}],"overwrites":{"type":"reference","name":"Watchable.unwatch","id":439},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.unwatch","id":1024}},{"id":2077,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"signatures":[{"id":2078,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.","tags":[{"tag":"inheritdoc","text":"\n"}]},"parameters":[{"id":2079,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"WatchableViewMetadataKey","id":2135},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableViewMetadataKey","id":2135}]}]}},{"id":2080,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":2081,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableViewMetadataKey","id":2135}]},"overwrites":{"type":"reference","name":"Watchable.watch","id":429},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.watch","id":1019}}],"sources":[{"fileName":"src/models/abstract_model_with_async_data.ts","line":60,"character":9}],"overwrites":{"type":"reference","name":"Watchable.watch","id":429},"inheritedFrom":{"type":"reference","name":"AbstractModelWithAsyncData.watch","id":1019}}],"groups":[{"title":"Properties","kind":1024,"children":[2042]},{"title":"Accessors","kind":262144,"children":[2065,2102,2089,2087,2067]},{"title":"Methods","kind":2048,"children":[2091,2108,2093,2082,2077]}],"sources":[{"fileName":"src/models/view_metadata_query_result.ts","line":70,"character":29}],"extendedTypes":[{"type":"reference","name":"AbstractModelWithAsyncData","id":1003,"typeArguments":[{"type":"reference","name":"ViewMetadata"},{"type":"reference","name":"WatchableViewMetadataKey","id":2135}]}]},{"id":128,"name":"ViewId","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/view.ts","line":8,"character":18}],"type":{"type":"intrinsic","name":"string"}},{"id":2505,"name":"WatchableViewKey","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A key in {@link View} that can be watched.\n- `name`"},"sources":[{"fileName":"src/models/view.ts","line":29,"character":28}],"type":{"type":"stringLiteral","value":"name"}},{"id":2135,"name":"WatchableViewMetadataKey","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"A key in {@link ViewMetadataQueryResult} that can be watched.\n- `allFields`\n- `visibleFields`\n- `isDataLoaded`"},"sources":[{"fileName":"src/models/view_metadata_query_result.ts","line":25,"character":29}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"groupLevels"},{"type":"stringLiteral","value":"isDataLoaded"},{"type":"stringLiteral","value":"allFields"},{"type":"stringLiteral","value":"visibleFields"}]}}],"groups":[{"title":"Enumerations","kind":4,"children":[106]},{"title":"Classes","kind":128,"children":[2404,2034]},{"title":"Type aliases","kind":4194304,"children":[128,2505,2135]}],"sources":[{"fileName":"src/types/view.ts","line":1,"character":0}]},{"id":453,"name":"@airtable/blocks/models: globalConfig","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/types/global_config.ts","comment":{},"children":[{"id":454,"name":"GlobalConfigArray","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"An array of {@link GlobalConfigValue}s"},"sources":[{"fileName":"src/types/global_config.ts","line":12,"character":34}],"extendedTypes":[{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"GlobalConfigValue","id":685}]}]},{"id":669,"name":"GlobalConfigObject","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"An object containing {@link GlobalConfigValue|GlobalConfigValues}"},"indexSignature":[{"id":670,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"comment":{"shortText":"An object containing {@link GlobalConfigValue|GlobalConfigValues}"},"parameters":[{"id":671,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"reference","name":"GlobalConfigValue","id":685},{"type":"intrinsic","name":"undefined"}]}}],"sources":[{"fileName":"src/types/global_config.ts","line":14,"character":35}]},{"id":675,"name":"GlobalConfigUpdate","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"An instruction to set `path` within globalConfig to `value`."},"children":[{"id":676,"name":"path","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The path to update."},"sources":[{"fileName":"src/types/global_config.ts","line":35,"character":17}],"type":{"type":"reference","name":"GlobalConfigPath","id":681}},{"id":677,"name":"value","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The value at `path` after updating."},"sources":[{"fileName":"src/types/global_config.ts","line":37,"character":18}],"type":{"type":"union","types":[{"type":"reference","name":"GlobalConfigValue","id":685},{"type":"intrinsic","name":"undefined"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[676,677]}],"sources":[{"fileName":"src/types/global_config.ts","line":33,"character":35}]},{"id":678,"name":"PartialGlobalConfigUpdate","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"A version of {@link GlobalConfigUpdate} where not all values are yet known."},"children":[{"id":679,"name":"path","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The path to update."},"sources":[{"fileName":"src/types/global_config.ts","line":43,"character":17}],"type":{"type":"union","types":[{"type":"reference","name":"PartialGlobalConfigPath","id":683},{"type":"intrinsic","name":"undefined"}]}},{"id":680,"name":"value","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The value at `path` after updating."},"sources":[{"fileName":"src/types/global_config.ts","line":45,"character":18}],"type":{"type":"union","types":[{"type":"reference","name":"GlobalConfigValue","id":685},{"type":"intrinsic","name":"undefined"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[679,680]}],"sources":[{"fileName":"src/types/global_config.ts","line":41,"character":42}]},{"id":682,"name":"GlobalConfigKey","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A single top level key or a path into the global config object"},"sources":[{"fileName":"src/types/global_config.ts","line":6,"character":27}],"type":{"type":"union","types":[{"type":"reference","name":"GlobalConfigPath","id":681},{"type":"intrinsic","name":"string"}]}},{"id":681,"name":"GlobalConfigPath","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A path of keys indexing into the global config object"},"sources":[{"fileName":"src/types/global_config.ts","line":4,"character":28}],"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"intrinsic","name":"string"}]}},{"id":685,"name":"GlobalConfigValue","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"The types of value that can be stored in globalConfig."},"sources":[{"fileName":"src/types/global_config.ts","line":19,"character":29}],"type":{"type":"union","types":[{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"},{"type":"reference","name":"GlobalConfigArray","id":454},{"type":"reference","name":"GlobalConfigObject","id":669}]}},{"id":684,"name":"PartialGlobalConfigKey","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A {@link GlobalConfigKey} with some parts of the path/key unknown (`undefined`)"},"sources":[{"fileName":"src/types/global_config.ts","line":10,"character":34}],"type":{"type":"union","types":[{"type":"reference","name":"PartialGlobalConfigPath","id":683},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"undefined"}]}},{"id":683,"name":"PartialGlobalConfigPath","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A {@link GlobalConfigPath}, with some parts of the path unknown (`undefined`)"},"sources":[{"fileName":"src/types/global_config.ts","line":8,"character":35}],"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"undefined"}]}]}}],"groups":[{"title":"Interfaces","kind":256,"children":[454,669,675,678]},{"title":"Type aliases","kind":4194304,"children":[682,681,685,684,683]}],"sources":[{"fileName":"src/types/global_config.ts","line":1,"character":0}]},{"id":9677,"name":"@airtable/blocks/ui/system: All style props","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/all_styles_set.ts","comment":{},"children":[{"id":9678,"name":"AllStylesProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"In the Blocks SDK, UI components can be styled via a set of supported style props.\nThese style props (e.g. `width`, `margin`, `backgroundColor`) take a subset of\nsupported CSS properties and expose them as explicit React component props.","text":"Here is an example that uses the {@link Box} layout primitive:\n\n```\n<Box\n    display=\"flex\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    width=\"200px\"\n    height=\"200px\"\n>\n    Hello world\n</Box>\n```\n\nThis is equivalent to the following:\n\n```\n<div style={{\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '200px',\n    height: '200px',\n}}>\n    Hello world\n</div>\n```\n\nStyle props also provide access to Airtable's design tokens, including our color\npalette, typographic scale, and spacing scale. This allows developers to quickly\nbuild UIs that adhere to the Airtable design system. As an example, numbers passed\nto the `margin` or `padding` props are converted to our spacing scale, based on\npowers of two.\n\n```\n<Box margin={0} /> // margin: 0;\n<Box margin={1} /> // margin: 4px;\n<Box margin={2} /> // margin: 8px;\n<Box margin={3} /> // margin: 16px;\n\n// Negative margins are also supported\n<Box margin={-1} /> // margin: -4px;\n<Box margin={-2} /> // margin: -8px;\n<Box margin={-3} /> // margin: -16px;\n```\n\nTo override this behavior and use a specific pixel value (or other units, like percentages\nor ems/rems), you may pass a string like `200px`. However, this is generally discouraged,\nas these values don't adhere to the same grid/vertical rhythm as the rest of our components.\n\nAs another example, style props like `backgroundColor` and `textColor` accept\n{@link Colors|color names} that ensure visual consistency with the Airtable styleguide.\nLike the spacing scale, you can always opt out by passing in hex/rgb/hsl strings directly.\n\n```\n<Box backgroundColor=\"blue\" textColor=\"white\" />\n```\n\nEach component in our UI library exposes a particular subset of style props, documented as\nstyle prop interfaces. For more information, refer to the API reference for the specific\ncomponent that you're trying to use.\n\nAll supported style props:\n* {@link AppearanceSetProps|Appearance}\n* {@link DimensionsSetProps|Dimensions}\n* {@link FlexContainerSetProps|Flex container}\n* {@link FlexItemSetProps|Flex item}\n* {@link PositionSetProps|Position}\n* {@link SpacingSetProps|Spacing}\n* {@link TypographySetProps|Typography}\n* {@link DisplayProps|Display}\n* {@link OverflowProps|Overflow}\n","tags":[{"tag":"docspath","text":"UI/Style System/All styles\n"}]},"children":[{"id":9699,"name":"alignContent","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the alignment of a flex container's lines when there is extra space in the cross-axis. This property has no effect on a single-line flex container."},"sources":[{"fileName":"src/ui/system/flex_container/align_content.ts","line":10,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"AlignContentProperty"}]},"inheritedFrom":{"type":"reference","name":"AlignContentProps.alignContent","id":9243}},{"id":9700,"name":"alignItems","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the alignment of flex items on the cross-axis of a flex container."},"sources":[{"fileName":"src/ui/system/flex_container/align_items.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"AlignItemsProperty"}]},"inheritedFrom":{"type":"reference","name":"AlignItemsProps.alignItems","id":9251}},{"id":9709,"name":"alignSelf","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Aligns flex items of the current flex line, overriding the `alignItems` value."},"sources":[{"fileName":"src/ui/system/flex_item/align_self.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"AlignSelfProperty"}]},"inheritedFrom":{"type":"reference","name":"AlignSelfProps.alignSelf","id":9334}},{"id":9679,"name":"backgroundColor","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the background color of an element."},"sources":[{"fileName":"src/ui/system/appearance/background_color.ts","line":10,"character":19}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BackgroundColorProperty"}]},"inheritedFrom":{"type":"reference","name":"BackgroundColorProps.backgroundColor","id":9067}},{"id":9680,"name":"border","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets an element's border. It's a shorthand for `borderWidth`, `borderStyle`, and `borderColor`."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":19,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.border","id":9077}},{"id":9686,"name":"borderBottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's bottom border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":31,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderBottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderBottom","id":9083}},{"id":9683,"name":"borderColor","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the color of all sides of an element's border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":25,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderColorProperty"}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderColor","id":9080}},{"id":9687,"name":"borderLeft","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's left border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":33,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderLeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderLeft","id":9084}},{"id":9690,"name":"borderRadius","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."},"sources":[{"fileName":"src/ui/system/appearance/border_radius.ts","line":10,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderRadiusProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderRadiusProps.borderRadius","id":9123}},{"id":9685,"name":"borderRight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's right border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":29,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderRightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderRight","id":9082}},{"id":9682,"name":"borderStyle","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the line style for all four sides of an element's border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":23,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderStyleProperty"}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderStyle","id":9079}},{"id":9684,"name":"borderTop","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's top border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":27,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderTopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderTop","id":9081}},{"id":9681,"name":"borderWidth","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the widths of all four sides of an element's border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":21,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderWidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderWidth","id":9078}},{"id":9688,"name":"borderX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's left and right borders."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":35,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderX","id":9085}},{"id":9689,"name":"borderY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's top and bottom borders."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":37,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderY","id":9086}},{"id":9715,"name":"bottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/bottom.ts","line":11,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BottomProps.bottom","id":9410}},{"id":9691,"name":"boxShadow","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color."},"sources":[{"fileName":"src/ui/system/appearance/box_shadow.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BoxShadowProperty"}]},"inheritedFrom":{"type":"reference","name":"BoxShadowProps.boxShadow","id":9133}},{"id":9742,"name":"display","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."},"sources":[{"fileName":"src/ui/system/display.ts","line":14,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"DisplayProperty"}]},"inheritedFrom":{"type":"reference","name":"DisplayProps.display","id":9659}},{"id":9705,"name":"flex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."},"sources":[{"fileName":"src/ui/system/flex_item/flex.ts","line":10,"character":8}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"FlexProps.flex","id":9302}},{"id":9708,"name":"flexBasis","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the initial main size of a flex item."},"sources":[{"fileName":"src/ui/system/flex_item/flex_basis.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexBasisProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"FlexBasisProps.flexBasis","id":9326}},{"id":9701,"name":"flexDirection","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."},"sources":[{"fileName":"src/ui/system/flex_container/flex_direction.ts","line":10,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexDirectionProperty"}]},"inheritedFrom":{"type":"reference","name":"FlexDirectionProps.flexDirection","id":9259}},{"id":9706,"name":"flexGrow","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."},"sources":[{"fileName":"src/ui/system/flex_item/flex_grow.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]},"inheritedFrom":{"type":"reference","name":"FlexGrowProps.flexGrow","id":9310}},{"id":9707,"name":"flexShrink","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."},"sources":[{"fileName":"src/ui/system/flex_item/flex_shrink.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]},"inheritedFrom":{"type":"reference","name":"FlexShrinkProps.flexShrink","id":9318}},{"id":9702,"name":"flexWrap","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."},"sources":[{"fileName":"src/ui/system/flex_container/flex_wrap.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexWrapProperty"}]},"inheritedFrom":{"type":"reference","name":"FlexWrapProps.flexWrap","id":9267}},{"id":9732,"name":"fontFamily","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies a prioritized list of one or more font family names and/or generic family names for the selected element."},"sources":[{"fileName":"src/ui/system/typography/font_family.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FontFamilyProperty"}]},"inheritedFrom":{"type":"reference","name":"FontFamilyProps.fontFamily","id":9554}},{"id":9733,"name":"fontSize","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative length units."},"sources":[{"fileName":"src/ui/system/typography/font_size.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FontSizeProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"FontSizeProps.fontSize","id":9564}},{"id":9734,"name":"fontStyle","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets whether a font should be styled with a normal, italic, or oblique face."},"sources":[{"fileName":"src/ui/system/typography/font_style.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FontStyleProperty"}]},"inheritedFrom":{"type":"reference","name":"FontStyleProps.fontStyle","id":9574}},{"id":9735,"name":"fontWeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the weight (or boldness) of the font."},"sources":[{"fileName":"src/ui/system/typography/font_weight.ts","line":11,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"reference","name":"FontWeightProperty"},{"type":"intrinsic","name":"string"}]}]},"inheritedFrom":{"type":"reference","name":"FontWeightProps.fontWeight","id":9582}},{"id":9693,"name":"height","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the height of an element."},"sources":[{"fileName":"src/ui/system/dimensions/height.ts","line":10,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"HeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"HeightProps.height","id":9172}},{"id":9703,"name":"justifyContent","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the alignment of flex items on the main axis of a flex container."},"sources":[{"fileName":"src/ui/system/flex_container/justify_content.ts","line":10,"character":18}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"JustifyContentProperty"}]},"inheritedFrom":{"type":"reference","name":"JustifyContentProps.justifyContent","id":9275}},{"id":9716,"name":"left","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/left.ts","line":11,"character":8}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"LeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"LeftProps.left","id":9421}},{"id":9736,"name":"letterSpacing","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the spacing behavior between text characters."},"sources":[{"fileName":"src/ui/system/typography/letter_spacing.ts","line":10,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"reference","name":"LetterSpacingProperty","typeArguments":[{"type":"reference","name":"Length"}]},{"type":"intrinsic","name":"string"}]}]},"inheritedFrom":{"type":"reference","name":"LetterSpacingProps.letterSpacing","id":9592}},{"id":9737,"name":"lineHeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height."},"sources":[{"fileName":"src/ui/system/typography/line_height.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"LineHeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"LineHeightProps.lineHeight","id":9602}},{"id":9718,"name":"margin","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":17,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.margin","id":9453}},{"id":9721,"name":"marginBottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":23,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginBottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginBottom","id":9456}},{"id":9722,"name":"marginLeft","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":25,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginLeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginLeft","id":9457}},{"id":9720,"name":"marginRight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":21,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginRightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginRight","id":9455}},{"id":9719,"name":"marginTop","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":19,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginTopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginTop","id":9454}},{"id":9723,"name":"marginX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":27,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginX","id":9458}},{"id":9724,"name":"marginY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":29,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginY","id":9459}},{"id":9694,"name":"maxHeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `maxHeight`."},"sources":[{"fileName":"src/ui/system/dimensions/max_height.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MaxHeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MaxHeightProps.maxHeight","id":9182}},{"id":9695,"name":"maxWidth","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `maxWidth`."},"sources":[{"fileName":"src/ui/system/dimensions/max_width.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MaxWidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MaxWidthProps.maxWidth","id":9192}},{"id":9696,"name":"minHeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `minHeight`."},"sources":[{"fileName":"src/ui/system/dimensions/min_height.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MinHeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MinHeightProps.minHeight","id":9202}},{"id":9697,"name":"minWidth","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `minWidth`."},"sources":[{"fileName":"src/ui/system/dimensions/min_width.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MinWidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MinWidthProps.minWidth","id":9212}},{"id":9692,"name":"opacity","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the transparency of an element or the degree to which content behind an element is visible."},"sources":[{"fileName":"src/ui/system/appearance/opacity.ts","line":11,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"reference","name":"GlobalsNumber"},{"type":"intrinsic","name":"string"}]}]},"inheritedFrom":{"type":"reference","name":"OpacityProps.opacity","id":9143}},{"id":9711,"name":"order","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."},"sources":[{"fileName":"src/ui/system/flex_item/order.ts","line":10,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]},"inheritedFrom":{"type":"reference","name":"OrderProps.order","id":9350}},{"id":9743,"name":"overflow","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflowX` and `overflowY`."},"sources":[{"fileName":"src/ui/system/overflow.ts","line":14,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"OverflowProperty"}]},"inheritedFrom":{"type":"reference","name":"OverflowProps.overflow","id":9667}},{"id":9745,"name":"overflowX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content."},"sources":[{"fileName":"src/ui/system/overflow.ts","line":18,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"OverflowYProperty"}]},"inheritedFrom":{"type":"reference","name":"OverflowProps.overflowX","id":9669}},{"id":9744,"name":"overflowY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content."},"sources":[{"fileName":"src/ui/system/overflow.ts","line":16,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"OverflowXProperty"}]},"inheritedFrom":{"type":"reference","name":"OverflowProps.overflowY","id":9668}},{"id":9725,"name":"padding","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the padding area on all four sides of an element. It is a shorthand for `paddingTop`, `paddingRight`, `paddingBottom`, and `paddingLeft`."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":17,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.padding","id":9494}},{"id":9728,"name":"paddingBottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the height of the padding area on the bottom side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":23,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingBottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingBottom","id":9497}},{"id":9729,"name":"paddingLeft","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width of the padding area on the left side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":25,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingLeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingLeft","id":9498}},{"id":9727,"name":"paddingRight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width of the padding area on the right side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":21,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingRightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingRight","id":9496}},{"id":9726,"name":"paddingTop","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the height of the padding area on the top side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":19,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingTopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingTop","id":9495}},{"id":9730,"name":"paddingX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width of the padding area on the left and right sides of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":27,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingX","id":9499}},{"id":9731,"name":"paddingY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the height of the padding area on the top and bottom sides of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":29,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingY","id":9500}},{"id":9712,"name":"position","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."},"sources":[{"fileName":"src/ui/system/position/position.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PositionProperty"}]},"inheritedFrom":{"type":"reference","name":"PositionProps.position","id":9370}},{"id":9714,"name":"right","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/right.ts","line":11,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"RightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"RightProps.right","id":9399}},{"id":9738,"name":"textAlign","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the horizontal alignment of the text."},"sources":[{"fileName":"src/ui/system/typography/text_align.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TextAlignProperty"}]},"inheritedFrom":{"type":"reference","name":"TextAlignProps.textAlign","id":9610}},{"id":9739,"name":"textColor","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value.","tags":[{"tag":"see","text":"{@link colors}\n"}]},"sources":[{"fileName":"src/ui/system/typography/text_color.ts","line":14,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"ColorProperty"}]},"inheritedFrom":{"type":"reference","name":"TextColorProps.textColor","id":9618}},{"id":9740,"name":"textDecoration","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the appearance of decorative lines on text."},"sources":[{"fileName":"src/ui/system/typography/text_decoration.ts","line":12,"character":18}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TextDecorationProperty"}]},"inheritedFrom":{"type":"reference","name":"TextDecorationProps.textDecoration","id":9628}},{"id":9741,"name":"textTransform","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."},"sources":[{"fileName":"src/ui/system/typography/text_transform.ts","line":10,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TextTransformProperty"}]},"inheritedFrom":{"type":"reference","name":"TextTransformProps.textTransform","id":9636}},{"id":9713,"name":"top","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/top.ts","line":11,"character":7}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"TopProps.top","id":9388}},{"id":9698,"name":"width","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the width of an element."},"sources":[{"fileName":"src/ui/system/dimensions/width.ts","line":10,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"WidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"WidthProps.width","id":9222}},{"id":9717,"name":"zIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."},"sources":[{"fileName":"src/ui/system/position/z_index.ts","line":10,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"ZIndexProperty"}]},"inheritedFrom":{"type":"reference","name":"ZIndexProps.zIndex","id":9432}}],"groups":[{"title":"Properties","kind":1024,"children":[9699,9700,9709,9679,9680,9686,9683,9687,9690,9685,9682,9684,9681,9688,9689,9715,9691,9742,9705,9708,9701,9706,9707,9702,9732,9733,9734,9735,9693,9703,9716,9736,9737,9718,9721,9722,9720,9719,9723,9724,9694,9695,9696,9697,9692,9711,9743,9745,9744,9725,9728,9729,9727,9726,9730,9731,9712,9714,9738,9739,9740,9741,9713,9698,9717]}],"sources":[{"fileName":"src/ui/system/all_styles_set.ts","line":113,"character":31}],"extendedTypes":[{"type":"reference","name":"AppearanceSetProps","id":9152},{"type":"reference","name":"DimensionsSetProps","id":9231},{"type":"reference","name":"FlexContainerSetProps","id":9290},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"SpacingSetProps","id":9534},{"type":"reference","name":"TypographySetProps","id":9643},{"type":"reference","name":"DisplayProps","id":9658},{"type":"reference","name":"OverflowProps","id":9666}],"extendedBy":[{"type":"reference","name":"BoxProps","id":12227},{"type":"reference","name":"TextProps","id":14189},{"type":"reference","name":"HeadingProps","id":14913},{"type":"reference","name":"LabelProps","id":15181}]}],"groups":[{"title":"Interfaces","kind":256,"children":[9678]}],"sources":[{"fileName":"src/ui/system/all_styles_set.ts","line":1,"character":0}]},{"id":9065,"name":"@airtable/blocks/ui/system: Appearance","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/appearance/background_color.ts","comment":{},"children":[{"id":9152,"name":"AppearanceSetProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for the visual appearance of an element.","tags":[{"tag":"docspath","text":"UI/Style System/Appearance\n"}]},"children":[{"id":9153,"name":"backgroundColor","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the background color of an element."},"sources":[{"fileName":"src/ui/system/appearance/background_color.ts","line":10,"character":19}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BackgroundColorProperty"}]},"inheritedFrom":{"type":"reference","name":"BackgroundColorProps.backgroundColor","id":9067}},{"id":9154,"name":"border","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets an element's border. It's a shorthand for `borderWidth`, `borderStyle`, and `borderColor`."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":19,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.border","id":9077}},{"id":9160,"name":"borderBottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's bottom border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":31,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderBottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderBottom","id":9083}},{"id":9157,"name":"borderColor","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the color of all sides of an element's border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":25,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderColorProperty"}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderColor","id":9080}},{"id":9161,"name":"borderLeft","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's left border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":33,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderLeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderLeft","id":9084}},{"id":9164,"name":"borderRadius","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."},"sources":[{"fileName":"src/ui/system/appearance/border_radius.ts","line":10,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderRadiusProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderRadiusProps.borderRadius","id":9123}},{"id":9159,"name":"borderRight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's right border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":29,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderRightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderRight","id":9082}},{"id":9156,"name":"borderStyle","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the line style for all four sides of an element's border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":23,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderStyleProperty"}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderStyle","id":9079}},{"id":9158,"name":"borderTop","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's top border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":27,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderTopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderTop","id":9081}},{"id":9155,"name":"borderWidth","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the widths of all four sides of an element's border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":21,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderWidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderWidth","id":9078}},{"id":9162,"name":"borderX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's left and right borders."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":35,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderX","id":9085}},{"id":9163,"name":"borderY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's top and bottom borders."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":37,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BorderProps.borderY","id":9086}},{"id":9165,"name":"boxShadow","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color."},"sources":[{"fileName":"src/ui/system/appearance/box_shadow.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BoxShadowProperty"}]},"inheritedFrom":{"type":"reference","name":"BoxShadowProps.boxShadow","id":9133}},{"id":9166,"name":"opacity","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the transparency of an element or the degree to which content behind an element is visible."},"sources":[{"fileName":"src/ui/system/appearance/opacity.ts","line":11,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"reference","name":"GlobalsNumber"},{"type":"intrinsic","name":"string"}]}]},"inheritedFrom":{"type":"reference","name":"OpacityProps.opacity","id":9143}}],"groups":[{"title":"Properties","kind":1024,"children":[9153,9154,9160,9157,9161,9164,9159,9156,9158,9155,9162,9163,9165,9166]}],"sources":[{"fileName":"src/ui/system/appearance/appearance_set.ts","line":15,"character":35}],"extendedTypes":[{"type":"reference","name":"BackgroundColorProps","id":9066},{"type":"reference","name":"BorderProps","id":9076},{"type":"reference","name":"BorderRadiusProps","id":9122},{"type":"reference","name":"BoxShadowProps","id":9132},{"type":"reference","name":"OpacityProps","id":9142}],"extendedBy":[{"type":"reference","name":"AllStylesProps","id":9678}]},{"id":9066,"name":"BackgroundColorProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9067,"name":"backgroundColor","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the background color of an element."},"sources":[{"fileName":"src/ui/system/appearance/background_color.ts","line":10,"character":19}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BackgroundColorProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9067]}],"sources":[{"fileName":"src/ui/system/appearance/background_color.ts","line":8,"character":37}],"extendedBy":[{"type":"reference","name":"AppearanceSetProps","id":9152},{"type":"reference","name":"ProgressBarStyleProps","id":12727},{"type":"reference","name":"SwitchStyleProps","id":13784}]},{"id":9076,"name":"BorderProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9077,"name":"border","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets an element's border. It's a shorthand for `borderWidth`, `borderStyle`, and `borderColor`."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":19,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9083,"name":"borderBottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's bottom border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":31,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderBottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9080,"name":"borderColor","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the color of all sides of an element's border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":25,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderColorProperty"}]}},{"id":9084,"name":"borderLeft","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's left border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":33,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderLeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9082,"name":"borderRight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's right border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":29,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderRightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9079,"name":"borderStyle","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the line style for all four sides of an element's border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":23,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderStyleProperty"}]}},{"id":9081,"name":"borderTop","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's top border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":27,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderTopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9078,"name":"borderWidth","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the widths of all four sides of an element's border."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":21,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderWidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9085,"name":"borderX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's left and right borders."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":35,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9086,"name":"borderY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width, line style, and color for an element's top and bottom borders."},"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":37,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9077,9083,9080,9084,9082,9079,9081,9078,9085,9086]}],"sources":[{"fileName":"src/ui/system/appearance/border.ts","line":17,"character":28}],"extendedBy":[{"type":"reference","name":"AppearanceSetProps","id":9152}]},{"id":9122,"name":"BorderRadiusProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9123,"name":"borderRadius","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."},"sources":[{"fileName":"src/ui/system/appearance/border_radius.ts","line":10,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BorderRadiusProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9123]}],"sources":[{"fileName":"src/ui/system/appearance/border_radius.ts","line":8,"character":34}],"extendedBy":[{"type":"reference","name":"AppearanceSetProps","id":9152},{"type":"reference","name":"DialogCloseButtonStyleProps","id":14599}]},{"id":9132,"name":"BoxShadowProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9133,"name":"boxShadow","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color."},"sources":[{"fileName":"src/ui/system/appearance/box_shadow.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BoxShadowProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9133]}],"sources":[{"fileName":"src/ui/system/appearance/box_shadow.ts","line":8,"character":31}],"extendedBy":[{"type":"reference","name":"AppearanceSetProps","id":9152}]},{"id":9142,"name":"OpacityProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9143,"name":"opacity","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the transparency of an element or the degree to which content behind an element is visible."},"sources":[{"fileName":"src/ui/system/appearance/opacity.ts","line":11,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"reference","name":"GlobalsNumber"},{"type":"intrinsic","name":"string"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9143]}],"sources":[{"fileName":"src/ui/system/appearance/opacity.ts","line":8,"character":29}],"extendedBy":[{"type":"reference","name":"AppearanceSetProps","id":9152}]}],"groups":[{"title":"Interfaces","kind":256,"children":[9152,9066,9076,9122,9132,9142]}],"sources":[{"fileName":"src/ui/system/appearance/background_color.ts","line":1,"character":0}]},{"id":10631,"name":"@airtable/blocks/ui/system: Control sizes","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/control_sizes.ts","comment":{},"children":[{"id":10632,"name":"ControlSize","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"Sizes for the {@link Button}, {@link Input}, {@link Select}, {@link SelectButtons}, and {@link Switch} components."},"sources":[{"fileName":"src/ui/control_sizes.ts","line":13,"character":23}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"small"},{"type":"stringLiteral","value":"default"},{"type":"stringLiteral","value":"large"}]}},{"id":10635,"name":"ControlSizeProp","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"Size prop for the {@link Button}, {@link Input}, {@link Select}, {@link SelectButtons}, and {@link Switch} components."},"sources":[{"fileName":"src/ui/control_sizes.ts","line":19,"character":27}],"type":{"type":"reference","name":"ResponsiveProp","id":9060,"typeArguments":[{"type":"reference","name":"ControlSize","id":10632}]}}],"groups":[{"title":"Type aliases","kind":4194304,"children":[10632,10635]}],"sources":[{"fileName":"src/ui/control_sizes.ts","line":1,"character":0}]},{"id":9170,"name":"@airtable/blocks/ui/system: Dimensions","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/dimensions/height.ts","comment":{},"children":[{"id":9231,"name":"DimensionsSetProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for the dimensions of an element.","tags":[{"tag":"docspath","text":"UI/Style System/Dimensions\n"}]},"children":[{"id":9232,"name":"height","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the height of an element."},"sources":[{"fileName":"src/ui/system/dimensions/height.ts","line":10,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"HeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"HeightProps.height","id":9172}},{"id":9233,"name":"maxHeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `maxHeight`."},"sources":[{"fileName":"src/ui/system/dimensions/max_height.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MaxHeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MaxHeightProps.maxHeight","id":9182}},{"id":9234,"name":"maxWidth","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `maxWidth`."},"sources":[{"fileName":"src/ui/system/dimensions/max_width.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MaxWidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MaxWidthProps.maxWidth","id":9192}},{"id":9235,"name":"minHeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `minHeight`."},"sources":[{"fileName":"src/ui/system/dimensions/min_height.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MinHeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MinHeightProps.minHeight","id":9202}},{"id":9236,"name":"minWidth","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `minWidth`."},"sources":[{"fileName":"src/ui/system/dimensions/min_width.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MinWidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MinWidthProps.minWidth","id":9212}},{"id":9237,"name":"width","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the width of an element."},"sources":[{"fileName":"src/ui/system/dimensions/width.ts","line":10,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"WidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"WidthProps.width","id":9222}}],"groups":[{"title":"Properties","kind":1024,"children":[9232,9233,9234,9235,9236,9237]}],"sources":[{"fileName":"src/ui/system/dimensions/dimensions_set.ts","line":16,"character":35}],"extendedTypes":[{"type":"reference","name":"HeightProps","id":9171},{"type":"reference","name":"MaxHeightProps","id":9181},{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinHeightProps","id":9201},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221}],"extendedBy":[{"type":"reference","name":"AllStylesProps","id":9678},{"type":"reference","name":"RecordCardListStyleProps","id":13202},{"type":"reference","name":"DialogCloseButtonStyleProps","id":14599},{"type":"reference","name":"DialogStyleProps","id":14741}]},{"id":9171,"name":"HeightProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9172,"name":"height","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the height of an element."},"sources":[{"fileName":"src/ui/system/dimensions/height.ts","line":10,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"HeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9172]}],"sources":[{"fileName":"src/ui/system/dimensions/height.ts","line":8,"character":28}],"extendedBy":[{"type":"reference","name":"DimensionsSetProps","id":9231},{"type":"reference","name":"ProgressBarStyleProps","id":12727}]},{"id":9181,"name":"MaxHeightProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9182,"name":"maxHeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `maxHeight`."},"sources":[{"fileName":"src/ui/system/dimensions/max_height.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MaxHeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9182]}],"sources":[{"fileName":"src/ui/system/dimensions/max_height.ts","line":8,"character":31}],"extendedBy":[{"type":"reference","name":"DimensionsSetProps","id":9231}]},{"id":9191,"name":"MaxWidthProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9192,"name":"maxWidth","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `maxWidth`."},"sources":[{"fileName":"src/ui/system/dimensions/max_width.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MaxWidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9192]}],"sources":[{"fileName":"src/ui/system/dimensions/max_width.ts","line":8,"character":30}],"extendedBy":[{"type":"reference","name":"DimensionsSetProps","id":9231},{"type":"reference","name":"SelectStyleProps","id":10654},{"type":"reference","name":"InputStyleProps","id":11527},{"type":"reference","name":"CellRendererStyleProps","id":11821},{"type":"reference","name":"ColorPaletteStyleProps","id":12347},{"type":"reference","name":"ProgressBarStyleProps","id":12727},{"type":"reference","name":"SelectButtonsStyleProps","id":13446},{"type":"reference","name":"SwitchStyleProps","id":13784},{"type":"reference","name":"ButtonStyleProps","id":14091},{"type":"reference","name":"FormFieldStyleProps","id":15271},{"type":"reference","name":"LinkStyleProps","id":15348},{"type":"reference","name":"TextButtonStyleProps","id":15781}]},{"id":9201,"name":"MinHeightProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9202,"name":"minHeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `minHeight`."},"sources":[{"fileName":"src/ui/system/dimensions/min_height.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MinHeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9202]}],"sources":[{"fileName":"src/ui/system/dimensions/min_height.ts","line":8,"character":31}],"extendedBy":[{"type":"reference","name":"DimensionsSetProps","id":9231}]},{"id":9211,"name":"MinWidthProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9212,"name":"minWidth","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `minWidth`."},"sources":[{"fileName":"src/ui/system/dimensions/min_width.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MinWidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9212]}],"sources":[{"fileName":"src/ui/system/dimensions/min_width.ts","line":8,"character":30}],"extendedBy":[{"type":"reference","name":"DimensionsSetProps","id":9231},{"type":"reference","name":"SelectStyleProps","id":10654},{"type":"reference","name":"InputStyleProps","id":11527},{"type":"reference","name":"CellRendererStyleProps","id":11821},{"type":"reference","name":"ColorPaletteStyleProps","id":12347},{"type":"reference","name":"ProgressBarStyleProps","id":12727},{"type":"reference","name":"SelectButtonsStyleProps","id":13446},{"type":"reference","name":"SwitchStyleProps","id":13784},{"type":"reference","name":"ButtonStyleProps","id":14091},{"type":"reference","name":"FormFieldStyleProps","id":15271},{"type":"reference","name":"LinkStyleProps","id":15348},{"type":"reference","name":"TextButtonStyleProps","id":15781}]},{"id":9221,"name":"WidthProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9222,"name":"width","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the width of an element."},"sources":[{"fileName":"src/ui/system/dimensions/width.ts","line":10,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"WidthProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9222]}],"sources":[{"fileName":"src/ui/system/dimensions/width.ts","line":8,"character":27}],"extendedBy":[{"type":"reference","name":"DimensionsSetProps","id":9231},{"type":"reference","name":"SelectStyleProps","id":10654},{"type":"reference","name":"InputStyleProps","id":11527},{"type":"reference","name":"CellRendererStyleProps","id":11821},{"type":"reference","name":"ColorPaletteStyleProps","id":12347},{"type":"reference","name":"ProgressBarStyleProps","id":12727},{"type":"reference","name":"SelectButtonsStyleProps","id":13446},{"type":"reference","name":"SwitchStyleProps","id":13784},{"type":"reference","name":"ButtonStyleProps","id":14091},{"type":"reference","name":"FormFieldStyleProps","id":15271},{"type":"reference","name":"LinkStyleProps","id":15348},{"type":"reference","name":"TextButtonStyleProps","id":15781}]}],"groups":[{"title":"Interfaces","kind":256,"children":[9231,9171,9181,9191,9201,9211,9221]}],"sources":[{"fileName":"src/ui/system/dimensions/height.ts","line":1,"character":0}]},{"id":9657,"name":"@airtable/blocks/ui/system: Display","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/display.ts","comment":{},"children":[{"id":9658,"name":"DisplayProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style prop for the display type of an element.","tags":[{"tag":"docspath","text":"UI/Style System/Display\n"}]},"children":[{"id":9659,"name":"display","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."},"sources":[{"fileName":"src/ui/system/display.ts","line":14,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"DisplayProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9659]}],"sources":[{"fileName":"src/ui/system/display.ts","line":12,"character":29}],"extendedBy":[{"type":"reference","name":"AllStylesProps","id":9678},{"type":"reference","name":"DialogCloseButtonStyleProps","id":14599}]}],"groups":[{"title":"Interfaces","kind":256,"children":[9658]}],"sources":[{"fileName":"src/ui/system/display.ts","line":1,"character":0}]},{"id":9241,"name":"@airtable/blocks/ui/system: Flex container","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/flex_container/align_content.ts","comment":{},"children":[{"id":9242,"name":"AlignContentProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9243,"name":"alignContent","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the alignment of a flex container's lines when there is extra space in the cross-axis. This property has no effect on a single-line flex container."},"sources":[{"fileName":"src/ui/system/flex_container/align_content.ts","line":10,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"AlignContentProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9243]}],"sources":[{"fileName":"src/ui/system/flex_container/align_content.ts","line":8,"character":34}],"extendedBy":[{"type":"reference","name":"FlexContainerSetProps","id":9290}]},{"id":9250,"name":"AlignItemsProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9251,"name":"alignItems","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the alignment of flex items on the cross-axis of a flex container."},"sources":[{"fileName":"src/ui/system/flex_container/align_items.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"AlignItemsProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9251]}],"sources":[{"fileName":"src/ui/system/flex_container/align_items.ts","line":8,"character":32}],"extendedBy":[{"type":"reference","name":"FlexContainerSetProps","id":9290}]},{"id":9290,"name":"FlexContainerSetProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for a flex container element.","tags":[{"tag":"docspath","text":"UI/Style System/FlexContainer\n"}]},"children":[{"id":9291,"name":"alignContent","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the alignment of a flex container's lines when there is extra space in the cross-axis. This property has no effect on a single-line flex container."},"sources":[{"fileName":"src/ui/system/flex_container/align_content.ts","line":10,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"AlignContentProperty"}]},"inheritedFrom":{"type":"reference","name":"AlignContentProps.alignContent","id":9243}},{"id":9292,"name":"alignItems","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the alignment of flex items on the cross-axis of a flex container."},"sources":[{"fileName":"src/ui/system/flex_container/align_items.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"AlignItemsProperty"}]},"inheritedFrom":{"type":"reference","name":"AlignItemsProps.alignItems","id":9251}},{"id":9293,"name":"flexDirection","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."},"sources":[{"fileName":"src/ui/system/flex_container/flex_direction.ts","line":10,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexDirectionProperty"}]},"inheritedFrom":{"type":"reference","name":"FlexDirectionProps.flexDirection","id":9259}},{"id":9294,"name":"flexWrap","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."},"sources":[{"fileName":"src/ui/system/flex_container/flex_wrap.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexWrapProperty"}]},"inheritedFrom":{"type":"reference","name":"FlexWrapProps.flexWrap","id":9267}},{"id":9295,"name":"justifyContent","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the alignment of flex items on the main axis of a flex container."},"sources":[{"fileName":"src/ui/system/flex_container/justify_content.ts","line":10,"character":18}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"JustifyContentProperty"}]},"inheritedFrom":{"type":"reference","name":"JustifyContentProps.justifyContent","id":9275}}],"groups":[{"title":"Properties","kind":1024,"children":[9291,9292,9293,9294,9295]}],"sources":[{"fileName":"src/ui/system/flex_container/flex_container_set.ts","line":16,"character":38}],"extendedTypes":[{"type":"reference","name":"AlignContentProps","id":9242},{"type":"reference","name":"AlignItemsProps","id":9250},{"type":"reference","name":"FlexDirectionProps","id":9258},{"type":"reference","name":"FlexWrapProps","id":9266},{"type":"reference","name":"JustifyContentProps","id":9274},{"type":"reference","name":"JustifyItemsProps"}],"extendedBy":[{"type":"reference","name":"AllStylesProps","id":9678},{"type":"reference","name":"DialogCloseButtonStyleProps","id":14599},{"type":"reference","name":"DialogStyleProps","id":14741}]},{"id":9258,"name":"FlexDirectionProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9259,"name":"flexDirection","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."},"sources":[{"fileName":"src/ui/system/flex_container/flex_direction.ts","line":10,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexDirectionProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9259]}],"sources":[{"fileName":"src/ui/system/flex_container/flex_direction.ts","line":8,"character":35}],"extendedBy":[{"type":"reference","name":"FlexContainerSetProps","id":9290}]},{"id":9266,"name":"FlexWrapProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9267,"name":"flexWrap","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."},"sources":[{"fileName":"src/ui/system/flex_container/flex_wrap.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexWrapProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9267]}],"sources":[{"fileName":"src/ui/system/flex_container/flex_wrap.ts","line":8,"character":30}],"extendedBy":[{"type":"reference","name":"FlexContainerSetProps","id":9290}]},{"id":9274,"name":"JustifyContentProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9275,"name":"justifyContent","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the alignment of flex items on the main axis of a flex container."},"sources":[{"fileName":"src/ui/system/flex_container/justify_content.ts","line":10,"character":18}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"JustifyContentProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9275]}],"sources":[{"fileName":"src/ui/system/flex_container/justify_content.ts","line":8,"character":36}],"extendedBy":[{"type":"reference","name":"FlexContainerSetProps","id":9290}]}],"groups":[{"title":"Interfaces","kind":256,"children":[9242,9250,9290,9258,9266,9274]}],"sources":[{"fileName":"src/ui/system/flex_container/align_content.ts","line":1,"character":0}]},{"id":9300,"name":"@airtable/blocks/ui/system: Flex item","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/flex_item/flex.ts","comment":{},"children":[{"id":9333,"name":"AlignSelfProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9334,"name":"alignSelf","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Aligns flex items of the current flex line, overriding the `alignItems` value."},"sources":[{"fileName":"src/ui/system/flex_item/align_self.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"AlignSelfProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9334]}],"sources":[{"fileName":"src/ui/system/flex_item/align_self.ts","line":8,"character":31}],"extendedBy":[{"type":"reference","name":"FlexItemSetProps","id":9357}]},{"id":9325,"name":"FlexBasisProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9326,"name":"flexBasis","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the initial main size of a flex item."},"sources":[{"fileName":"src/ui/system/flex_item/flex_basis.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexBasisProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9326]}],"sources":[{"fileName":"src/ui/system/flex_item/flex_basis.ts","line":8,"character":31}],"extendedBy":[{"type":"reference","name":"FlexItemSetProps","id":9357}]},{"id":9309,"name":"FlexGrowProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9310,"name":"flexGrow","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."},"sources":[{"fileName":"src/ui/system/flex_item/flex_grow.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9310]}],"sources":[{"fileName":"src/ui/system/flex_item/flex_grow.ts","line":8,"character":30}],"extendedBy":[{"type":"reference","name":"FlexItemSetProps","id":9357}]},{"id":9357,"name":"FlexItemSetProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for a flex item element.","tags":[{"tag":"docspath","text":"UI/Style System/FlexItem\n"}]},"children":[{"id":9362,"name":"alignSelf","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Aligns flex items of the current flex line, overriding the `alignItems` value."},"sources":[{"fileName":"src/ui/system/flex_item/align_self.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"AlignSelfProperty"}]},"inheritedFrom":{"type":"reference","name":"AlignSelfProps.alignSelf","id":9334}},{"id":9358,"name":"flex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."},"sources":[{"fileName":"src/ui/system/flex_item/flex.ts","line":10,"character":8}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"FlexProps.flex","id":9302}},{"id":9361,"name":"flexBasis","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the initial main size of a flex item."},"sources":[{"fileName":"src/ui/system/flex_item/flex_basis.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexBasisProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"FlexBasisProps.flexBasis","id":9326}},{"id":9359,"name":"flexGrow","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."},"sources":[{"fileName":"src/ui/system/flex_item/flex_grow.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]},"inheritedFrom":{"type":"reference","name":"FlexGrowProps.flexGrow","id":9310}},{"id":9360,"name":"flexShrink","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."},"sources":[{"fileName":"src/ui/system/flex_item/flex_shrink.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]},"inheritedFrom":{"type":"reference","name":"FlexShrinkProps.flexShrink","id":9318}},{"id":9364,"name":"order","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."},"sources":[{"fileName":"src/ui/system/flex_item/order.ts","line":10,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]},"inheritedFrom":{"type":"reference","name":"OrderProps.order","id":9350}}],"groups":[{"title":"Properties","kind":1024,"children":[9362,9358,9361,9359,9360,9364]}],"sources":[{"fileName":"src/ui/system/flex_item/flex_item_set.ts","line":17,"character":33}],"extendedTypes":[{"type":"reference","name":"FlexProps","id":9301},{"type":"reference","name":"FlexGrowProps","id":9309},{"type":"reference","name":"FlexShrinkProps","id":9317},{"type":"reference","name":"FlexBasisProps","id":9325},{"type":"reference","name":"AlignSelfProps","id":9333},{"type":"reference","name":"JustifySelfProps"},{"type":"reference","name":"OrderProps","id":9349}],"extendedBy":[{"type":"reference","name":"AllStylesProps","id":9678},{"type":"reference","name":"SelectStyleProps","id":10654},{"type":"reference","name":"InputStyleProps","id":11527},{"type":"reference","name":"CellRendererStyleProps","id":11821},{"type":"reference","name":"IconStyleProps","id":12037},{"type":"reference","name":"ColorPaletteStyleProps","id":12347},{"type":"reference","name":"ProgressBarStyleProps","id":12727},{"type":"reference","name":"RecordCardStyleProps","id":12871},{"type":"reference","name":"RecordCardListStyleProps","id":13202},{"type":"reference","name":"SelectButtonsStyleProps","id":13446},{"type":"reference","name":"SwitchStyleProps","id":13784},{"type":"reference","name":"ButtonStyleProps","id":14091},{"type":"reference","name":"ChoiceTokenStyleProps","id":14297},{"type":"reference","name":"CollaboratorTokenStyleProps","id":14367},{"type":"reference","name":"DialogCloseButtonStyleProps","id":14599},{"type":"reference","name":"FormFieldStyleProps","id":15271},{"type":"reference","name":"LinkStyleProps","id":15348},{"type":"reference","name":"LoaderStyleProps","id":15467},{"type":"reference","name":"TextButtonStyleProps","id":15781}]},{"id":9301,"name":"FlexProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9302,"name":"flex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."},"sources":[{"fileName":"src/ui/system/flex_item/flex.ts","line":10,"character":8}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9302]}],"sources":[{"fileName":"src/ui/system/flex_item/flex.ts","line":8,"character":26}],"extendedBy":[{"type":"reference","name":"FlexItemSetProps","id":9357}]},{"id":9317,"name":"FlexShrinkProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9318,"name":"flexShrink","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."},"sources":[{"fileName":"src/ui/system/flex_item/flex_shrink.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9318]}],"sources":[{"fileName":"src/ui/system/flex_item/flex_shrink.ts","line":8,"character":32}],"extendedBy":[{"type":"reference","name":"FlexItemSetProps","id":9357}]},{"id":9349,"name":"OrderProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9350,"name":"order","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."},"sources":[{"fileName":"src/ui/system/flex_item/order.ts","line":10,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9350]}],"sources":[{"fileName":"src/ui/system/flex_item/order.ts","line":8,"character":27}],"extendedBy":[{"type":"reference","name":"FlexItemSetProps","id":9357}]}],"groups":[{"title":"Interfaces","kind":256,"children":[9333,9325,9309,9357,9301,9317,9349]}],"sources":[{"fileName":"src/ui/system/flex_item/flex.ts","line":1,"character":0}]},{"id":9665,"name":"@airtable/blocks/ui/system: Overflow","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/overflow.ts","comment":{},"children":[{"id":9666,"name":"OverflowProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for the overflow behavior of an element.","tags":[{"tag":"docspath","text":"UI/Style System/Overflow\n"}]},"children":[{"id":9667,"name":"overflow","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflowX` and `overflowY`."},"sources":[{"fileName":"src/ui/system/overflow.ts","line":14,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"OverflowProperty"}]}},{"id":9669,"name":"overflowX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content."},"sources":[{"fileName":"src/ui/system/overflow.ts","line":18,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"OverflowYProperty"}]}},{"id":9668,"name":"overflowY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content."},"sources":[{"fileName":"src/ui/system/overflow.ts","line":16,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"OverflowXProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9667,9669,9668]}],"sources":[{"fileName":"src/ui/system/overflow.ts","line":12,"character":30}],"extendedBy":[{"type":"reference","name":"AllStylesProps","id":9678}]}],"groups":[{"title":"Interfaces","kind":256,"children":[9666]}],"sources":[{"fileName":"src/ui/system/overflow.ts","line":1,"character":0}]},{"id":9368,"name":"@airtable/blocks/ui/system: Position","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/position/position.ts","comment":{},"children":[{"id":9409,"name":"BottomProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9410,"name":"bottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/bottom.ts","line":11,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9410]}],"sources":[{"fileName":"src/ui/system/position/bottom.ts","line":9,"character":28}],"extendedBy":[{"type":"reference","name":"PositionSetProps","id":9441}]},{"id":9420,"name":"LeftProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9421,"name":"left","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/left.ts","line":11,"character":8}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"LeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9421]}],"sources":[{"fileName":"src/ui/system/position/left.ts","line":9,"character":26}],"extendedBy":[{"type":"reference","name":"PositionSetProps","id":9441}]},{"id":9369,"name":"PositionProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9370,"name":"position","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."},"sources":[{"fileName":"src/ui/system/position/position.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PositionProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9370]}],"sources":[{"fileName":"src/ui/system/position/position.ts","line":8,"character":30}],"extendedBy":[{"type":"reference","name":"PositionSetProps","id":9441}]},{"id":9441,"name":"PositionSetProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for the position of an element.","tags":[{"tag":"docspath","text":"UI/Style System/Position\n"}]},"children":[{"id":9445,"name":"bottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/bottom.ts","line":11,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BottomProps.bottom","id":9410}},{"id":9446,"name":"left","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/left.ts","line":11,"character":8}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"LeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"LeftProps.left","id":9421}},{"id":9442,"name":"position","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."},"sources":[{"fileName":"src/ui/system/position/position.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PositionProperty"}]},"inheritedFrom":{"type":"reference","name":"PositionProps.position","id":9370}},{"id":9444,"name":"right","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/right.ts","line":11,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"RightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"RightProps.right","id":9399}},{"id":9443,"name":"top","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/top.ts","line":11,"character":7}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"TopProps.top","id":9388}},{"id":9447,"name":"zIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."},"sources":[{"fileName":"src/ui/system/position/z_index.ts","line":10,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"ZIndexProperty"}]},"inheritedFrom":{"type":"reference","name":"ZIndexProps.zIndex","id":9432}}],"groups":[{"title":"Properties","kind":1024,"children":[9445,9446,9442,9444,9443,9447]}],"sources":[{"fileName":"src/ui/system/position/position_set.ts","line":16,"character":33}],"extendedTypes":[{"type":"reference","name":"PositionProps","id":9369},{"type":"reference","name":"TopProps","id":9387},{"type":"reference","name":"RightProps","id":9398},{"type":"reference","name":"BottomProps","id":9409},{"type":"reference","name":"LeftProps","id":9420},{"type":"reference","name":"ZIndexProps","id":9431}],"extendedBy":[{"type":"reference","name":"AllStylesProps","id":9678},{"type":"reference","name":"SelectStyleProps","id":10654},{"type":"reference","name":"InputStyleProps","id":11527},{"type":"reference","name":"CellRendererStyleProps","id":11821},{"type":"reference","name":"IconStyleProps","id":12037},{"type":"reference","name":"ColorPaletteStyleProps","id":12347},{"type":"reference","name":"ProgressBarStyleProps","id":12727},{"type":"reference","name":"RecordCardStyleProps","id":12871},{"type":"reference","name":"RecordCardListStyleProps","id":13202},{"type":"reference","name":"SelectButtonsStyleProps","id":13446},{"type":"reference","name":"SwitchStyleProps","id":13784},{"type":"reference","name":"ButtonStyleProps","id":14091},{"type":"reference","name":"ChoiceTokenStyleProps","id":14297},{"type":"reference","name":"CollaboratorTokenStyleProps","id":14367},{"type":"reference","name":"DialogCloseButtonStyleProps","id":14599},{"type":"reference","name":"FormFieldStyleProps","id":15271},{"type":"reference","name":"LinkStyleProps","id":15348},{"type":"reference","name":"LoaderStyleProps","id":15467},{"type":"reference","name":"TextButtonStyleProps","id":15781}]},{"id":9398,"name":"RightProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9399,"name":"right","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/right.ts","line":11,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"RightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9399]}],"sources":[{"fileName":"src/ui/system/position/right.ts","line":9,"character":27}],"extendedBy":[{"type":"reference","name":"PositionSetProps","id":9441}]},{"id":9387,"name":"TopProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9388,"name":"top","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/top.ts","line":11,"character":7}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9388]}],"sources":[{"fileName":"src/ui/system/position/top.ts","line":9,"character":25}],"extendedBy":[{"type":"reference","name":"PositionSetProps","id":9441}]},{"id":9431,"name":"ZIndexProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9432,"name":"zIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."},"sources":[{"fileName":"src/ui/system/position/z_index.ts","line":10,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"ZIndexProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9432]}],"sources":[{"fileName":"src/ui/system/position/z_index.ts","line":8,"character":28}],"extendedBy":[{"type":"reference","name":"PositionSetProps","id":9441}]}],"groups":[{"title":"Interfaces","kind":256,"children":[9409,9420,9369,9441,9398,9387,9431]}],"sources":[{"fileName":"src/ui/system/position/position.ts","line":1,"character":0}]},{"id":9052,"name":"@airtable/blocks/ui/system: Responsive props","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/utils/types.ts","comment":{},"children":[{"id":9053,"name":"ResponsivePropObject","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"An object that specifies the responsive behavior of a {@link ResponsiveProp}.\nFor each viewport size, you may specify the value that will be used for\nthe prop. This is equivalent to defining a media query in CSS."},"typeParameter":[{"id":9054,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":9058,"name":"largeViewport","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the value of this responsive prop in a large viewport."},"sources":[{"fileName":"src/ui/system/utils/types.ts","line":16,"character":17}],"type":{"type":"reference","name":"T","id":9054}},{"id":9057,"name":"mediumViewport","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the value of this responsive prop in a medium viewport."},"sources":[{"fileName":"src/ui/system/utils/types.ts","line":14,"character":18}],"type":{"type":"reference","name":"T","id":9054}},{"id":9056,"name":"smallViewport","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the value of this responsive prop in a small viewport."},"sources":[{"fileName":"src/ui/system/utils/types.ts","line":12,"character":17}],"type":{"type":"reference","name":"T","id":9054}},{"id":9055,"name":"xsmallViewport","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the value of this responsive prop in an extra small viewport."},"sources":[{"fileName":"src/ui/system/utils/types.ts","line":10,"character":18}],"type":{"type":"reference","name":"T","id":9054}}],"groups":[{"title":"Properties","kind":1024,"children":[9058,9057,9056,9055]}],"sources":[{"fileName":"src/ui/system/utils/types.ts","line":8,"character":37}]},{"id":9062,"name":"OptionalResponsiveProp","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"An optional {@link ResponsiveProp} that can be null or undefined."},"typeParameter":[{"id":9063,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/system/utils/types.ts","line":32,"character":34}],"type":{"type":"union","types":[{"type":"reference","name":"ResponsiveProp","id":9060,"typeArguments":[{"type":"typeParameter","name":"T"}]},{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"null"}]}},{"id":9060,"name":"ResponsiveProp","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A React component prop that may vary based on the viewport width.\nYou can either pass in a single value that applies to all viewports\nor a {@link ResponsivePropObject} that specifies responsive behavior."},"typeParameter":[{"id":9061,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/system/utils/types.ts","line":27,"character":26}],"type":{"type":"union","types":[{"type":"typeParameter","name":"T"},{"type":"reference","name":"ResponsivePropObject","id":9053,"typeArguments":[{"type":"typeParameter","name":"T"}]}]}}],"groups":[{"title":"Interfaces","kind":256,"children":[9053]},{"title":"Type aliases","kind":4194304,"children":[9062,9060]}],"sources":[{"fileName":"src/ui/system/utils/types.ts","line":1,"character":0}]},{"id":9451,"name":"@airtable/blocks/ui/system: Spacing","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/spacing/margin.ts","comment":{},"children":[{"id":9452,"name":"MarginProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9453,"name":"margin","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":17,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9456,"name":"marginBottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":23,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginBottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9457,"name":"marginLeft","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":25,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginLeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9455,"name":"marginRight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":21,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginRightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9454,"name":"marginTop","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":19,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginTopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9458,"name":"marginX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":27,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9459,"name":"marginY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":29,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9453,9456,9457,9455,9454,9458,9459]}],"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":15,"character":28}],"extendedBy":[{"type":"reference","name":"SpacingSetProps","id":9534},{"type":"reference","name":"SelectStyleProps","id":10654},{"type":"reference","name":"InputStyleProps","id":11527},{"type":"reference","name":"CellRendererStyleProps","id":11821},{"type":"reference","name":"IconStyleProps","id":12037},{"type":"reference","name":"ColorPaletteStyleProps","id":12347},{"type":"reference","name":"ProgressBarStyleProps","id":12727},{"type":"reference","name":"RecordCardStyleProps","id":12871},{"type":"reference","name":"RecordCardListStyleProps","id":13202},{"type":"reference","name":"SelectButtonsStyleProps","id":13446},{"type":"reference","name":"ButtonStyleProps","id":14091},{"type":"reference","name":"ChoiceTokenStyleProps","id":14297},{"type":"reference","name":"CollaboratorTokenStyleProps","id":14367},{"type":"reference","name":"LoaderStyleProps","id":15467}]},{"id":9493,"name":"PaddingProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9494,"name":"padding","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the padding area on all four sides of an element. It is a shorthand for `paddingTop`, `paddingRight`, `paddingBottom`, and `paddingLeft`."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":17,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9497,"name":"paddingBottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the height of the padding area on the bottom side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":23,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingBottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9498,"name":"paddingLeft","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width of the padding area on the left side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":25,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingLeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9496,"name":"paddingRight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width of the padding area on the right side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":21,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingRightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9495,"name":"paddingTop","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the height of the padding area on the top side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":19,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingTopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9499,"name":"paddingX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width of the padding area on the left and right sides of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":27,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}},{"id":9500,"name":"paddingY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the height of the padding area on the top and bottom sides of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":29,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9494,9497,9498,9496,9495,9499,9500]}],"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":15,"character":29}],"extendedBy":[{"type":"reference","name":"SpacingSetProps","id":9534}]},{"id":9534,"name":"SpacingSetProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for the spacing of an element.","tags":[{"tag":"docspath","text":"UI/Style System/Spacing\n"}]},"children":[{"id":9535,"name":"margin","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":17,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.margin","id":9453}},{"id":9538,"name":"marginBottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":23,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginBottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginBottom","id":9456}},{"id":9539,"name":"marginLeft","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":25,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginLeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginLeft","id":9457}},{"id":9537,"name":"marginRight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":21,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginRightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginRight","id":9455}},{"id":9536,"name":"marginTop","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":19,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginTopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginTop","id":9454}},{"id":9540,"name":"marginX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":27,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginX","id":9458}},{"id":9541,"name":"marginY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":29,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginY","id":9459}},{"id":9542,"name":"padding","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the padding area on all four sides of an element. It is a shorthand for `paddingTop`, `paddingRight`, `paddingBottom`, and `paddingLeft`."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":17,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.padding","id":9494}},{"id":9545,"name":"paddingBottom","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the height of the padding area on the bottom side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":23,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingBottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingBottom","id":9497}},{"id":9546,"name":"paddingLeft","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width of the padding area on the left side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":25,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingLeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingLeft","id":9498}},{"id":9544,"name":"paddingRight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width of the padding area on the right side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":21,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingRightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingRight","id":9496}},{"id":9543,"name":"paddingTop","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the height of the padding area on the top side of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":19,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingTopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingTop","id":9495}},{"id":9547,"name":"paddingX","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the width of the padding area on the left and right sides of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":27,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingX","id":9499}},{"id":9548,"name":"paddingY","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the height of the padding area on the top and bottom sides of an element."},"sources":[{"fileName":"src/ui/system/spacing/padding.ts","line":29,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PaddingProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"PaddingProps.paddingY","id":9500}}],"groups":[{"title":"Properties","kind":1024,"children":[9535,9538,9539,9537,9536,9540,9541,9542,9545,9546,9544,9543,9547,9548]}],"sources":[{"fileName":"src/ui/system/spacing/spacing_set.ts","line":12,"character":32}],"extendedTypes":[{"type":"reference","name":"MarginProps","id":9452},{"type":"reference","name":"PaddingProps","id":9493}],"extendedBy":[{"type":"reference","name":"AllStylesProps","id":9678},{"type":"reference","name":"SwitchStyleProps","id":13784},{"type":"reference","name":"DialogCloseButtonStyleProps","id":14599},{"type":"reference","name":"DialogStyleProps","id":14741},{"type":"reference","name":"FormFieldStyleProps","id":15271},{"type":"reference","name":"LinkStyleProps","id":15348},{"type":"reference","name":"TextButtonStyleProps","id":15781}]}],"groups":[{"title":"Interfaces","kind":256,"children":[9452,9493,9534]}],"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":1,"character":0}]},{"id":9552,"name":"@airtable/blocks/ui/system: Typography","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/system/typography/font_family.ts","comment":{},"children":[{"id":9553,"name":"FontFamilyProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9554,"name":"fontFamily","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies a prioritized list of one or more font family names and/or generic family names for the selected element."},"sources":[{"fileName":"src/ui/system/typography/font_family.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FontFamilyProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9554]}],"sources":[{"fileName":"src/ui/system/typography/font_family.ts","line":8,"character":32}],"extendedBy":[{"type":"reference","name":"TypographySetProps","id":9643}]},{"id":9563,"name":"FontSizeProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9564,"name":"fontSize","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative length units."},"sources":[{"fileName":"src/ui/system/typography/font_size.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FontSizeProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9564]}],"sources":[{"fileName":"src/ui/system/typography/font_size.ts","line":8,"character":30}],"extendedBy":[{"type":"reference","name":"TypographySetProps","id":9643}]},{"id":9573,"name":"FontStyleProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9574,"name":"fontStyle","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets whether a font should be styled with a normal, italic, or oblique face."},"sources":[{"fileName":"src/ui/system/typography/font_style.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FontStyleProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9574]}],"sources":[{"fileName":"src/ui/system/typography/font_style.ts","line":8,"character":31}],"extendedBy":[{"type":"reference","name":"TypographySetProps","id":9643}]},{"id":9581,"name":"FontWeightProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9582,"name":"fontWeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the weight (or boldness) of the font."},"sources":[{"fileName":"src/ui/system/typography/font_weight.ts","line":11,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"reference","name":"FontWeightProperty"},{"type":"intrinsic","name":"string"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9582]}],"sources":[{"fileName":"src/ui/system/typography/font_weight.ts","line":8,"character":32}],"extendedBy":[{"type":"reference","name":"TypographySetProps","id":9643},{"type":"reference","name":"LinkStyleProps","id":15348}]},{"id":9591,"name":"LetterSpacingProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9592,"name":"letterSpacing","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the spacing behavior between text characters."},"sources":[{"fileName":"src/ui/system/typography/letter_spacing.ts","line":10,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"reference","name":"LetterSpacingProperty","typeArguments":[{"type":"reference","name":"Length"}]},{"type":"intrinsic","name":"string"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9592]}],"sources":[{"fileName":"src/ui/system/typography/letter_spacing.ts","line":8,"character":35}],"extendedBy":[{"type":"reference","name":"TypographySetProps","id":9643}]},{"id":9601,"name":"LineHeightProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9602,"name":"lineHeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height."},"sources":[{"fileName":"src/ui/system/typography/line_height.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"LineHeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9602]}],"sources":[{"fileName":"src/ui/system/typography/line_height.ts","line":8,"character":32}],"extendedBy":[{"type":"reference","name":"TypographySetProps","id":9643}]},{"id":9609,"name":"TextAlignProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9610,"name":"textAlign","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the horizontal alignment of the text."},"sources":[{"fileName":"src/ui/system/typography/text_align.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TextAlignProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9610]}],"sources":[{"fileName":"src/ui/system/typography/text_align.ts","line":8,"character":31}],"extendedBy":[{"type":"reference","name":"TypographySetProps","id":9643}]},{"id":9617,"name":"TextColorProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9618,"name":"textColor","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value.","tags":[{"tag":"see","text":"{@link colors}\n"}]},"sources":[{"fileName":"src/ui/system/typography/text_color.ts","line":14,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"ColorProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9618]}],"sources":[{"fileName":"src/ui/system/typography/text_color.ts","line":8,"character":31}],"extendedBy":[{"type":"reference","name":"TypographySetProps","id":9643}]},{"id":9627,"name":"TextDecorationProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9628,"name":"textDecoration","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the appearance of decorative lines on text."},"sources":[{"fileName":"src/ui/system/typography/text_decoration.ts","line":12,"character":18}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TextDecorationProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9628]}],"sources":[{"fileName":"src/ui/system/typography/text_decoration.ts","line":8,"character":36}],"extendedBy":[{"type":"reference","name":"TypographySetProps","id":9643}]},{"id":9635,"name":"TextTransformProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":9636,"name":"textTransform","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."},"sources":[{"fileName":"src/ui/system/typography/text_transform.ts","line":10,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TextTransformProperty"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[9636]}],"sources":[{"fileName":"src/ui/system/typography/text_transform.ts","line":8,"character":35}],"extendedBy":[{"type":"reference","name":"TypographySetProps","id":9643}]},{"id":9643,"name":"TypographySetProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for the typography of an element.","tags":[{"tag":"docspath","text":"UI/Style System/Typography\n"}]},"children":[{"id":9644,"name":"fontFamily","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies a prioritized list of one or more font family names and/or generic family names for the selected element."},"sources":[{"fileName":"src/ui/system/typography/font_family.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FontFamilyProperty"}]},"inheritedFrom":{"type":"reference","name":"FontFamilyProps.fontFamily","id":9554}},{"id":9645,"name":"fontSize","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative length units."},"sources":[{"fileName":"src/ui/system/typography/font_size.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FontSizeProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"FontSizeProps.fontSize","id":9564}},{"id":9646,"name":"fontStyle","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets whether a font should be styled with a normal, italic, or oblique face."},"sources":[{"fileName":"src/ui/system/typography/font_style.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FontStyleProperty"}]},"inheritedFrom":{"type":"reference","name":"FontStyleProps.fontStyle","id":9574}},{"id":9647,"name":"fontWeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies the weight (or boldness) of the font."},"sources":[{"fileName":"src/ui/system/typography/font_weight.ts","line":11,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"reference","name":"FontWeightProperty"},{"type":"intrinsic","name":"string"}]}]},"inheritedFrom":{"type":"reference","name":"FontWeightProps.fontWeight","id":9582}},{"id":9648,"name":"letterSpacing","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the spacing behavior between text characters."},"sources":[{"fileName":"src/ui/system/typography/letter_spacing.ts","line":10,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"reference","name":"LetterSpacingProperty","typeArguments":[{"type":"reference","name":"Length"}]},{"type":"intrinsic","name":"string"}]}]},"inheritedFrom":{"type":"reference","name":"LetterSpacingProps.letterSpacing","id":9592}},{"id":9649,"name":"lineHeight","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height."},"sources":[{"fileName":"src/ui/system/typography/line_height.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"LineHeightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"LineHeightProps.lineHeight","id":9602}},{"id":9650,"name":"textAlign","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the horizontal alignment of the text."},"sources":[{"fileName":"src/ui/system/typography/text_align.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TextAlignProperty"}]},"inheritedFrom":{"type":"reference","name":"TextAlignProps.textAlign","id":9610}},{"id":9651,"name":"textColor","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value.","tags":[{"tag":"see","text":"{@link colors}\n"}]},"sources":[{"fileName":"src/ui/system/typography/text_color.ts","line":14,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"ColorProperty"}]},"inheritedFrom":{"type":"reference","name":"TextColorProps.textColor","id":9618}},{"id":9652,"name":"textDecoration","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Sets the appearance of decorative lines on text."},"sources":[{"fileName":"src/ui/system/typography/text_decoration.ts","line":12,"character":18}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TextDecorationProperty"}]},"inheritedFrom":{"type":"reference","name":"TextDecorationProps.textDecoration","id":9628}},{"id":9653,"name":"textTransform","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."},"sources":[{"fileName":"src/ui/system/typography/text_transform.ts","line":10,"character":17}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TextTransformProperty"}]},"inheritedFrom":{"type":"reference","name":"TextTransformProps.textTransform","id":9636}}],"groups":[{"title":"Properties","kind":1024,"children":[9644,9645,9646,9647,9648,9649,9650,9651,9652,9653]}],"sources":[{"fileName":"src/ui/system/typography/typography_set.ts","line":20,"character":35}],"extendedTypes":[{"type":"reference","name":"FontFamilyProps","id":9553},{"type":"reference","name":"FontSizeProps","id":9563},{"type":"reference","name":"FontStyleProps","id":9573},{"type":"reference","name":"FontWeightProps","id":9581},{"type":"reference","name":"LetterSpacingProps","id":9591},{"type":"reference","name":"LineHeightProps","id":9601},{"type":"reference","name":"TextAlignProps","id":9609},{"type":"reference","name":"TextColorProps","id":9617},{"type":"reference","name":"TextDecorationProps","id":9627},{"type":"reference","name":"TextTransformProps","id":9635}],"extendedBy":[{"type":"reference","name":"AllStylesProps","id":9678}]}],"groups":[{"title":"Interfaces","kind":256,"children":[9553,9563,9573,9581,9591,9601,9609,9617,9627,9635,9643]}],"sources":[{"fileName":"src/ui/system/typography/font_family.ts","line":1,"character":0}]},{"id":12199,"name":"@airtable/blocks/ui/types: Aria props","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/types/aria_props.ts","comment":{},"children":[{"id":12200,"name":"AriaProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":12204,"name":"aria-controls","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Identifies the element (or elements) whose contents or presence are controlled by the current element."},"sources":[{"fileName":"src/ui/types/aria_props.ts","line":14,"character":21}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12203,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Identifies the element (or elements) that describes the current object."},"sources":[{"fileName":"src/ui/types/aria_props.ts","line":12,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12205,"name":"aria-expanded","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."},"sources":[{"fileName":"src/ui/types/aria_props.ts","line":16,"character":21}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"},{"type":"stringLiteral","value":"false"},{"type":"stringLiteral","value":"true"}]}},{"id":12206,"name":"aria-haspopup","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."},"sources":[{"fileName":"src/ui/types/aria_props.ts","line":18,"character":21}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"},{"type":"stringLiteral","value":"dialog"},{"type":"stringLiteral","value":"menu"},{"type":"stringLiteral","value":"listbox"},{"type":"stringLiteral","value":"grid"},{"type":"stringLiteral","value":"false"},{"type":"stringLiteral","value":"true"},{"type":"stringLiteral","value":"tree"}]}},{"id":12207,"name":"aria-hidden","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Indicates whether the element is exposed to an accessibility API."},"sources":[{"fileName":"src/ui/types/aria_props.ts","line":20,"character":19}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"},{"type":"stringLiteral","value":"false"},{"type":"stringLiteral","value":"true"}]}},{"id":12201,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Defines a string value that labels the current element."},"sources":[{"fileName":"src/ui/types/aria_props.ts","line":8,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12202,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Identifies the element (or elements) that labels the current object."},"sources":[{"fileName":"src/ui/types/aria_props.ts","line":10,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12208,"name":"aria-live","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."},"sources":[{"fileName":"src/ui/types/aria_props.ts","line":22,"character":17}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"stringLiteral","value":"off"},{"type":"stringLiteral","value":"assertive"},{"type":"stringLiteral","value":"polite"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[12204,12203,12205,12206,12207,12201,12202,12208]}],"sources":[{"fileName":"src/ui/types/aria_props.ts","line":6,"character":26}],"extendedBy":[{"type":"reference","name":"BoxProps","id":12227},{"type":"reference","name":"ButtonProps","id":14116},{"type":"reference","name":"TextProps","id":14189},{"type":"reference","name":"HeadingProps","id":14913},{"type":"reference","name":"LabelProps","id":15181},{"type":"reference","name":"LinkProps","id":15381},{"type":"reference","name":"TextButtonProps","id":15813}]}],"groups":[{"title":"Interfaces","kind":256,"children":[12200]}],"sources":[{"fileName":"src/ui/types/aria_props.ts","line":1,"character":0}]},{"id":12226,"name":"@airtable/blocks/ui: Box","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/box.tsx","comment":{},"children":[{"id":12227,"name":"BoxProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props for the Box component. Also accepts:\n* {@link AllStylesProps}\n* {@link AriaProps}","tags":[{"tag":"docspath","text":"UI/components/Box"}]},"typeParameter":[{"id":12311,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":12228,"name":"as","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The element that is rendered. Defaults to `div`."},"sources":[{"fileName":"src/ui/box.tsx","line":21,"character":6}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"div"},{"type":"stringLiteral","value":"span"},{"type":"stringLiteral","value":"section"},{"type":"stringLiteral","value":"main"},{"type":"stringLiteral","value":"nav"},{"type":"stringLiteral","value":"header"},{"type":"stringLiteral","value":"footer"},{"type":"stringLiteral","value":"aside"},{"type":"stringLiteral","value":"article"},{"type":"stringLiteral","value":"address"},{"type":"stringLiteral","value":"hgroup"},{"type":"stringLiteral","value":"blockquote"},{"type":"stringLiteral","value":"figure"},{"type":"stringLiteral","value":"figcaption"},{"type":"stringLiteral","value":"ol"},{"type":"stringLiteral","value":"ul"},{"type":"stringLiteral","value":"li"},{"type":"stringLiteral","value":"pre"}]}},{"id":12229,"name":"children","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The contents of the box."},"sources":[{"fileName":"src/ui/box.tsx","line":41,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]}},{"id":12233,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply, separated by spaces."},"sources":[{"fileName":"src/ui/box.tsx","line":49,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12235,"name":"dataAttributes","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."},"sources":[{"fileName":"src/ui/box.tsx","line":53,"character":18}],"type":{"type":"reference","name":"DataAttributesProp"}},{"id":12232,"name":"id","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/box.tsx","line":47,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12231,"name":"role","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `role` attribute."},"sources":[{"fileName":"src/ui/box.tsx","line":45,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12234,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles."},"sources":[{"fileName":"src/ui/box.tsx","line":51,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":12230,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `tabIndex` attribute."},"sources":[{"fileName":"src/ui/box.tsx","line":43,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[12228,12229,12233,12235,12232,12231,12234,12230]}],"sources":[{"fileName":"src/ui/box.tsx","line":19,"character":25}],"extendedTypes":[{"type":"reference","name":"AllStylesProps","id":9678},{"type":"reference","name":"AriaProps","id":12200},{"type":"reference","name":"TooltipAnchorProps"}]},{"id":12325,"name":"Box","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A box component for creating layouts.","text":"[[ Story id=\"box--example\" title=\"Box example\" ]]\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/Box\n"}]},"signatures":[{"id":12326,"name":"Box","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A box component for creating layouts.","text":"[[ Story id=\"box--example\" title=\"Box example\" ]]\n"},"parameters":[{"id":12327,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"BoxProps","id":12227}},{"id":12328,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/box.tsx","line":64,"character":9}]}],"groups":[{"title":"Interfaces","kind":256,"children":[12227]},{"title":"Functions","kind":64,"children":[12325]}],"sources":[{"fileName":"src/ui/box.tsx","line":1,"character":0}]},{"id":14090,"name":"@airtable/blocks/ui: Button","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/button.tsx","comment":{},"children":[{"id":14116,"name":"ButtonProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Button} component. Also accepts:\n* {@link AriaProps}\n* {@link ButtonStyleProps}","tags":[{"tag":"docspath","text":"UI/components/Button\n"}]},"children":[{"id":14131,"name":"aria-selected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-selected` attribute."},"sources":[{"fileName":"src/ui/button.tsx","line":139,"character":19}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":14124,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The contents of the button."},"sources":[{"fileName":"src/ui/button.tsx","line":129,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]}},{"id":14129,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra `className`s to apply to the button, separated by spaces."},"sources":[{"fileName":"src/ui/button.tsx","line":135,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14122,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Indicates whether or not the user can interact with the button."},"sources":[{"fileName":"src/ui/button.tsx","line":123,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":14119,"name":"icon","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The name of the icon or a React node. For more details, see the {@link IconName|list of supported icons}."},"sources":[{"fileName":"src/ui/button.tsx","line":117,"character":8}],"type":{"type":"union","types":[{"type":"reference","name":"IconName","id":12025},{"type":"reference","name":"ReactElement"}]}},{"id":14121,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/button.tsx","line":121,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14125,"name":"onClick","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Click event handler. Also handles Space and Enter keypress events."},"sources":[{"fileName":"src/ui/button.tsx","line":133,"character":11}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":14126,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":14127,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":14128,"name":"e","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"React.MouseEvent","typeArguments":[{"type":"reference","name":"HTMLButtonElement"}]}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]},"overwrites":{"type":"reference","name":"TooltipAnchorProps.onClick"}},{"id":14117,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the button. Defaults to `default`. Can be a responsive prop object."},"sources":[{"fileName":"src/ui/button.tsx","line":113,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635}},{"id":14130,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra styles to apply to the button."},"sources":[{"fileName":"src/ui/button.tsx","line":137,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":14123,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Indicates if the button can be focused and if/where it participates in sequential keyboard navigation."},"sources":[{"fileName":"src/ui/button.tsx","line":125,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":14120,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The type of the button. Defaults to `button`."},"sources":[{"fileName":"src/ui/button.tsx","line":119,"character":8}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"button"},{"type":"stringLiteral","value":"submit"},{"type":"stringLiteral","value":"reset"}]}},{"id":14118,"name":"variant","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The variant of the button. Defaults to `default`."},"sources":[{"fileName":"src/ui/button.tsx","line":115,"character":11}],"type":{"type":"reference","name":"ButtonVariant","id":14176}}],"groups":[{"title":"Properties","kind":1024,"children":[14131,14124,14129,14122,14119,14121,14125,14117,14130,14123,14120,14118]}],"sources":[{"fileName":"src/ui/button.tsx","line":111,"character":21}],"extendedTypes":[{"type":"reference","name":"AriaProps","id":12200},{"type":"reference","name":"ButtonStyleProps","id":14091},{"type":"reference","name":"TooltipAnchorProps","typeArguments":[{"type":"reference","name":"HTMLButtonElement"}]}]},{"id":14091,"name":"ButtonStyleProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Style props for the {@link Button} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"},"children":[{"id":14092,"name":"display","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."},"sources":[{"fileName":"src/ui/button.tsx","line":59,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"stringLiteral","value":"inline-flex"},{"type":"stringLiteral","value":"flex"},{"type":"stringLiteral","value":"none"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[14092]}],"sources":[{"fileName":"src/ui/button.tsx","line":51,"character":26}],"extendedTypes":[{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"ButtonProps","id":14116}]},{"id":14176,"name":"ButtonVariant","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Variants for the {@link Button} component:","text":"• **default**\n\nGray button for toolbars and other generic actions.\n\n• **primary**\n\nBlue button used for primary actions and CTAs. There should only be one primary button present at a time. Often used in {@link Dialog} and bottom bars.\n\n• **secondary**\n\nTransparent button that pairs with the primary button. This is typically used for cancel or back buttons.\n\n• **danger**\n\nRed button that replaces primary buttons for dangerous or otherwise difficult-to-reverse actions like record deletion.\n"},"sources":[{"fileName":"src/ui/button.tsx","line":93,"character":18}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"default"},{"type":"stringLiteral","value":"danger"},{"type":"stringLiteral","value":"primary"},{"type":"stringLiteral","value":"secondary"}]}},{"id":14183,"name":"Button","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"Clickable button component.","text":"[[ Story id=\"button--example\" title=\"Box example\" ]]\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/Button\n"}]},"signatures":[{"id":14184,"name":"Button","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clickable button component.","text":"[[ Story id=\"button--example\" title=\"Box example\" ]]\n"},"parameters":[{"id":14185,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ButtonProps","id":14116}},{"id":14186,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLButtonElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/button.tsx","line":150,"character":12}]}],"groups":[{"title":"Interfaces","kind":256,"children":[14116,14091]},{"title":"Type aliases","kind":4194304,"children":[14176]},{"title":"Functions","kind":64,"children":[14183]}],"sources":[{"fileName":"src/ui/button.tsx","line":1,"character":0}]},{"id":11820,"name":"@airtable/blocks/ui: CellRenderer","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/cell_renderer.tsx","comment":{},"children":[{"id":11898,"name":"CellRenderer","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Displays the contents of a cell given a field and record.","text":"[[ Story id=\"cellrenderer--example\" title=\"Cell renderer example\" ]]\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/CellRenderer\n"}]},"typeParameter":[{"id":11925,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}},{"id":11926,"name":"SS","kind":131072,"kindString":"Type parameter","flags":{}},{"id":11967,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":118,"character":25}],"extendedTypes":[{"type":"reference","name":"Component","typeArguments":[{"type":"reference","name":"CellRendererProps","id":11846}]}]},{"id":11846,"name":"CellRendererProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link CellRenderer} component. Also accepts:\n* {@link CellRendererStyleProps}","tags":[{"tag":"docspath","text":"UI/components/CellRenderer"}]},"children":[{"id":11853,"name":"cellClassName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the cell itself, separated by spaces."},"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":101,"character":17}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11854,"name":"cellStyle","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the cell itself."},"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":103,"character":13}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":11848,"name":"cellValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The cell value to render. Either `record` or `cellValue` must be provided to the CellRenderer. If both are provided, `record` will be used."},"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":89,"character":13}],"type":{"type":"intrinsic","name":"unknown"}},{"id":11851,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the cell renderer container, separated by spaces."},"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":95,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11849,"name":"field","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The {@link Field} for a given {@link Record} being rendered as a cell."},"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":91,"character":9}],"type":{"type":"reference","name":"Field","id":1724}},{"id":11847,"name":"record","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The {@link Record} from which to render a cell. Either `record` or `cellValue` must be provided to the CellRenderer. If both are provided, `record` will be used."},"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":87,"character":10}],"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"undefined"}]}},{"id":11855,"name":"renderInvalidCellValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Render function if provided and validation fails."},"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":105,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":11856,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":11857,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11858,"name":"cellValue","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":11859,"name":"field","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Field","id":1724}}],"type":{"type":"reference","name":"ReactElement"}}]}}]}},{"id":11850,"name":"shouldWrap","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether to wrap cell contents. Defaults to true."},"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":93,"character":14}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":11852,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the cell renderer container."},"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":97,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[11853,11854,11848,11851,11849,11847,11855,11850,11852]}],"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":85,"character":27}],"extendedTypes":[{"type":"reference","name":"CellRendererStyleProps","id":11821},{"type":"reference","name":"TooltipAnchorProps","typeArguments":[{"type":"reference","name":"HTMLDivElement"}]}]},{"id":11821,"name":"CellRendererStyleProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Style props for the {@link CellRenderer} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"},"children":[{"id":11822,"name":"display","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."},"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":62,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"stringLiteral","value":"block"},{"type":"stringLiteral","value":"inline"},{"type":"stringLiteral","value":"inline-block"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[11822]}],"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":54,"character":32}],"extendedTypes":[{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"MarginProps","id":9452},{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"WidthProps","id":9221}],"extendedBy":[{"type":"reference","name":"CellRendererProps","id":11846}]}],"groups":[{"title":"Classes","kind":128,"children":[11898]},{"title":"Interfaces","kind":256,"children":[11846,11821]}],"sources":[{"fileName":"src/ui/cell_renderer.tsx","line":1,"character":0}]},{"id":14296,"name":"@airtable/blocks/ui: ChoiceToken","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/choice_token.tsx","comment":{},"children":[{"id":14318,"name":"ChoiceOption","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"An option from a select field. You should not create these objects from scratch, but should instead grab them from base data."},"children":[{"id":14321,"name":"color","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The color of the select option."},"sources":[{"fileName":"src/ui/choice_token.tsx","line":52,"character":9}],"type":{"type":"reference","name":"Color","id":90}},{"id":14319,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The ID of the select option."},"sources":[{"fileName":"src/ui/choice_token.tsx","line":48,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14320,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the select option."},"sources":[{"fileName":"src/ui/choice_token.tsx","line":50,"character":8}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[14321,14319,14320]}],"sources":[{"fileName":"src/ui/choice_token.tsx","line":46,"character":22}]},{"id":14322,"name":"ChoiceTokenProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link ChoiceToken} component. Also accepts:\n* {@link ChoiceTokenStyleProps}","tags":[{"tag":"docspath","text":"UI/components/ChoiceToken"}]},"typeParameter":[{"id":14346,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":14323,"name":"choice","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"An object representing a select option. You should not create these objects from scratch, but should instead grab them from base data."},"sources":[{"fileName":"src/ui/choice_token.tsx","line":64,"character":10}],"type":{"type":"reference","name":"ChoiceOption","id":14318}},{"id":14325,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the choice token."},"sources":[{"fileName":"src/ui/choice_token.tsx","line":68,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14324,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the choice token."},"sources":[{"fileName":"src/ui/choice_token.tsx","line":66,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[14323,14325,14324]}],"sources":[{"fileName":"src/ui/choice_token.tsx","line":62,"character":26}],"extendedTypes":[{"type":"reference","name":"ChoiceTokenStyleProps","id":14297},{"type":"reference","name":"TooltipAnchorProps"}]},{"id":14297,"name":"ChoiceTokenStyleProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Style props for the {@link ChoiceToken} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"},"sources":[{"fileName":"src/ui/choice_token.tsx","line":33,"character":31}],"extendedTypes":[{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"ChoiceTokenProps","id":14322}]},{"id":14363,"name":"ChoiceToken","kind":64,"kindString":"Function","flags":{"isExported":true,"isConst":true},"comment":{"shortText":"A component that shows a single choice in a small token, to be displayed inline or in a list of choices.","text":"[[ Story id=\"choicetoken--example\" title=\"Choice token example\" ]]\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/ChoiceToken\n"}]},"signatures":[{"id":14364,"name":"ChoiceToken","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A component that shows a single choice in a small token, to be displayed inline or in a list of choices.","text":"[[ Story id=\"choicetoken--example\" title=\"Choice token example\" ]]\n"},"parameters":[{"id":14365,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ChoiceTokenProps","id":14322}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/choice_token.tsx","line":79,"character":17}]}],"groups":[{"title":"Interfaces","kind":256,"children":[14318,14322,14297]},{"title":"Functions","kind":64,"children":[14363]}],"sources":[{"fileName":"src/ui/choice_token.tsx","line":1,"character":0}]},{"id":14366,"name":"@airtable/blocks/ui: CollaboratorToken","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/collaborator_token.tsx","comment":{},"children":[{"id":14388,"name":"CollaboratorTokenProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link CollaboratorToken} component. Also accepts:\n* {@link CollaboratorTokenStyleProps}","tags":[{"tag":"docspath","text":"UI/components/CollaboratorToken\n"}]},"typeParameter":[{"id":14412,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":14390,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the collaborator token."},"sources":[{"fileName":"src/ui/collaborator_token.tsx","line":57,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14389,"name":"collaborator","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"An object representing a collaborator. You should not create these objects from scratch, but should instead grab them from base data."},"sources":[{"fileName":"src/ui/collaborator_token.tsx","line":55,"character":16}],"type":{"type":"reference","name":"Partial","typeArguments":[{"type":"reference","name":"CollaboratorData","id":375}]}},{"id":14391,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the collaborator token."},"sources":[{"fileName":"src/ui/collaborator_token.tsx","line":59,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[14390,14389,14391]}],"sources":[{"fileName":"src/ui/collaborator_token.tsx","line":53,"character":32}],"extendedTypes":[{"type":"reference","name":"CollaboratorTokenStyleProps","id":14367},{"type":"reference","name":"TooltipAnchorProps"}]},{"id":14367,"name":"CollaboratorTokenStyleProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Style props for the {@link CollaboratorToken} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"},"sources":[{"fileName":"src/ui/collaborator_token.tsx","line":36,"character":37}],"extendedTypes":[{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"CollaboratorTokenProps","id":14388}]},{"id":14434,"name":"CollaboratorToken","kind":64,"kindString":"Function","flags":{"isExported":true,"isConst":true},"comment":{"shortText":"A component that shows a single collaborator in a small token, to be displayed inline or in a list of choices.","text":"[[ Story id=\"collaboratortoken--example\" title=\"Collaborator token example\" ]]\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/CollaboratorToken\n"}]},"signatures":[{"id":14435,"name":"CollaboratorToken","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A component that shows a single collaborator in a small token, to be displayed inline or in a list of choices.","text":"[[ Story id=\"collaboratortoken--example\" title=\"Collaborator token example\" ]]\n"},"parameters":[{"id":14436,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"CollaboratorTokenProps","id":14388}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/collaborator_token.tsx","line":140,"character":23}]}],"groups":[{"title":"Interfaces","kind":256,"children":[14388,14367]},{"title":"Functions","kind":64,"children":[14434]}],"sources":[{"fileName":"src/ui/collaborator_token.tsx","line":1,"character":0}]},{"id":12346,"name":"@airtable/blocks/ui: ColorPalette","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/color_palette.tsx","comment":{},"children":[{"id":12468,"name":"ColorPalette","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"A color selection component. Accepts a list of `allowedColors` to be displayed\nas selectable color squares.","text":"[[ Story id=\"colorpalette--example\" title=\"Color palette example\" ]]\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/ColorPalette\n"}]},"typeParameter":[{"id":12512,"name":"SS","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/color_palette.tsx","line":125,"character":25}],"extendedTypes":[{"type":"reference","name":"Component","typeArguments":[{"type":"reference","name":"ColorPaletteProps","id":12418},{"type":"reference","name":"ColorPaletteState"}]}]},{"id":12640,"name":"ColorPaletteSynced","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"A wrapper around the {@link ColorPalette} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"colorpalette--synced-example\" title=\"Synced color palette example\" ]]\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/ColorPaletteSynced"},{"tag":"grouppath","text":"UI/components/ColorPalette\n"}]},"typeParameter":[{"id":12645,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}},{"id":12646,"name":"SS","kind":131072,"kindString":"Type parameter","flags":{}},{"id":12691,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/color_palette_synced.tsx","line":34,"character":24}],"extendedTypes":[{"type":"reference","name":"Component","typeArguments":[{"type":"reference","name":"ColorPaletteSyncedProps","id":12592}]}]},{"id":12418,"name":"ColorPaletteProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link ColorPalette} component. Also accepts:\n* {@link ColorPaletteStyleProps}","tags":[{"tag":"docspath","text":"UI/components/ColorPalette\n"}]},"typeParameter":[{"id":12452,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":12420,"name":"allowedColors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The list of {@link Color|colors} to display in the color palette."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":77,"character":17}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.allowedColors","id":12372}},{"id":12426,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the color palette, separated by spaces."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":83,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.className","id":12378}},{"id":12419,"name":"color","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The current selected {@link Color} option."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":108,"character":9}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"null"}]}},{"id":12428,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the color palette will not allow color selection."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":87,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.disabled","id":12380}},{"id":12421,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected color changes."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":79,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":12422,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":12423,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":12424,"name":"arg1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.onChange","id":12373}},{"id":12425,"name":"squareMargin","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The margin between color squares in the color palette."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":81,"character":16}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.squareMargin","id":12377}},{"id":12427,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the color palette."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":85,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.style","id":12379}}],"groups":[{"title":"Properties","kind":1024,"children":[12420,12426,12419,12428,12421,12425,12427]}],"sources":[{"fileName":"src/ui/color_palette.tsx","line":106,"character":27}],"extendedTypes":[{"type":"reference","name":"SharedColorPaletteProps","id":12371}]},{"id":12347,"name":"ColorPaletteStyleProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props shared between the {@link ColorPalette} and {@link ColorPaletteSynced} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"},"sources":[{"fileName":"src/ui/color_palette.tsx","line":53,"character":39}],"extendedTypes":[{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"SharedColorPaletteProps","id":12371}]},{"id":12592,"name":"ColorPaletteSyncedProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link ColorPaletteSynced} component. Also accepts:\n* {@link ColorPaletteStyleProps}","tags":[{"tag":"docspath","text":"UI/components/ColorPaletteSynced"},{"tag":"grouppath","text":"UI/components/ColorPalette\n"}]},"typeParameter":[{"id":12626,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":12594,"name":"allowedColors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The list of {@link Color|colors} to display in the color palette."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":77,"character":17}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.allowedColors","id":12372}},{"id":12600,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the color palette, separated by spaces."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":83,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.className","id":12378}},{"id":12602,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the color palette will not allow color selection."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":87,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.disabled","id":12380}},{"id":12593,"name":"globalConfigKey","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A string key or array key path in {@link GlobalConfig}. The selected color will always reflect the value stored in {@link GlobalConfig} for this key. Selecting a new color will update {@link GlobalConfig}."},"sources":[{"fileName":"src/ui/color_palette_synced.tsx","line":22,"character":19}],"type":{"type":"reference","name":"GlobalConfigKey","id":682}},{"id":12595,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected color changes."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":79,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":12596,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":12597,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":12598,"name":"arg1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.onChange","id":12373}},{"id":12599,"name":"squareMargin","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The margin between color squares in the color palette."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":81,"character":16}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.squareMargin","id":12377}},{"id":12601,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the color palette."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":85,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedColorPaletteProps.style","id":12379}}],"groups":[{"title":"Properties","kind":1024,"children":[12594,12600,12602,12593,12595,12599,12601]}],"sources":[{"fileName":"src/ui/color_palette_synced.tsx","line":20,"character":33}],"extendedTypes":[{"type":"reference","name":"SharedColorPaletteProps","id":12371}]},{"id":12371,"name":"SharedColorPaletteProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props shared between the {@link ColorPalette} and {@link ColorPaletteSynced} components."},"typeParameter":[{"id":12404,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":12372,"name":"allowedColors","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The list of {@link Color|colors} to display in the color palette."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":77,"character":17}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"string"}]}},{"id":12378,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the color palette, separated by spaces."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":83,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12380,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the color palette will not allow color selection."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":87,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":12373,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A function to be called when the selected color changes."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":79,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":12374,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":12375,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":12376,"name":"arg1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]}},{"id":12377,"name":"squareMargin","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The margin between color squares in the color palette."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":81,"character":16}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":12379,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the color palette."},"sources":[{"fileName":"src/ui/color_palette.tsx","line":85,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[12372,12378,12380,12373,12377,12379]}],"sources":[{"fileName":"src/ui/color_palette.tsx","line":75,"character":40}],"extendedTypes":[{"type":"reference","name":"ColorPaletteStyleProps","id":12347},{"type":"reference","name":"TooltipAnchorProps"}],"extendedBy":[{"type":"reference","name":"ColorPaletteProps","id":12418},{"type":"reference","name":"ColorPaletteSyncedProps","id":12592}]}],"groups":[{"title":"Classes","kind":128,"children":[12468,12640]},{"title":"Interfaces","kind":256,"children":[12418,12347,12592,12371]}],"sources":[{"fileName":"src/ui/color_palette.tsx","line":1,"character":0}]},{"id":14580,"name":"@airtable/blocks/ui: Dialog","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/dialog_close_button.tsx","comment":{},"children":[{"id":15068,"name":"ConfirmationDialog","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"A styled modal dialog component that prompts the user to confirm or cancel an action.","text":"[[ Story id=\"confirmationdialog--example\" title=\"Confirmation dialog example\" ]]\n\nBy default, this component will focus the \"Confirm\" button on mount, so that pressing\nthe Enter key will confirm the action.\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/ConfirmationDialog\n"}]},"typeParameter":[{"id":15101,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}},{"id":15102,"name":"SS","kind":131072,"kindString":"Type parameter","flags":{}},{"id":15145,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":57,"character":24}],"extendedTypes":[{"type":"reference","name":"Component","typeArguments":[{"type":"reference","name":"ConfirmationDialogProps","id":15023}]}]},{"id":14805,"name":"Dialog","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"A styled modal dialog component.","text":"[[ Story id=\"dialog--example\" title=\"Dialog example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/Dialog"},{"tag":"component","text":"\n"}]},"typeParameter":[{"id":14840,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}},{"id":14841,"name":"SS","kind":131072,"kindString":"Type parameter","flags":{}},{"id":14882,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/dialog.tsx","line":75,"character":12}],"extendedTypes":[{"type":"reference","name":"Component","typeArguments":[{"type":"reference","name":"DialogProps","id":14769}]}]},{"id":14641,"name":"DialogCloseButton","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"A button that closes {@link Dialog}. Accessed via `Dialog.CloseButton`."},"typeParameter":[{"id":14663,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}},{"id":14664,"name":"SS","kind":131072,"kindString":"Type parameter","flags":{}},{"id":14709,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/dialog_close_button.tsx","line":97,"character":30}],"extendedTypes":[{"type":"reference","name":"Component","typeArguments":[{"type":"reference","name":"DialogCloseButtonProps","id":14581}]}]},{"id":15023,"name":"ConfirmationDialogProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link ConfirmationDialog} component. Also accepts:\n* {@link DialogStyleProps}","tags":[{"tag":"docspath","text":"UI/components/ConfirmationDialog\n"}]},"children":[{"id":15031,"name":"backgroundClassName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra `className`s to apply to the background element, separated by spaces."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":33,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15032,"name":"backgroundStyle","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra styles to apply to the background element."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":35,"character":19}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":15030,"name":"body","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The body of the dialog. When it’s a string it will automatically be wrapped in a Text component."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":31,"character":8}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]}},{"id":15026,"name":"cancelButtonText","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The label for the cancel button. Defaults to 'Cancel'."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":23,"character":20}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15029,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra `className`s to apply to the dialog element, separated by spaces."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":29,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15027,"name":"confirmButtonText","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The label for the confirm button. Defaults to 'Confirm'."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":25,"character":21}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15039,"name":"isCancelButtonDisabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the cancel button can be interacted with. Defaults to `false`."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":41,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":15028,"name":"isConfirmActionDangerous","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the action is dangerous (potentially destructive or not easily reversible). Defaults to `false`."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":27,"character":28}],"type":{"type":"intrinsic","name":"boolean"}},{"id":15040,"name":"isConfirmButtonDisabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the confirm button can be interacted with. Defaults to `false`."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":43,"character":27}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":15033,"name":"onCancel","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Cancel button event handler. Handles click events and Space/Enter keypress events."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":37,"character":12}],"type":{"type":"reflection","declaration":{"id":15034,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":15035,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":37,"character":13}]}}},{"id":15036,"name":"onConfirm","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Confirm button event handler. Handles click events and Space/Enter keypress events."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":39,"character":13}],"type":{"type":"reflection","declaration":{"id":15037,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":15038,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":39,"character":14}]}}},{"id":15024,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra styles to apply to the dialog element."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":19,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":15025,"name":"title","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The title of the dialog."},"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":21,"character":9}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[15031,15032,15030,15026,15029,15027,15039,15028,15040,15033,15036,15024,15025]}],"sources":[{"fileName":"src/ui/confirmation_dialog.tsx","line":17,"character":33}],"extendedTypes":[{"type":"reference","name":"DialogStyleProps","id":14741}]},{"id":14581,"name":"DialogCloseButtonProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props for the {@link DialogCloseButton} component. Also accepts:\n* {@link DialogCloseButtonStyleProps}"},"children":[{"id":14585,"name":"children","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The contents of the close button."},"sources":[{"fileName":"src/ui/dialog_close_button.tsx","line":48,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]}},{"id":14582,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"`className`s to apply to the close button, separated by spaces."},"sources":[{"fileName":"src/ui/dialog_close_button.tsx","line":42,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14583,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Styles to apply to the close button."},"sources":[{"fileName":"src/ui/dialog_close_button.tsx","line":44,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":14584,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Indicates if the button can be focused and if/where it participates in sequential keyboard navigation."},"sources":[{"fileName":"src/ui/dialog_close_button.tsx","line":46,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[14585,14582,14583,14584]}],"sources":[{"fileName":"src/ui/dialog_close_button.tsx","line":40,"character":39}],"extendedTypes":[{"type":"reference","name":"TooltipAnchorProps","typeArguments":[{"type":"reference","name":"HTMLDivElement"}]}]},{"id":14599,"name":"DialogCloseButtonStyleProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for the {@link DialogCloseButton} component. Accepts:\n* {@link BorderRadiusProps}\n* {@link DimensionsSetProps}\n* {@link DisplayProps}\n* {@link FlexContainerSetProps}\n* {@link FlexItemSetProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}"},"sources":[{"fileName":"src/ui/dialog_close_button.tsx","line":63,"character":44}],"extendedTypes":[{"type":"reference","name":"BorderRadiusProps","id":9122},{"type":"reference","name":"DimensionsSetProps","id":9231},{"type":"reference","name":"DisplayProps","id":9658},{"type":"reference","name":"FlexContainerSetProps","id":9290},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"SpacingSetProps","id":9534}]},{"id":14769,"name":"DialogProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Dialog} component. Also accepts:\n* {@link DialogStyleProps}","tags":[{"tag":"docspath","text":"UI/components/Dialog\n"}]},"children":[{"id":14775,"name":"backgroundClassName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra `className`s to apply to the background element, separated by spaces."},"sources":[{"fileName":"src/ui/dialog.tsx","line":59,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14776,"name":"backgroundStyle","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra styles to apply to the background element."},"sources":[{"fileName":"src/ui/dialog.tsx","line":61,"character":19}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":14777,"name":"children","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The contents of the dialog element."},"sources":[{"fileName":"src/ui/dialog.tsx","line":63,"character":12}],"type":{"type":"reference","name":"React.ReactNode"}},{"id":14773,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra `className`s to apply to the dialog element, separated by spaces."},"sources":[{"fileName":"src/ui/dialog.tsx","line":55,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14770,"name":"onClose","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Callback function to fire when the dialog is closed."},"sources":[{"fileName":"src/ui/dialog.tsx","line":53,"character":11}],"type":{"type":"reflection","declaration":{"id":14771,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":14772,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/ui/dialog.tsx","line":53,"character":12}]}}},{"id":14774,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra styles to apply to the dialog element."},"sources":[{"fileName":"src/ui/dialog.tsx","line":57,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[14775,14776,14777,14773,14770,14774]}],"sources":[{"fileName":"src/ui/dialog.tsx","line":51,"character":21}],"extendedTypes":[{"type":"reference","name":"DialogStyleProps","id":14741}]},{"id":14741,"name":"DialogStyleProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props shared between the {@link Dialog} and {@link ConfirmationDialog} components. Also accepts:\n* {@link DimensionsSetProps}\n* {@link FlexContainerSetProps}\n* {@link SpacingSetProps}"},"children":[{"id":14742,"name":"display","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."},"sources":[{"fileName":"src/ui/dialog.tsx","line":33,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"stringLiteral","value":"block"},{"type":"stringLiteral","value":"flex"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[14742]}],"sources":[{"fileName":"src/ui/dialog.tsx","line":28,"character":33}],"extendedTypes":[{"type":"reference","name":"DimensionsSetProps","id":9231},{"type":"reference","name":"FlexContainerSetProps","id":9290},{"type":"reference","name":"SpacingSetProps","id":9534}],"extendedBy":[{"type":"reference","name":"DialogProps","id":14769},{"type":"reference","name":"ConfirmationDialogProps","id":15023}]}],"groups":[{"title":"Classes","kind":128,"children":[15068,14805,14641]},{"title":"Interfaces","kind":256,"children":[15023,14581,14599,14769,14741]}],"sources":[{"fileName":"src/ui/dialog_close_button.tsx","line":1,"character":0}]},{"id":12154,"name":"@airtable/blocks/ui: FieldIcon","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/field_icon.tsx","comment":{},"children":[{"id":12155,"name":"FieldIconProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link FieldIcon} component. Also accepts:\n* {@link IconStyleProps}","tags":[{"tag":"docspath","text":"UI/components/FieldIcon\n"}]},"children":[{"id":12159,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the icon."},"sources":[{"fileName":"src/ui/icon.tsx","line":62,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedIconProps.className","id":12061}},{"id":12156,"name":"field","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The field model to display an icon for."},"sources":[{"fileName":"src/ui/field_icon.tsx","line":18,"character":9}],"type":{"type":"reference","name":"Field","id":1724}},{"id":12158,"name":"fillColor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The color of the icon."},"sources":[{"fileName":"src/ui/icon.tsx","line":60,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedIconProps.fillColor","id":12060}},{"id":12161,"name":"pathClassName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the icon path."},"sources":[{"fileName":"src/ui/icon.tsx","line":66,"character":17}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedIconProps.pathClassName","id":12063}},{"id":12162,"name":"pathStyle","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the icon path."},"sources":[{"fileName":"src/ui/icon.tsx","line":68,"character":13}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedIconProps.pathStyle","id":12064}},{"id":12157,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The width/height of the icon. Defaults to 16."},"sources":[{"fileName":"src/ui/icon.tsx","line":58,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedIconProps.size","id":12059}},{"id":12160,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the icon."},"sources":[{"fileName":"src/ui/icon.tsx","line":64,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedIconProps.style","id":12062}}],"groups":[{"title":"Properties","kind":1024,"children":[12159,12156,12158,12161,12162,12157,12160]}],"sources":[{"fileName":"src/ui/field_icon.tsx","line":16,"character":24}],"extendedTypes":[{"type":"reference","name":"SharedIconProps","id":12058}]},{"id":12196,"name":"FieldIcon","kind":64,"kindString":"Function","flags":{"isExported":true,"isConst":true},"comment":{"shortText":"A vector icon for a field’s type.","text":"[[ Story id=\"fieldicon--example\" title=\"FieldIcon example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/FieldIcon"},{"tag":"component","text":"\n"}]},"signatures":[{"id":12197,"name":"FieldIcon","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A vector icon for a field’s type.","text":"[[ Story id=\"fieldicon--example\" title=\"FieldIcon example\" ]]\n"},"parameters":[{"id":12198,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FieldIconProps","id":12155}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/field_icon.tsx","line":29,"character":15}]}],"groups":[{"title":"Interfaces","kind":256,"children":[12155]},{"title":"Functions","kind":64,"children":[12196]}],"sources":[{"fileName":"src/ui/field_icon.tsx","line":1,"character":0}]},{"id":11138,"name":"@airtable/blocks/ui: FieldPicker","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/field_picker.tsx","comment":{},"children":[{"id":11196,"name":"FieldPickerProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link FieldPicker} component. Also accepts:\n* {@link SelectStyleProps}","tags":[{"tag":"docspath","text":"UI/components/FieldPicker\n"}]},"children":[{"id":11199,"name":"allowedTypes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An array indicating which field types can be selected."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":20,"character":16}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"FieldType","id":138}]},"inheritedFrom":{"type":"reference","name":"SharedFieldPickerProps.allowedTypes","id":11141}},{"id":11216,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":11214,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":11215,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":11208,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":11207,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":11212,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":11197,"name":"field","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The selected field model."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":47,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"intrinsic","name":"null"}]}},{"id":11209,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":11210,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":11202,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected field changes."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":26,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":11203,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":11204,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11205,"name":"fieldModel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedFieldPickerProps.onChange","id":11144}},{"id":11201,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The placeholder text when no field is selected."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":24,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedFieldPickerProps.placeholder","id":11143}},{"id":11200,"name":"shouldAllowPickingNone","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user can unset the selected field."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":22,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedFieldPickerProps.shouldAllowPickingNone","id":11142}},{"id":11206,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":11213,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":11211,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}},{"id":11198,"name":"table","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The parent table model to select fields from. If `null` or `undefined`, the picker won't render."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":18,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]},"inheritedFrom":{"type":"reference","name":"SharedFieldPickerProps.table","id":11140}}],"groups":[{"title":"Properties","kind":1024,"children":[11199,11216,11214,11215,11208,11207,11212,11197,11209,11210,11202,11201,11200,11206,11213,11211,11198]}],"sources":[{"fileName":"src/ui/field_picker.tsx","line":45,"character":26}],"extendedTypes":[{"type":"reference","name":"SharedFieldPickerProps","id":11139}]},{"id":11269,"name":"FieldPickerSyncedProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link FieldPickerSynced} component. Also accepts:\n* {@link SelectStyleProps}","tags":[{"tag":"docspath","text":"UI/components/FieldPickerSynced"},{"tag":"grouppath","text":"UI/components/FieldPicker\n"}]},"children":[{"id":11272,"name":"allowedTypes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An array indicating which field types can be selected."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":20,"character":16}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"FieldType","id":138}]},"inheritedFrom":{"type":"reference","name":"SharedFieldPickerProps.allowedTypes","id":11141}},{"id":11289,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":11287,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":11288,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":11281,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":11280,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":11285,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":11270,"name":"globalConfigKey","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A string key or array key path in {@link GlobalConfig}. The selected field will always reflect the field id stored in {@link GlobalConfig} for this key. Selecting a new field will update {@link GlobalConfig}."},"sources":[{"fileName":"src/ui/field_picker_synced.tsx","line":20,"character":19}],"type":{"type":"reference","name":"GlobalConfigKey","id":682}},{"id":11282,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":11283,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":11275,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected field changes."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":26,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":11276,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":11277,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11278,"name":"fieldModel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedFieldPickerProps.onChange","id":11144}},{"id":11274,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The placeholder text when no field is selected."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":24,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedFieldPickerProps.placeholder","id":11143}},{"id":11273,"name":"shouldAllowPickingNone","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user can unset the selected field."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":22,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedFieldPickerProps.shouldAllowPickingNone","id":11142}},{"id":11279,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":11286,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":11284,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}},{"id":11271,"name":"table","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The parent table model to select fields from. If `null` or `undefined`, the picker won't render."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":18,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]},"inheritedFrom":{"type":"reference","name":"SharedFieldPickerProps.table","id":11140}}],"groups":[{"title":"Properties","kind":1024,"children":[11272,11289,11287,11288,11281,11280,11285,11270,11282,11283,11275,11274,11273,11279,11286,11284,11271]}],"sources":[{"fileName":"src/ui/field_picker_synced.tsx","line":18,"character":32}],"extendedTypes":[{"type":"reference","name":"SharedFieldPickerProps","id":11139}]},{"id":11139,"name":"SharedFieldPickerProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props shared between the {@link FieldPicker} and {@link FieldPickerSynced} components."},"children":[{"id":11141,"name":"allowedTypes","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"An array indicating which field types can be selected."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":20,"character":16}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"FieldType","id":138}]}},{"id":11158,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":11156,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":11157,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":11150,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":11149,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":11154,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":11151,"name":"id","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":11152,"name":"name","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":11144,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A function to be called when the selected field changes."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":26,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":11145,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":11146,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11147,"name":"fieldModel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Field","id":1724},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}]}}]}},{"id":11143,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The placeholder text when no field is selected."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":24,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11142,"name":"shouldAllowPickingNone","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user can unset the selected field."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":22,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":11148,"name":"size","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":11155,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":11153,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}},{"id":11140,"name":"table","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The parent table model to select fields from. If `null` or `undefined`, the picker won't render."},"sources":[{"fileName":"src/ui/field_picker.tsx","line":18,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[11141,11158,11156,11157,11150,11149,11154,11151,11152,11144,11143,11142,11148,11155,11153,11140]}],"sources":[{"fileName":"src/ui/field_picker.tsx","line":16,"character":39}],"extendedTypes":[{"type":"reference","name":"SharedSelectBaseProps","id":10679}],"extendedBy":[{"type":"reference","name":"FieldPickerProps","id":11196},{"type":"reference","name":"FieldPickerSyncedProps","id":11269}]},{"id":11263,"name":"FieldPicker","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"Dropdown menu component for selecting fields.","text":"[[ Story id=\"modelpickers--fieldpicker-example\" title=\"Field picker example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/FieldPicker"},{"tag":"component","text":"\n"}]},"signatures":[{"id":11264,"name":"FieldPicker","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Dropdown menu component for selecting fields.","text":"[[ Story id=\"modelpickers--fieldpicker-example\" title=\"Field picker example\" ]]\n"},"parameters":[{"id":11265,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FieldPickerProps","id":11196}},{"id":11266,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLSelectElement"}]}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"null"},{"type":"reference","name":"Element"}]}}],"sources":[{"fileName":"src/ui/field_picker.tsx","line":58,"character":17}]},{"id":11327,"name":"FieldPickerSynced","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A wrapper around the {@link FieldPicker} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"modelpickers--fieldpickersynced-example\" title=\"Synced field picker example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/FieldPickerSynced"},{"tag":"grouppath","text":"UI/components/FieldPicker"},{"tag":"component","text":"\n"}]},"signatures":[{"id":11328,"name":"FieldPickerSynced","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A wrapper around the {@link FieldPicker} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"modelpickers--fieldpickersynced-example\" title=\"Synced field picker example\" ]]\n"},"parameters":[{"id":11329,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FieldPickerSyncedProps","id":11269}},{"id":11330,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLSelectElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/field_picker_synced.tsx","line":32,"character":23}]}],"groups":[{"title":"Interfaces","kind":256,"children":[11196,11269,11139]},{"title":"Functions","kind":64,"children":[11263,11327]}],"sources":[{"fileName":"src/ui/field_picker.tsx","line":1,"character":0}]},{"id":15270,"name":"@airtable/blocks/ui: FormField","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/form_field.tsx","comment":{},"children":[{"id":15302,"name":"FormFieldProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link FormField} component. Also accepts:\n* {@link FormFieldStyleProps}","tags":[{"tag":"docspath","text":"UI/components/FormField\n"}]},"children":[{"id":15309,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The contents of the form field."},"sources":[{"fileName":"src/ui/form_field.tsx","line":84,"character":12}],"type":{"type":"reference","name":"React.ReactNode"}},{"id":15304,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the form field."},"sources":[{"fileName":"src/ui/form_field.tsx","line":74,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15308,"name":"description","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The description content for the form field. Displayed beneath the label and above the wrapped control field."},"sources":[{"fileName":"src/ui/form_field.tsx","line":82,"character":15}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"null"}]}},{"id":15307,"name":"htmlFor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `for` attribute to be applied to the inner label. By default, the form field will automatically generate a random ID and set it on both the label and the wrapped input/select. Only use this property if you want to override the generated ID with your own custom ID."},"sources":[{"fileName":"src/ui/form_field.tsx","line":80,"character":11}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15303,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/form_field.tsx","line":72,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15306,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The label content for the form field."},"sources":[{"fileName":"src/ui/form_field.tsx","line":78,"character":9}],"type":{"type":"reference","name":"React.ReactNode"}},{"id":15305,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the form field."},"sources":[{"fileName":"src/ui/form_field.tsx","line":76,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[15309,15304,15308,15307,15303,15306,15305]}],"sources":[{"fileName":"src/ui/form_field.tsx","line":70,"character":24}],"extendedTypes":[{"type":"reference","name":"FormFieldStyleProps","id":15271}]},{"id":15271,"name":"FormFieldStyleProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Style props for the {@link FormField} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"},"sources":[{"fileName":"src/ui/form_field.tsx","line":44,"character":29}],"extendedTypes":[{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"SpacingSetProps","id":9534}],"extendedBy":[{"type":"reference","name":"FormFieldProps","id":15302}]},{"id":15342,"name":"FormField","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A form field component that wraps any control field, supplying a provided label and optional\ndescription.","text":"[[ Story id=\"formfield--example\" title=\"Form field example\" ]]\n\nThis component will automatically set up the `for` attribute on the outputted label with the `id` attribute\non the wrapped control field for the following UI components: Label, Select, FieldPicker,\nModelPicker, and ViewPicker. If you'd like to manually override this behavior, you can provide an\n`htmlFor` prop to this component and manually set the `id` attribute on your wrapped control to\nthe same value.\n","tags":[{"tag":"docspath","text":"UI/components/FormField"},{"tag":"component","text":"\n"}]},"signatures":[{"id":15343,"name":"FormField","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A form field component that wraps any control field, supplying a provided label and optional\ndescription.","text":"[[ Story id=\"formfield--example\" title=\"Form field example\" ]]\n\nThis component will automatically set up the `for` attribute on the outputted label with the `id` attribute\non the wrapped control field for the following UI components: Label, Select, FieldPicker,\nModelPicker, and ViewPicker. If you'd like to manually override this behavior, you can provide an\n`htmlFor` prop to this component and manually set the `id` attribute on your wrapped control to\nthe same value.\n"},"parameters":[{"id":15344,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"FormFieldProps","id":15302}},{"id":15345,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLDivElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/form_field.tsx","line":102,"character":15}]}],"groups":[{"title":"Interfaces","kind":256,"children":[15302,15271]},{"title":"Functions","kind":64,"children":[15342]}],"sources":[{"fileName":"src/ui/form_field.tsx","line":1,"character":0}]},{"id":14912,"name":"@airtable/blocks/ui: Heading","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/heading.tsx","comment":{},"children":[{"id":14913,"name":"HeadingProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Heading} component. Also supports:\n* {@link AllStylesProps}\n* {@link AriaProps}","tags":[{"tag":"docspath","text":"UI/components/Heading"}]},"children":[{"id":14915,"name":"as","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The element that is rendered. Defaults to `h3`."},"sources":[{"fileName":"src/ui/heading.tsx","line":103,"character":6}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"h1"},{"type":"stringLiteral","value":"h2"},{"type":"stringLiteral","value":"h3"},{"type":"stringLiteral","value":"h4"},{"type":"stringLiteral","value":"h5"},{"type":"stringLiteral","value":"h6"}]}},{"id":14917,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The contents of the heading."},"sources":[{"fileName":"src/ui/heading.tsx","line":107,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]}},{"id":14921,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply, separated by spaces."},"sources":[{"fileName":"src/ui/heading.tsx","line":115,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14920,"name":"dataAttributes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."},"sources":[{"fileName":"src/ui/heading.tsx","line":113,"character":18}],"type":{"type":"reference","name":"DataAttributesProp"}},{"id":14918,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/heading.tsx","line":109,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14914,"name":"role","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `role` attribute."},"sources":[{"fileName":"src/ui/heading.tsx","line":101,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14919,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the heading. Defaults to `default`. Can be a responsive prop object."},"sources":[{"fileName":"src/ui/heading.tsx","line":111,"character":8}],"type":{"type":"reference","name":"HeadingSizeProp","id":15001}},{"id":14922,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles."},"sources":[{"fileName":"src/ui/heading.tsx","line":117,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":14916,"name":"variant","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The variant of the heading. Defaults to `default`."},"sources":[{"fileName":"src/ui/heading.tsx","line":105,"character":11}],"type":{"type":"reference","name":"HeadingVariant","id":15003}}],"groups":[{"title":"Properties","kind":1024,"children":[14915,14917,14921,14920,14918,14914,14919,14922,14916]}],"sources":[{"fileName":"src/ui/heading.tsx","line":99,"character":22}],"extendedTypes":[{"type":"reference","name":"AllStylesProps","id":9678},{"type":"reference","name":"AriaProps","id":12200}]},{"id":14998,"name":"HeadingSize","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Sizes for the {@link Heading} component."},"sources":[{"fileName":"src/ui/heading.tsx","line":26,"character":16}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"small"},{"type":"stringLiteral","value":"default"},{"type":"stringLiteral","value":"large"},{"type":"stringLiteral","value":"xsmall"},{"type":"stringLiteral","value":"xlarge"},{"type":"stringLiteral","value":"xxlarge"}]}},{"id":15001,"name":"HeadingSizeProp","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Size prop for the {@link Heading} component."},"sources":[{"fileName":"src/ui/heading.tsx","line":32,"character":20}],"type":{"type":"reference","name":"ResponsiveProp","id":9060,"typeArguments":[{"type":"reference","name":"HeadingSize","id":14998}]}},{"id":15003,"name":"HeadingVariant","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Variant prop for the {@link Heading} component.\n• **default** - Headings typically used for titles.\n• **caps** - All-caps headings typically used for field names and smaller section headings."},"sources":[{"fileName":"src/ui/heading.tsx","line":40,"character":19}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"default"},{"type":"stringLiteral","value":"caps"}]}},{"id":15017,"name":"Heading","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A heading component with sizes and variants.","text":"[[ Story id=\"heading--example\" title=\"Heading example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/Heading"},{"tag":"component","text":"\n"}]},"signatures":[{"id":15018,"name":"Heading","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A heading component with sizes and variants.","text":"[[ Story id=\"heading--example\" title=\"Heading example\" ]]\n"},"parameters":[{"id":15019,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"HeadingProps","id":14913}},{"id":15020,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLHeadingElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/heading.tsx","line":128,"character":13}]}],"groups":[{"title":"Interfaces","kind":256,"children":[14913]},{"title":"Type aliases","kind":4194304,"children":[14998,15001,15003]},{"title":"Functions","kind":64,"children":[15017]}],"sources":[{"fileName":"src/ui/heading.tsx","line":1,"character":0}]},{"id":12036,"name":"@airtable/blocks/ui: Icon","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/icon.tsx","comment":{},"children":[{"id":12098,"name":"IconProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Icon} component. Also accepts:\n* {@link IconStyleProps}"},"children":[{"id":12103,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the icon."},"sources":[{"fileName":"src/ui/icon.tsx","line":62,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedIconProps.className","id":12061}},{"id":12102,"name":"fillColor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The color of the icon."},"sources":[{"fileName":"src/ui/icon.tsx","line":60,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedIconProps.fillColor","id":12060}},{"id":12099,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the icon. For more details, see the {@link IconName|list of supported icons}."},"sources":[{"fileName":"src/ui/icon.tsx","line":88,"character":8}],"type":{"type":"reference","name":"IconName","id":12025}},{"id":12105,"name":"pathClassName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the icon path."},"sources":[{"fileName":"src/ui/icon.tsx","line":66,"character":17}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedIconProps.pathClassName","id":12063}},{"id":12106,"name":"pathStyle","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the icon path."},"sources":[{"fileName":"src/ui/icon.tsx","line":68,"character":13}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedIconProps.pathStyle","id":12064}},{"id":12101,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The width/height of the icon. Defaults to 16."},"sources":[{"fileName":"src/ui/icon.tsx","line":58,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedIconProps.size","id":12059}},{"id":12104,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the icon."},"sources":[{"fileName":"src/ui/icon.tsx","line":64,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedIconProps.style","id":12062}}],"groups":[{"title":"Properties","kind":1024,"children":[12103,12102,12099,12105,12106,12101,12104]}],"sources":[{"fileName":"src/ui/icon.tsx","line":86,"character":19}],"extendedTypes":[{"type":"reference","name":"SharedIconProps","id":12058}]},{"id":12037,"name":"IconStyleProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props shared between the {@link Icon} and {@link FieldIcon} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link PositionSetProps}\n* {@link MarginProps}"},"sources":[{"fileName":"src/ui/icon.tsx","line":40,"character":31}],"extendedTypes":[{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"SharedIconProps","id":12058}]},{"id":12058,"name":"SharedIconProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props shared between the {@link Icon} and {@link FieldIcon} components."},"children":[{"id":12061,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the icon."},"sources":[{"fileName":"src/ui/icon.tsx","line":62,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12060,"name":"fillColor","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The color of the icon."},"sources":[{"fileName":"src/ui/icon.tsx","line":60,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12063,"name":"pathClassName","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the icon path."},"sources":[{"fileName":"src/ui/icon.tsx","line":66,"character":17}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12064,"name":"pathStyle","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the icon path."},"sources":[{"fileName":"src/ui/icon.tsx","line":68,"character":13}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":12059,"name":"size","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The width/height of the icon. Defaults to 16."},"sources":[{"fileName":"src/ui/icon.tsx","line":58,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]}},{"id":12062,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the icon."},"sources":[{"fileName":"src/ui/icon.tsx","line":64,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[12061,12060,12063,12064,12059,12062]}],"sources":[{"fileName":"src/ui/icon.tsx","line":56,"character":32}],"extendedTypes":[{"type":"reference","name":"IconStyleProps","id":12037},{"type":"reference","name":"TooltipAnchorProps","typeArguments":[{"type":"reference","name":"SVGSVGElement"}]}],"extendedBy":[{"type":"reference","name":"IconProps","id":12098},{"type":"reference","name":"FieldIconProps","id":12155}]},{"id":12149,"name":"Icon","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A vector icon from the Airtable icon set.","text":"[[ Story id=\"icon--example\" title=\"Icon example\" height=\"576px\"]]\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/Icon\n"}]},"signatures":[{"id":12150,"name":"Icon","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A vector icon from the Airtable icon set.","text":"[[ Story id=\"icon--example\" title=\"Icon example\" height=\"576px\"]]\n"},"parameters":[{"id":12151,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"IconProps","id":12098}},{"id":12152,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"SVGSVGElement"}]}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"null"},{"type":"reference","name":"Element"}]}}],"sources":[{"fileName":"src/ui/icon.tsx","line":102,"character":10}]}],"groups":[{"title":"Interfaces","kind":256,"children":[12098,12037,12058]},{"title":"Functions","kind":64,"children":[12149]}],"sources":[{"fileName":"src/ui/icon.tsx","line":1,"character":0}]},{"id":11526,"name":"@airtable/blocks/ui: Input","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/input.tsx","comment":{},"children":[{"id":11613,"name":"InputProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Input} component. Also accepts:\n* {@link InputStyleProps}","tags":[{"tag":"docspath","text":"UI/components/Input\n"}]},"children":[{"id":11638,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/input.tsx","line":139,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.['aria-describedby']","id":11575}},{"id":11637,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/input.tsx","line":137,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.['aria-labelledby']","id":11574}},{"id":11631,"name":"autoComplete","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoComplete` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":129,"character":16}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.autoComplete","id":11568}},{"id":11623,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":113,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.autoFocus","id":11560}},{"id":11633,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the input, separated by spaces."},"sources":[{"fileName":"src/ui/input.tsx","line":133,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.className","id":11570}},{"id":11617,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `disabled` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":101,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.disabled","id":11554}},{"id":11622,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":111,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.id","id":11559}},{"id":11624,"name":"max","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `max` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":115,"character":7}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.max","id":11561}},{"id":11625,"name":"maxLength","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `maxLength` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":117,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.maxLength","id":11562}},{"id":11639,"name":"min","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `min` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":141,"character":7}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.min","id":11576}},{"id":11627,"name":"minLength","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `minLength` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":121,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.minLength","id":11564}},{"id":11621,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":109,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.name","id":11558}},{"id":11629,"name":"pattern","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `pattern` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":125,"character":11}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.pattern","id":11566}},{"id":11626,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The placeholder for the input."},"sources":[{"fileName":"src/ui/input.tsx","line":119,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.placeholder","id":11563}},{"id":11630,"name":"readOnly","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `readOnly` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":127,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.readOnly","id":11567}},{"id":11618,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `required` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":103,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.required","id":11555}},{"id":11615,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the input. Defaults to `default`."},"sources":[{"fileName":"src/ui/input.tsx","line":97,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedInputProps.size","id":11552}},{"id":11619,"name":"spellCheck","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `spellcheck` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":105,"character":14}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.spellCheck","id":11556}},{"id":11628,"name":"step","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `step` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":123,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.step","id":11565}},{"id":11632,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the input."},"sources":[{"fileName":"src/ui/input.tsx","line":131,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedInputProps.style","id":11569}},{"id":11620,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":107,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.tabIndex","id":11557}},{"id":11616,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `type` for the input. Defaults to `text`."},"sources":[{"fileName":"src/ui/input.tsx","line":99,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"stringLiteral","value":"number"},{"type":"stringLiteral","value":"time"},{"type":"stringLiteral","value":"text"},{"type":"stringLiteral","value":"date"},{"type":"stringLiteral","value":"datetime-local"},{"type":"stringLiteral","value":"email"},{"type":"stringLiteral","value":"month"},{"type":"stringLiteral","value":"password"},{"type":"stringLiteral","value":"search"},{"type":"stringLiteral","value":"tel"},{"type":"stringLiteral","value":"url"},{"type":"stringLiteral","value":"week"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.type","id":11553}},{"id":11614,"name":"value","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The input's current value."},"sources":[{"fileName":"src/ui/input.tsx","line":198,"character":9}],"type":{"type":"intrinsic","name":"string"}},{"id":11634,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the input changes."},"signatures":[{"id":11635,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A function to be called when the input changes."},"parameters":[{"id":11636,"name":"e","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ChangeEvent","typeArguments":[{"type":"reference","name":"HTMLInputElement"}]}}],"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","name":"SharedInputProps.onChange","id":11571}}],"sources":[{"fileName":"src/ui/input.tsx","line":135,"character":12}],"inheritedFrom":{"type":"reference","name":"SharedInputProps.onChange","id":11571}}],"groups":[{"title":"Properties","kind":1024,"children":[11638,11637,11631,11623,11633,11617,11622,11624,11625,11639,11627,11621,11629,11626,11630,11618,11615,11619,11628,11632,11620,11616,11614]},{"title":"Methods","kind":2048,"children":[11634]}],"sources":[{"fileName":"src/ui/input.tsx","line":196,"character":20}],"extendedTypes":[{"type":"reference","name":"SharedInputProps","id":11551}]},{"id":11527,"name":"InputStyleProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props shared between the {@link Input} and {@link InputSynced} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"},"sources":[{"fileName":"src/ui/input.tsx","line":71,"character":32}],"extendedTypes":[{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"SharedInputProps","id":11551}]},{"id":11721,"name":"InputSyncedProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link InputSynced} component. Also accepts:\n* {@link InputStyleProps}","tags":[{"tag":"docspath","text":"UI/components/InputSynced"},{"tag":"grouppath","text":"UI/components/Input\n"}]},"children":[{"id":11746,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/input.tsx","line":139,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.['aria-describedby']","id":11575}},{"id":11745,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/input.tsx","line":137,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.['aria-labelledby']","id":11574}},{"id":11739,"name":"autoComplete","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoComplete` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":129,"character":16}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.autoComplete","id":11568}},{"id":11731,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":113,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.autoFocus","id":11560}},{"id":11741,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the input, separated by spaces."},"sources":[{"fileName":"src/ui/input.tsx","line":133,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.className","id":11570}},{"id":11725,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `disabled` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":101,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.disabled","id":11554}},{"id":11722,"name":"globalConfigKey","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A string key or array key path in {@link GlobalConfig}. The input value will always reflect the value stored in {@link GlobalConfig} for this key. Changing the input value will update {@link GlobalConfig}."},"sources":[{"fileName":"src/ui/input_synced.tsx","line":18,"character":19}],"type":{"type":"reference","name":"GlobalConfigKey","id":682}},{"id":11730,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":111,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.id","id":11559}},{"id":11732,"name":"max","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `max` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":115,"character":7}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.max","id":11561}},{"id":11733,"name":"maxLength","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `maxLength` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":117,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.maxLength","id":11562}},{"id":11747,"name":"min","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `min` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":141,"character":7}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.min","id":11576}},{"id":11735,"name":"minLength","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `minLength` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":121,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.minLength","id":11564}},{"id":11729,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":109,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.name","id":11558}},{"id":11737,"name":"pattern","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `pattern` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":125,"character":11}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.pattern","id":11566}},{"id":11734,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The placeholder for the input."},"sources":[{"fileName":"src/ui/input.tsx","line":119,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.placeholder","id":11563}},{"id":11738,"name":"readOnly","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `readOnly` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":127,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.readOnly","id":11567}},{"id":11726,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `required` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":103,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.required","id":11555}},{"id":11723,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the input. Defaults to `default`."},"sources":[{"fileName":"src/ui/input.tsx","line":97,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedInputProps.size","id":11552}},{"id":11727,"name":"spellCheck","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `spellcheck` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":105,"character":14}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.spellCheck","id":11556}},{"id":11736,"name":"step","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `step` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":123,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.step","id":11565}},{"id":11740,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the input."},"sources":[{"fileName":"src/ui/input.tsx","line":131,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedInputProps.style","id":11569}},{"id":11728,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":107,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.tabIndex","id":11557}},{"id":11724,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `type` for the input. Defaults to `text`."},"sources":[{"fileName":"src/ui/input.tsx","line":99,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"stringLiteral","value":"number"},{"type":"stringLiteral","value":"time"},{"type":"stringLiteral","value":"text"},{"type":"stringLiteral","value":"date"},{"type":"stringLiteral","value":"datetime-local"},{"type":"stringLiteral","value":"email"},{"type":"stringLiteral","value":"month"},{"type":"stringLiteral","value":"password"},{"type":"stringLiteral","value":"search"},{"type":"stringLiteral","value":"tel"},{"type":"stringLiteral","value":"url"},{"type":"stringLiteral","value":"week"}]},"inheritedFrom":{"type":"reference","name":"SharedInputProps.type","id":11553}},{"id":11742,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the input changes."},"signatures":[{"id":11743,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A function to be called when the input changes."},"parameters":[{"id":11744,"name":"e","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ChangeEvent","typeArguments":[{"type":"reference","name":"HTMLInputElement"}]}}],"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","name":"SharedInputProps.onChange","id":11571}}],"sources":[{"fileName":"src/ui/input.tsx","line":135,"character":12}],"inheritedFrom":{"type":"reference","name":"SharedInputProps.onChange","id":11571}}],"groups":[{"title":"Properties","kind":1024,"children":[11746,11745,11739,11731,11741,11725,11722,11730,11732,11733,11747,11735,11729,11737,11734,11738,11726,11723,11727,11736,11740,11728,11724]},{"title":"Methods","kind":2048,"children":[11742]}],"sources":[{"fileName":"src/ui/input_synced.tsx","line":16,"character":26}],"extendedTypes":[{"type":"reference","name":"SharedInputProps","id":11551}]},{"id":11551,"name":"SharedInputProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props shared between the {@link Input} and {@link InputSynced} components."},"children":[{"id":11575,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/input.tsx","line":139,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11574,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/input.tsx","line":137,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11568,"name":"autoComplete","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `autoComplete` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":129,"character":16}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11560,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":113,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":11570,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the input, separated by spaces."},"sources":[{"fileName":"src/ui/input.tsx","line":133,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11554,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `disabled` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":101,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":11559,"name":"id","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":111,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11561,"name":"max","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `max` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":115,"character":7}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]}},{"id":11562,"name":"maxLength","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `maxLength` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":117,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":11576,"name":"min","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `min` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":141,"character":7}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]}},{"id":11564,"name":"minLength","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `minLength` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":121,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":11558,"name":"name","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":109,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11566,"name":"pattern","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `pattern` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":125,"character":11}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11563,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The placeholder for the input."},"sources":[{"fileName":"src/ui/input.tsx","line":119,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11567,"name":"readOnly","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `readOnly` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":127,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":11555,"name":"required","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `required` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":103,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":11552,"name":"size","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The size of the input. Defaults to `default`."},"sources":[{"fileName":"src/ui/input.tsx","line":97,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635}},{"id":11556,"name":"spellCheck","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `spellcheck` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":105,"character":14}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":11565,"name":"step","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `step` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":123,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]}},{"id":11569,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the input."},"sources":[{"fileName":"src/ui/input.tsx","line":131,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":11557,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/input.tsx","line":107,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":11553,"name":"type","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `type` for the input. Defaults to `text`."},"sources":[{"fileName":"src/ui/input.tsx","line":99,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"stringLiteral","value":"number"},{"type":"stringLiteral","value":"time"},{"type":"stringLiteral","value":"text"},{"type":"stringLiteral","value":"date"},{"type":"stringLiteral","value":"datetime-local"},{"type":"stringLiteral","value":"email"},{"type":"stringLiteral","value":"month"},{"type":"stringLiteral","value":"password"},{"type":"stringLiteral","value":"search"},{"type":"stringLiteral","value":"tel"},{"type":"stringLiteral","value":"url"},{"type":"stringLiteral","value":"week"}]}},{"id":11571,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A function to be called when the input changes."},"signatures":[{"id":11572,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A function to be called when the input changes."},"parameters":[{"id":11573,"name":"e","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ChangeEvent","typeArguments":[{"type":"reference","name":"HTMLInputElement"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/ui/input.tsx","line":135,"character":12}]}],"groups":[{"title":"Properties","kind":1024,"children":[11575,11574,11568,11560,11570,11554,11559,11561,11562,11576,11564,11558,11566,11563,11567,11555,11552,11556,11565,11569,11557,11553]},{"title":"Methods","kind":2048,"children":[11571]}],"sources":[{"fileName":"src/ui/input.tsx","line":95,"character":33}],"extendedTypes":[{"type":"reference","name":"InputStyleProps","id":11527},{"type":"reference","name":"TooltipAnchorProps","typeArguments":[{"type":"reference","name":"HTMLInputElement"}]}],"extendedBy":[{"type":"reference","name":"InputProps","id":11613},{"type":"reference","name":"InputSyncedProps","id":11721}]},{"id":11689,"name":"SupportedInputType","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Supported types for the {@link Input} component. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#%3Cinput%3E_types) for more information."},"sources":[{"fileName":"src/ui/input.tsx","line":161,"character":23}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"number"},{"type":"stringLiteral","value":"time"},{"type":"stringLiteral","value":"text"},{"type":"stringLiteral","value":"date"},{"type":"stringLiteral","value":"datetime-local"},{"type":"stringLiteral","value":"email"},{"type":"stringLiteral","value":"month"},{"type":"stringLiteral","value":"password"},{"type":"stringLiteral","value":"search"},{"type":"stringLiteral","value":"tel"},{"type":"stringLiteral","value":"url"},{"type":"stringLiteral","value":"week"}]}},{"id":11684,"name":"ValidInputType","kind":4194304,"kindString":"Type alias","flags":{},"comment":{},"sources":[{"fileName":"src/ui/input.tsx","line":58,"character":19}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"number"},{"type":"stringLiteral","value":"time"},{"type":"stringLiteral","value":"text"},{"type":"stringLiteral","value":"date"},{"type":"stringLiteral","value":"datetime-local"},{"type":"stringLiteral","value":"email"},{"type":"stringLiteral","value":"month"},{"type":"stringLiteral","value":"password"},{"type":"stringLiteral","value":"search"},{"type":"stringLiteral","value":"tel"},{"type":"stringLiteral","value":"url"},{"type":"stringLiteral","value":"week"}]}},{"id":11715,"name":"Input","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"An input component. A wrapper around `<input>` that fits in with Airtable's user interface.","text":"[[ Story id=\"input--example\" title=\"Input example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/Input"},{"tag":"component","text":"\n"}]},"signatures":[{"id":11716,"name":"Input","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An input component. A wrapper around `<input>` that fits in with Airtable's user interface.","text":"[[ Story id=\"input--example\" title=\"Input example\" ]]\n"},"parameters":[{"id":11717,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"InputProps","id":11613}},{"id":11718,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLInputElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/input.tsx","line":209,"character":11}]},{"id":11784,"name":"InputSynced","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A wrapper around the {@link Input} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"input--example-synced\" title=\"Synced input example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/InputSynced"},{"tag":"grouppath","text":"UI/components/Input"},{"tag":"component","text":"\n"}]},"signatures":[{"id":11785,"name":"InputSynced","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A wrapper around the {@link Input} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"input--example-synced\" title=\"Synced input example\" ]]\n"},"parameters":[{"id":11786,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"InputSyncedProps","id":11721}},{"id":11787,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLInputElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/input_synced.tsx","line":30,"character":17}]}],"groups":[{"title":"Interfaces","kind":256,"children":[11613,11527,11721,11551]},{"title":"Type aliases","kind":4194304,"children":[11689,11684]},{"title":"Functions","kind":64,"children":[11715,11784]}],"sources":[{"fileName":"src/ui/input.tsx","line":1,"character":0}]},{"id":15180,"name":"@airtable/blocks/ui: Label","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/label.tsx","comment":{},"children":[{"id":15181,"name":"LabelProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Label} component. Also accepts:\n* {@link AllStylesProps}\n* {@link AriaProps}","tags":[{"tag":"docspath","text":"UI/components/Label\n"}]},"children":[{"id":15185,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The contents of the label."},"sources":[{"fileName":"src/ui/label.tsx","line":27,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]}},{"id":15186,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply, separated by spaces."},"sources":[{"fileName":"src/ui/label.tsx","line":29,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15188,"name":"dataAttributes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."},"sources":[{"fileName":"src/ui/label.tsx","line":33,"character":18}],"type":{"type":"reference","name":"DataAttributesProp"}},{"id":15183,"name":"htmlFor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `for` attribute. Should contain the `id` of the input."},"sources":[{"fileName":"src/ui/label.tsx","line":23,"character":11}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15184,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/label.tsx","line":25,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15189,"name":"role","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `role` attribute."},"sources":[{"fileName":"src/ui/label.tsx","line":35,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15182,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the label. Defaults to `default`. Can be a responsive prop object."},"sources":[{"fileName":"src/ui/label.tsx","line":21,"character":8}],"type":{"type":"reference","name":"TextSizeProp","id":14281}},{"id":15187,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles."},"sources":[{"fileName":"src/ui/label.tsx","line":31,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[15185,15186,15188,15183,15184,15189,15182,15187]}],"sources":[{"fileName":"src/ui/label.tsx","line":19,"character":20}],"extendedTypes":[{"type":"reference","name":"AllStylesProps","id":9678},{"type":"reference","name":"AriaProps","id":12200}]},{"id":15265,"name":"Label","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A label component.","text":"[[ Story id=\"label--example\" title=\"Label example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/Label"},{"tag":"component","text":"\n"}]},"signatures":[{"id":15266,"name":"Label","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A label component.","text":"[[ Story id=\"label--example\" title=\"Label example\" ]]\n"},"parameters":[{"id":15267,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"LabelProps","id":15181}},{"id":15268,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLLabelElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/label.tsx","line":46,"character":11}]}],"groups":[{"title":"Interfaces","kind":256,"children":[15181]},{"title":"Functions","kind":64,"children":[15265]}],"sources":[{"fileName":"src/ui/label.tsx","line":1,"character":0}]},{"id":15347,"name":"@airtable/blocks/ui: Link","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/link.tsx","comment":{},"children":[{"id":15381,"name":"LinkProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Link} component. Also supports:\n* {@link AriaProps}\n* {@link LinkStyleProps}","tags":[{"tag":"docspath","text":"UI/components/Link"}]},"children":[{"id":15393,"name":"children","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The contents of the link."},"sources":[{"fileName":"src/ui/link.tsx","line":145,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]}},{"id":15390,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the link."},"sources":[{"fileName":"src/ui/link.tsx","line":139,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15392,"name":"dataAttributes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."},"sources":[{"fileName":"src/ui/link.tsx","line":143,"character":18}],"type":{"type":"reference","name":"DataAttributesProp"}},{"id":15386,"name":"href","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The target URL or URL fragment for the link."},"sources":[{"fileName":"src/ui/link.tsx","line":131,"character":8}],"type":{"type":"intrinsic","name":"string"}},{"id":15384,"name":"icon","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The name of the icon or a react node. For more details, see the {@link IconName|list of supported icons}."},"sources":[{"fileName":"src/ui/link.tsx","line":127,"character":8}],"type":{"type":"union","types":[{"type":"reference","name":"IconName","id":12025},{"type":"reference","name":"ReactElement"}]}},{"id":15388,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/link.tsx","line":135,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15382,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the link. Defaults to `default`. Can be a responsive prop object."},"sources":[{"fileName":"src/ui/link.tsx","line":123,"character":8}],"type":{"type":"reference","name":"TextSizeProp","id":14281}},{"id":15391,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the link."},"sources":[{"fileName":"src/ui/link.tsx","line":141,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":15389,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Indicates if the link can be focused and if/where it participates in sequential keyboard navigation."},"sources":[{"fileName":"src/ui/link.tsx","line":137,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":15387,"name":"target","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Specifies where to display the linked URL."},"sources":[{"fileName":"src/ui/link.tsx","line":133,"character":10}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15385,"name":"underline","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Adds an underline to the link when true."},"sources":[{"fileName":"src/ui/link.tsx","line":129,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":15383,"name":"variant","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The variant of the link, which defines the color. Defaults to `default`."},"sources":[{"fileName":"src/ui/link.tsx","line":125,"character":11}],"type":{"type":"reference","name":"LinkVariant","id":15450}}],"groups":[{"title":"Properties","kind":1024,"children":[15393,15390,15392,15386,15384,15388,15382,15391,15389,15387,15385,15383]}],"sources":[{"fileName":"src/ui/link.tsx","line":121,"character":19}],"extendedTypes":[{"type":"reference","name":"AriaProps","id":12200},{"type":"reference","name":"LinkStyleProps","id":15348},{"type":"reference","name":"TooltipAnchorProps","typeArguments":[{"type":"reference","name":"HTMLAnchorElement"}]}]},{"id":15348,"name":"LinkStyleProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for the {@link Link} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link FontWeightProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"},"children":[{"id":15349,"name":"display","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."},"sources":[{"fileName":"src/ui/link.tsx","line":63,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"stringLiteral","value":"inline-flex"},{"type":"stringLiteral","value":"flex"},{"type":"stringLiteral","value":"none"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[15349]}],"sources":[{"fileName":"src/ui/link.tsx","line":54,"character":31}],"extendedTypes":[{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"FontWeightProps","id":9581},{"type":"reference","name":"SpacingSetProps","id":9534}],"extendedBy":[{"type":"reference","name":"LinkProps","id":15381}]},{"id":15450,"name":"LinkVariant","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Variants for the {@link Link} component:","text":"• **default**\n\nBlue text.\n\n• **dark**\n\nDark gray text.\n\n• **light**\n\nLight gray text.\n"},"sources":[{"fileName":"src/ui/link.tsx","line":103,"character":16}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"default"},{"type":"stringLiteral","value":"dark"},{"type":"stringLiteral","value":"light"}]}},{"id":15461,"name":"Link","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A styled link component with security benefits.","text":"[[ Story id=\"link--example\" title=\"Link example\" ]]\n\n## Security benefits\n\nThis component is a styled wrapper around the `<a>` tag that offers a few security benefits:\n\n- Limited XSS protection. If the `href` starts with `javascript:` or `data:`, `http://` will be prepended.\n- There is [reverse tabnabbing prevention](https://www.owasp.org/index.php/Reverse_Tabnabbing). If `target` is set, the `rel` attribute will be set to `noopener noreferrer`.\n\nDevelopers should use `Link` instead of `a` when possible.\n","tags":[{"tag":"docspath","text":"UI/components/Link"},{"tag":"component","text":"\n"}]},"signatures":[{"id":15462,"name":"Link","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A styled link component with security benefits.","text":"[[ Story id=\"link--example\" title=\"Link example\" ]]\n\n## Security benefits\n\nThis component is a styled wrapper around the `<a>` tag that offers a few security benefits:\n\n- Limited XSS protection. If the `href` starts with `javascript:` or `data:`, `http://` will be prepended.\n- There is [reverse tabnabbing prevention](https://www.owasp.org/index.php/Reverse_Tabnabbing). If `target` is set, the `rel` attribute will be set to `noopener noreferrer`.\n\nDevelopers should use `Link` instead of `a` when possible.\n"},"parameters":[{"id":15463,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"LinkProps","id":15381}},{"id":15464,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLAnchorElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/link.tsx","line":197,"character":10}]}],"groups":[{"title":"Interfaces","kind":256,"children":[15381,15348]},{"title":"Type aliases","kind":4194304,"children":[15450]},{"title":"Functions","kind":64,"children":[15461]}],"sources":[{"fileName":"src/ui/link.tsx","line":1,"character":0}]},{"id":15466,"name":"@airtable/blocks/ui: Loader","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/loader.tsx","comment":{},"children":[{"id":15488,"name":"LoaderProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Loader} component. Also accepts:\n* {@link LoaderStyleProps}","tags":[{"tag":"docspath","text":"UI/components/Loader"}]},"children":[{"id":15491,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the loading spinner."},"sources":[{"fileName":"src/ui/loader.tsx","line":51,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15489,"name":"fillColor","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The color of the loading spinner. Defaults to `'#888'`"},"sources":[{"fileName":"src/ui/loader.tsx","line":47,"character":13}],"type":{"type":"intrinsic","name":"string"}},{"id":15490,"name":"scale","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A scalar for the loading spinner. Increasing the scale increases the size of the loading spinner. Defaults to `0.3`."},"sources":[{"fileName":"src/ui/loader.tsx","line":49,"character":9}],"type":{"type":"intrinsic","name":"number"}},{"id":15492,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the loading spinner."},"sources":[{"fileName":"src/ui/loader.tsx","line":53,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[15491,15489,15490,15492]}],"sources":[{"fileName":"src/ui/loader.tsx","line":45,"character":21}],"extendedTypes":[{"type":"reference","name":"LoaderStyleProps","id":15467}]},{"id":15467,"name":"LoaderStyleProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Style props for the {@link Loader} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"},"children":[{"id":15472,"name":"alignSelf","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Aligns flex items of the current flex line, overriding the `alignItems` value."},"sources":[{"fileName":"src/ui/system/flex_item/align_self.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"AlignSelfProperty"}]},"inheritedFrom":{"type":"reference","name":"AlignSelfProps.alignSelf","id":9334}},{"id":15478,"name":"bottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/bottom.ts","line":11,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"BottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"BottomProps.bottom","id":9410}},{"id":15468,"name":"flex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."},"sources":[{"fileName":"src/ui/system/flex_item/flex.ts","line":10,"character":8}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"FlexProps.flex","id":9302}},{"id":15471,"name":"flexBasis","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the initial main size of a flex item."},"sources":[{"fileName":"src/ui/system/flex_item/flex_basis.ts","line":10,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"FlexBasisProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"FlexBasisProps.flexBasis","id":9326}},{"id":15469,"name":"flexGrow","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."},"sources":[{"fileName":"src/ui/system/flex_item/flex_grow.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]},"inheritedFrom":{"type":"reference","name":"FlexGrowProps.flexGrow","id":9310}},{"id":15470,"name":"flexShrink","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."},"sources":[{"fileName":"src/ui/system/flex_item/flex_shrink.ts","line":10,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]},"inheritedFrom":{"type":"reference","name":"FlexShrinkProps.flexShrink","id":9318}},{"id":15479,"name":"left","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/left.ts","line":11,"character":8}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"LeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"LeftProps.left","id":9421}},{"id":15481,"name":"margin","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":17,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.margin","id":9453}},{"id":15484,"name":"marginBottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":23,"character":16}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginBottomProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginBottom","id":9456}},{"id":15485,"name":"marginLeft","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":25,"character":14}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginLeftProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginLeft","id":9457}},{"id":15483,"name":"marginRight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":21,"character":15}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginRightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginRight","id":9455}},{"id":15482,"name":"marginTop","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":19,"character":13}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginTopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginTop","id":9454}},{"id":15486,"name":"marginX","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":27,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginX","id":9458}},{"id":15487,"name":"marginY","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."},"sources":[{"fileName":"src/ui/system/spacing/margin.ts","line":29,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"MarginProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"MarginProps.marginY","id":9459}},{"id":15474,"name":"order","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."},"sources":[{"fileName":"src/ui/system/flex_item/order.ts","line":10,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"GlobalsNumber"}]},"inheritedFrom":{"type":"reference","name":"OrderProps.order","id":9350}},{"id":15475,"name":"position","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."},"sources":[{"fileName":"src/ui/system/position/position.ts","line":10,"character":12}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"PositionProperty"}]},"inheritedFrom":{"type":"reference","name":"PositionProps.position","id":9370}},{"id":15477,"name":"right","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/right.ts","line":11,"character":9}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"RightProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"RightProps.right","id":9399}},{"id":15476,"name":"top","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."},"sources":[{"fileName":"src/ui/system/position/top.ts","line":11,"character":7}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"TopProperty","typeArguments":[{"type":"reference","name":"Length"}]}]},"inheritedFrom":{"type":"reference","name":"TopProps.top","id":9388}},{"id":15480,"name":"zIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."},"sources":[{"fileName":"src/ui/system/position/z_index.ts","line":10,"character":10}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"reference","name":"ZIndexProperty"}]},"inheritedFrom":{"type":"reference","name":"ZIndexProps.zIndex","id":9432}}],"groups":[{"title":"Properties","kind":1024,"children":[15472,15478,15468,15471,15469,15470,15479,15481,15484,15485,15483,15482,15486,15487,15474,15475,15477,15476,15480]}],"sources":[{"fileName":"src/ui/loader.tsx","line":28,"character":26}],"extendedTypes":[{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"LoaderProps","id":15488}]},{"id":15516,"name":"Loader","kind":64,"kindString":"Function","flags":{"isExported":true,"isConst":true},"comment":{"shortText":"A loading spinner component.","text":"[[ Story id=\"loader--example\" title=\"Loader example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/Loader"},{"tag":"component","text":"\n"}]},"signatures":[{"id":15517,"name":"Loader","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A loading spinner component.","text":"[[ Story id=\"loader--example\" title=\"Loader example\" ]]\n"},"parameters":[{"id":15518,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"LoaderProps","id":15488}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/loader.tsx","line":65,"character":12}]}],"groups":[{"title":"Interfaces","kind":256,"children":[15488,15467]},{"title":"Functions","kind":64,"children":[15516]}],"sources":[{"fileName":"src/ui/loader.tsx","line":1,"character":0}]},{"id":15770,"name":"@airtable/blocks/ui: Loading external resources","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/remote_utils.ts","comment":{},"children":[{"id":15771,"name":"loadCSSFromString","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Injects CSS from a string into the page. Returns the HTML style element inserted into the page.","tags":[{"tag":"example","text":"\n```js\nimport {loadCSSFromString} from '@airtable/blocks/ui';\nloadCSSFromString('body { background: red; }');\n```"},{"tag":"docspath","text":"UI/utils/loadCSSFromString\n"}]},"signatures":[{"id":15772,"name":"loadCSSFromString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Injects CSS from a string into the page. Returns the HTML style element inserted into the page.","tags":[{"tag":"example","text":"\n```js\nimport {loadCSSFromString} from '@airtable/blocks/ui';\nloadCSSFromString('body { background: red; }');\n```"},{"tag":"docspath","text":"UI/utils/loadCSSFromString\n"}]},"parameters":[{"id":15773,"name":"css","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The CSS string."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"HTMLStyleElement"}}],"sources":[{"fileName":"src/ui/remote_utils.ts","line":15,"character":33}]},{"id":15774,"name":"loadCSSFromURLAsync","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Injects CSS from a remote URL.","text":"Returns a promise that resolves to the HTML style element inserted into the page.\n","tags":[{"tag":"example","text":"\n```js\nimport {loadCSSFromURLAsync} from '@airtable/blocks/ui';\nloadCSSFromURLAsync('https://example.com/style.css');\n```"},{"tag":"docspath","text":"UI/utils/loadCSSFromURLAsync\n"}]},"signatures":[{"id":15775,"name":"loadCSSFromURLAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Injects CSS from a remote URL.","text":"Returns a promise that resolves to the HTML style element inserted into the page.\n","tags":[{"tag":"example","text":"\n```js\nimport {loadCSSFromURLAsync} from '@airtable/blocks/ui';\nloadCSSFromURLAsync('https://example.com/style.css');\n```"},{"tag":"docspath","text":"UI/utils/loadCSSFromURLAsync\n"}]},"parameters":[{"id":15776,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The URL of the stylesheet."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"reference","name":"HTMLLinkElement"}]}}],"sources":[{"fileName":"src/ui/remote_utils.ts","line":36,"character":35}]},{"id":15777,"name":"loadScriptFromURLAsync","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Injects Javascript from a remote URL.","text":"Returns a promise that resolves to the HTML script element inserted into the page.\n","tags":[{"tag":"example","text":"\n```js\nimport {loadScriptFromURLAsync} from '@airtable/blocks/ui';\nloadScriptFromURLAsync('https://example.com/script.js');\n```"},{"tag":"docspath","text":"UI/utils/loadScriptFromURLAsync\n"}]},"signatures":[{"id":15778,"name":"loadScriptFromURLAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Injects Javascript from a remote URL.","text":"Returns a promise that resolves to the HTML script element inserted into the page.\n","tags":[{"tag":"example","text":"\n```js\nimport {loadScriptFromURLAsync} from '@airtable/blocks/ui';\nloadScriptFromURLAsync('https://example.com/script.js');\n```"},{"tag":"docspath","text":"UI/utils/loadScriptFromURLAsync\n"}]},"parameters":[{"id":15779,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The URL of the script."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"reference","name":"HTMLScriptElement"}]}}],"sources":[{"fileName":"src/ui/remote_utils.ts","line":67,"character":38}]}],"groups":[{"title":"Functions","kind":64,"children":[15771,15774,15777]}],"sources":[{"fileName":"src/ui/remote_utils.ts","line":1,"character":0}]},{"id":15561,"name":"@airtable/blocks/ui: Popover","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/popover.tsx","comment":{},"children":[{"id":15568,"name":"FitInWindowModes","kind":4,"kindString":"Enumeration","flags":{"isExported":true},"comment":{"shortText":"Dictates how a {@link Popover} or {@link Tooltip} component should be kept within the viewport. Accessed via `Popover.fitInWindowModes` or `Tooltip.fitInWindowModes`."},"children":[{"id":15570,"name":"FLIP","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"If the popover would be placed offscreen, flip the placement to the other side."},"sources":[{"fileName":"src/ui/popover.tsx","line":56,"character":8}],"defaultValue":"\"flip\""},{"id":15569,"name":"NONE","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Allow the popover to be placed offscreen."},"sources":[{"fileName":"src/ui/popover.tsx","line":54,"character":8}],"defaultValue":"\"none\""},{"id":15571,"name":"NUDGE","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"If the popover would be placed offscreen, nudge the popover just enough so that it stays in the viewport."},"sources":[{"fileName":"src/ui/popover.tsx","line":58,"character":9}],"defaultValue":"\"nudge\""}],"groups":[{"title":"Enumeration members","kind":16,"children":[15570,15569,15571]}],"sources":[{"fileName":"src/ui/popover.tsx","line":52,"character":28}]},{"id":15562,"name":"PopoverPlacements","kind":4,"kindString":"Enumeration","flags":{"isExported":true},"comment":{"shortText":"Dictates how a {@link Tooltip} component should be positioned relative\nto the anchor element. Accessed via `Tooltip.placements`."},"children":[{"id":15564,"name":"BOTTOM","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Positions the popover below the anchor element."},"sources":[{"fileName":"src/ui/popover.tsx","line":25,"character":10}],"defaultValue":"\"bottom\""},{"id":15565,"name":"CENTER","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Positions the popover so it's center aligned with the anchor element."},"sources":[{"fileName":"src/ui/popover.tsx","line":27,"character":10}],"defaultValue":"\"center\""},{"id":15566,"name":"LEFT","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Positions the popover left of the anchor element."},"sources":[{"fileName":"src/ui/popover.tsx","line":29,"character":8}],"defaultValue":"\"left\""},{"id":15567,"name":"RIGHT","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Positions the popover right of the anchor element."},"sources":[{"fileName":"src/ui/popover.tsx","line":31,"character":9}],"defaultValue":"\"right\""},{"id":15563,"name":"TOP","kind":16,"kindString":"Enumeration member","flags":{"isExported":true},"comment":{"shortText":"Positions the popover above the anchor element."},"sources":[{"fileName":"src/ui/popover.tsx","line":23,"character":7}],"defaultValue":"\"top\""}],"groups":[{"title":"Enumeration members","kind":16,"children":[15564,15565,15566,15567,15563]}],"sources":[{"fileName":"src/ui/popover.tsx","line":21,"character":29}]},{"id":15769,"name":"FitInWindowMode","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"Any of the supported {@link FitInWindowModes}."},"sources":[{"fileName":"src/ui/popover.tsx","line":64,"character":27}],"type":{"type":"union","types":[{"type":"reference","name":"NONE","id":15569},{"type":"reference","name":"FLIP","id":15570},{"type":"reference","name":"NUDGE","id":15571}]}},{"id":15767,"name":"PopoverPlacementX","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"Any of the supported {@link PopoverPlacements} for horizontal positioning."},"sources":[{"fileName":"src/ui/popover.tsx","line":36,"character":29}],"type":{"type":"union","types":[{"type":"reference","name":"LEFT","id":15566},{"type":"reference","name":"CENTER","id":15565},{"type":"reference","name":"RIGHT","id":15567}]}},{"id":15768,"name":"PopoverPlacementY","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"Any of the supported {@link PopoverPlacements} for vertical positioning."},"sources":[{"fileName":"src/ui/popover.tsx","line":43,"character":29}],"type":{"type":"union","types":[{"type":"reference","name":"TOP","id":15563},{"type":"reference","name":"CENTER","id":15565},{"type":"reference","name":"BOTTOM","id":15564}]}}],"groups":[{"title":"Enumerations","kind":4,"children":[15568,15562]},{"title":"Type aliases","kind":4194304,"children":[15769,15767,15768]}],"sources":[{"fileName":"src/ui/popover.tsx","line":1,"character":0}]},{"id":12726,"name":"@airtable/blocks/ui: ProgressBar","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/progress_bar.tsx","comment":{},"children":[{"id":12754,"name":"ProgressBarProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link ProgressBar} component. Also accepts:\n* {@link ProgressBarStyleProps}","tags":[{"tag":"docspath","text":"UI/components/ProgressBar"}]},"typeParameter":[{"id":12785,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":12755,"name":"barColor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A CSS color, such as `#ff9900`. Defaults to a blue color."},"sources":[{"fileName":"src/ui/progress_bar.tsx","line":103,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12757,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra `className`s to apply to the element, separated by spaces."},"sources":[{"fileName":"src/ui/progress_bar.tsx","line":107,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12756,"name":"progress","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A number between 0 and 1. 0 is 0% complete, 0.5 is 50% complete, 1 is 100% complete. If you include a number outside of the range, the value will be clamped to be inside of the range."},"sources":[{"fileName":"src/ui/progress_bar.tsx","line":105,"character":12}],"type":{"type":"intrinsic","name":"number"}},{"id":12758,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Extra styles to apply to the progress bar."},"sources":[{"fileName":"src/ui/progress_bar.tsx","line":109,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[12755,12757,12756,12758]}],"sources":[{"fileName":"src/ui/progress_bar.tsx","line":101,"character":26}],"extendedTypes":[{"type":"reference","name":"ProgressBarStyleProps","id":12727},{"type":"reference","name":"TooltipAnchorProps"}]},{"id":12727,"name":"ProgressBarStyleProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Style props for the {@link ProgressBar} component. Also accepts:\n* {@link BackgroundColorProps}\n* {@link FlexItemSetProps}\n* {@link HeightProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"},"children":[{"id":12728,"name":"display","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."},"sources":[{"fileName":"src/ui/progress_bar.tsx","line":66,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"stringLiteral","value":"block"},{"type":"stringLiteral","value":"inline"},{"type":"stringLiteral","value":"inline-block"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[12728]}],"sources":[{"fileName":"src/ui/progress_bar.tsx","line":56,"character":31}],"extendedTypes":[{"type":"reference","name":"BackgroundColorProps","id":9066},{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221},{"type":"reference","name":"HeightProps","id":9171},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"ProgressBarProps","id":12754}]},{"id":12802,"name":"ProgressBar","kind":64,"kindString":"Function","flags":{"isExported":true,"isConst":true},"comment":{"shortText":"A progress bar.","tags":[{"tag":"example","text":"\n```js\nimport {ProgressBar} from '@airtable/blocks/ui';\n\nfunction MyComponent() {\n    return (\n        <ProgressBar\n            progress={0.6}\n            barColor='#ff9900'\n        />\n    );\n}\n```"},{"tag":"docspath","text":"UI/components/ProgressBar"},{"tag":"component","text":"\n"}]},"signatures":[{"id":12803,"name":"ProgressBar","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A progress bar."},"parameters":[{"id":12804,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ProgressBarProps","id":12754}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/progress_bar.tsx","line":138,"character":17}]}],"groups":[{"title":"Interfaces","kind":256,"children":[12754,12727]},{"title":"Functions","kind":64,"children":[12802]}],"sources":[{"fileName":"src/ui/progress_bar.tsx","line":1,"character":0}]},{"id":12870,"name":"@airtable/blocks/ui: RecordCard","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/record_card.tsx","comment":{},"children":[{"id":12952,"name":"RecordCard","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"A card component that displays an Airtable record.","text":"[[ Story id=\"recordcard--example\" title=\"RecordCard example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/RecordCard"},{"tag":"component","text":"\n"}]},"typeParameter":[{"id":13032,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}},{"id":13033,"name":"SS","kind":131072,"kindString":"Type parameter","flags":{}},{"id":13074,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/record_card.tsx","line":233,"character":23}],"extendedTypes":[{"type":"reference","name":"Component","typeArguments":[{"type":"reference","name":"RecordCardProps","id":12902}]}]},{"id":12902,"name":"RecordCardProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link RecordCard} component. Also accepts:\n* {@link RecordCardStyleProps}","tags":[{"tag":"docspath","text":"UI/components/RecordCard\n"}]},"children":[{"id":12905,"name":"attachmentCoverField","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Attachment field to display as an image in the square preview for the card. If omitted or not an attachment field, it uses for the first attachment field in `fields`. If `fields` is not defined, it uses the first attachment field in the view."},"sources":[{"fileName":"src/ui/record_card.tsx","line":138,"character":24}],"type":{"type":"reference","name":"Field","id":1724}},{"id":12923,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the record card."},"sources":[{"fileName":"src/ui/record_card.tsx","line":158,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":12908,"name":"expandRecordOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Options object for expanding a record."},"sources":[{"fileName":"src/ui/record_card.tsx","line":144,"character":23}],"type":{"type":"union","types":[{"type":"reference","name":"ExpandRecordOpts","id":11999},{"type":"intrinsic","name":"null"}]}},{"id":12909,"name":"fields","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Fields to display in the card. The primary field is always displayed."},"sources":[{"fileName":"src/ui/record_card.tsx","line":146,"character":10}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Field","id":1724}]}},{"id":12907,"name":"height","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Height of the record card."},"sources":[{"fileName":"src/ui/record_card.tsx","line":142,"character":10}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":12918,"name":"onClick","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Click event handler for the record card. If undefined, uses default behavior to expand record. If null, no operation is performed."},"sources":[{"fileName":"src/ui/record_card.tsx","line":154,"character":11}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":12919,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":12920,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":12921,"name":"e","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"MouseEvent","typeArguments":[{"type":"reference","name":"HTMLAnchorElement"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/ui/record_card.tsx","line":154,"character":13}]}},{"type":"intrinsic","name":"null"}]}},{"id":12910,"name":"onMouseEnter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mouse enter event handler for the record card."},"sources":[{"fileName":"src/ui/record_card.tsx","line":149,"character":16}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":12911,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":12912,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":12913,"name":"e","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"MouseEvent","typeArguments":[{"type":"reference","name":"HTMLAnchorElement"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/ui/record_card.tsx","line":149,"character":18}]}},{"type":"intrinsic","name":"null"}]}},{"id":12914,"name":"onMouseLeave","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mouse leave event handler for the record card."},"sources":[{"fileName":"src/ui/record_card.tsx","line":151,"character":16}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":12915,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":12916,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":12917,"name":"e","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"MouseEvent","typeArguments":[{"type":"reference","name":"HTMLAnchorElement"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/ui/record_card.tsx","line":151,"character":18}]}},{"type":"intrinsic","name":"null"}]}},{"id":12903,"name":"record","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Record to display in the card."},"sources":[{"fileName":"src/ui/record_card.tsx","line":134,"character":10}],"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordDef","id":104}]}},{"id":12926,"name":"renderInvalidCellValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Render function if provided and validation fails."},"sources":[{"fileName":"src/ui/record_card.tsx","line":164,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":12927,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":12928,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":12929,"name":"cellValue","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":12930,"name":"field","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Field","id":1724}}],"type":{"type":"reference","name":"ReactElement"}}]}}]}},{"id":12924,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the record card."},"sources":[{"fileName":"src/ui/record_card.tsx","line":160,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":12904,"name":"view","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The view model to use for field order and record coloring."},"sources":[{"fileName":"src/ui/record_card.tsx","line":136,"character":8}],"type":{"type":"reference","name":"View","id":2404}},{"id":12906,"name":"width","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Width of the record card."},"sources":[{"fileName":"src/ui/record_card.tsx","line":140,"character":9}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[12905,12923,12908,12909,12907,12918,12910,12914,12903,12926,12924,12904,12906]}],"sources":[{"fileName":"src/ui/record_card.tsx","line":132,"character":25}],"extendedTypes":[{"type":"reference","name":"RecordCardStyleProps","id":12871}]},{"id":12871,"name":"RecordCardStyleProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Style props for the {@link RecordCard} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"},"sources":[{"fileName":"src/ui/record_card.tsx","line":52,"character":30}],"extendedTypes":[{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"RecordCardProps","id":12902}]}],"groups":[{"title":"Classes","kind":128,"children":[12952]},{"title":"Interfaces","kind":256,"children":[12902,12871]}],"sources":[{"fileName":"src/ui/record_card.tsx","line":1,"character":0}]},{"id":13137,"name":"@airtable/blocks/ui: RecordCardList","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/record_card_list.tsx","comment":{},"children":[{"id":13233,"name":"RecordCardList","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Scrollable list of record cards.","text":"[[ Story id=\"recordcardlist--example\" title=\"RecordCardList example\" height=\"560px\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/RecordCardList"},{"tag":"component","text":"\n"}]},"typeParameter":[{"id":13300,"name":"SS","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/record_card_list.tsx","line":289,"character":27}],"extendedTypes":[{"type":"reference","name":"Component","typeArguments":[{"type":"reference","name":"RecordCardListProps","id":13176},{"type":"reference","name":"RecordCardListState"}]}]},{"id":13176,"name":"RecordCardListProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link RecordCardList} component. Also accepts:\n* {@link RecordCardListStyleProps}","tags":[{"tag":"docspath","text":"UI/components/RecordCardList\n"}]},"children":[{"id":13199,"name":"attachmentCoverField","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Attachment field to display as an image in the square preview for each record card. If omitted or not an attachment field, it uses for the first attachment field in `fields`. If `fields` is not defined, it uses the first attachment field in the view."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":243,"character":24}],"type":{"type":"reference","name":"Field","id":1724}},{"id":13200,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the record card list."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":245,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":13197,"name":"fields","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Fields to display in each record card. The primary field is always displayed."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":239,"character":10}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Field","id":1724}]}},{"id":13182,"name":"onRecordClick","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Click event handler for an individual record card. If undefined, uses default behavior to expand record. If null, no operation is performed."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":233,"character":17}],"type":{"type":"union","types":[{"type":"intrinsic","name":"null"},{"type":"reflection","declaration":{"id":13183,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13184,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13185,"name":"record","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordDef","id":104}]}},{"id":13186,"name":"index","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/ui/record_card_list.tsx","line":233,"character":26}]}}]}},{"id":13187,"name":"onRecordMouseEnter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mouse enter event handler for an individual record card."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":235,"character":22}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":13188,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13189,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13190,"name":"record","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordDef","id":104}]}},{"id":13191,"name":"index","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}}]}}]}},{"id":13192,"name":"onRecordMouseLeave","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mouse leave event handler for an individual record card."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":237,"character":22}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":13193,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13194,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13195,"name":"record","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"reference","name":"RecordDef","id":104}]}},{"id":13196,"name":"index","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}}]}}]}},{"id":13178,"name":"onScroll","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Scroll event handler for the list window."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":231,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":13179,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13180,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13181,"name":"scrollEvent","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"RecordCardListScrollEvent","id":13172}}],"type":{"type":"intrinsic","name":"void"}}]}}]}},{"id":13177,"name":"records","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Records to display in card list."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":229,"character":11}],"type":{"type":"union","types":[{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]},{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"RecordDef","id":104}]}]}},{"id":13201,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the record card list."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":247,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":13198,"name":"view","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The view model to use for field order and record coloring."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":241,"character":8}],"type":{"type":"reference","name":"View","id":2404}}],"groups":[{"title":"Properties","kind":1024,"children":[13199,13200,13197,13182,13187,13192,13178,13177,13201,13198]}],"sources":[{"fileName":"src/ui/record_card_list.tsx","line":227,"character":29}]},{"id":13172,"name":"RecordCardListScrollEvent","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Scroll event for {@link RecordCardList}."},"children":[{"id":13173,"name":"scrollDirection","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The direction of the scroll event."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":212,"character":19}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"forward"},{"type":"stringLiteral","value":"backward"}]}},{"id":13174,"name":"scrollOffset","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The vertical offset of the scrollable area."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":214,"character":16}],"type":{"type":"intrinsic","name":"number"}},{"id":13175,"name":"scrollUpdateWasRequested","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"`true` for programmatic scrolling and `false` if the scroll was the result of a user interaction in the browser."},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":216,"character":28}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[13173,13174,13175]}],"sources":[{"fileName":"src/ui/record_card_list.tsx","line":210,"character":35}]},{"id":13202,"name":"RecordCardListStyleProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Style props for the {@link RecordCardList} component. Accepts:\n* {@link DimensionsSetProps}\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"},"sources":[{"fileName":"src/ui/record_card_list.tsx","line":259,"character":34}],"extendedTypes":[{"type":"reference","name":"DimensionsSetProps","id":9231},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}]}],"groups":[{"title":"Classes","kind":128,"children":[13233]},{"title":"Interfaces","kind":256,"children":[13176,13172,13202]}],"sources":[{"fileName":"src/ui/record_card_list.tsx","line":1,"character":0}]},{"id":10592,"name":"@airtable/blocks/ui: Select","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/select_and_select_buttons_helpers.ts","comment":{},"children":[{"id":10593,"name":"SelectOption","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"A select option for {@link Select}, {@link TablePicker}, {@link ViewPicker}, {@link FieldPicker}, and their `Synced` counterparts."},"children":[{"id":10596,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, this option will not be selectable."},"sources":[{"fileName":"src/ui/select_and_select_buttons_helpers.ts","line":32,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":10595,"name":"label","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The label for the select option."},"sources":[{"fileName":"src/ui/select_and_select_buttons_helpers.ts","line":30,"character":9}],"type":{"type":"reference","name":"React.ReactNode"}},{"id":10594,"name":"value","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The value for the select option."},"sources":[{"fileName":"src/ui/select_and_select_buttons_helpers.ts","line":28,"character":9}],"type":{"type":"reference","name":"SelectOptionValue","id":10597}}],"groups":[{"title":"Properties","kind":1024,"children":[10596,10595,10594]}],"sources":[{"fileName":"src/ui/select_and_select_buttons_helpers.ts","line":26,"character":29}]},{"id":10782,"name":"SelectProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props for the {@link Select} component. Also accepts:\n* {@link SelectStyleProps}","tags":[{"tag":"docspath","text":"UI/components/Select\n"}]},"children":[{"id":10799,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":10797,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":10798,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":10791,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":10790,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":10795,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":10792,"name":"id","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":10793,"name":"name","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":10785,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A function to be called when the selected option changes."},"sources":[{"fileName":"src/ui/select.tsx","line":156,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":10786,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":10787,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":10788,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SelectOptionValue","id":10597}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedSelectProps.onChange","id":10730}},{"id":10784,"name":"options","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The list of select options."},"sources":[{"fileName":"src/ui/select.tsx","line":154,"character":11}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"SelectOption","id":10593}]},"inheritedFrom":{"type":"reference","name":"SharedSelectProps.options","id":10729}},{"id":10789,"name":"size","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":10796,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":10794,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}},{"id":10783,"name":"value","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The value of the selected option."},"sources":[{"fileName":"src/ui/select.tsx","line":181,"character":9}],"type":{"type":"reference","name":"SelectOptionValue","id":10597}}],"groups":[{"title":"Properties","kind":1024,"children":[10799,10797,10798,10791,10790,10795,10792,10793,10785,10784,10789,10796,10794,10783]}],"sources":[{"fileName":"src/ui/select.tsx","line":179,"character":28}],"extendedTypes":[{"type":"reference","name":"SharedSelectProps","id":10728}]},{"id":10654,"name":"SelectStyleProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Style props shared between the following components.\n* {@link Select}, {@link SelectSynced}\n* {@link TablePicker}, {@link TablePickerSynced}\n* {@link ViewPicker}, {@link ViewPickerSynced}\n* {@link FieldPicker}, {@link FieldPickerSynced}","text":"Also accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link MaxWidthProps}\n"},"children":[{"id":10655,"name":"display","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."},"sources":[{"fileName":"src/ui/select.tsx","line":84,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"stringLiteral","value":"inline-flex"},{"type":"stringLiteral","value":"flex"},{"type":"stringLiteral","value":"none"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[10655]}],"sources":[{"fileName":"src/ui/select.tsx","line":76,"character":26}],"extendedTypes":[{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"SharedSelectBaseProps","id":10679}]},{"id":13385,"name":"SelectSyncedProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link SelectSynced} component. Also accepts:\n* {@link SelectStyleProps}","tags":[{"tag":"docspath","text":"UI/components/SelectSynced"},{"tag":"grouppath","text":"UI/components/Select\n"}]},"children":[{"id":13402,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":13400,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":13401,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":13394,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":13393,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":13398,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":13386,"name":"globalConfigKey","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A string key or array key path in {@link GlobalConfig}. The selected option will always reflect the value stored in {@link GlobalConfig} for this key. Selecting a new option will update {@link GlobalConfig}."},"sources":[{"fileName":"src/ui/select_synced.tsx","line":18,"character":19}],"type":{"type":"reference","name":"GlobalConfigKey","id":682}},{"id":13395,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":13396,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":13388,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected option changes."},"sources":[{"fileName":"src/ui/select.tsx","line":156,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":13389,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13390,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13391,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SelectOptionValue","id":10597}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedSelectProps.onChange","id":10730}},{"id":13387,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The list of select options."},"sources":[{"fileName":"src/ui/select.tsx","line":154,"character":11}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"SelectOption","id":10593}]},"inheritedFrom":{"type":"reference","name":"SharedSelectProps.options","id":10729}},{"id":13392,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":13399,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":13397,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}}],"groups":[{"title":"Properties","kind":1024,"children":[13402,13400,13401,13394,13393,13398,13386,13395,13396,13388,13387,13392,13399,13397]}],"sources":[{"fileName":"src/ui/select_synced.tsx","line":16,"character":27}],"extendedTypes":[{"type":"reference","name":"SharedSelectProps","id":10728}]},{"id":10679,"name":"SharedSelectBaseProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props shared between the following components:\n* {@link Select}, {@link SelectSynced}\n* {@link TablePicker}, {@link TablePickerSynced}\n* {@link ViewPicker}, {@link ViewPickerSynced}\n* {@link FieldPicker}, {@link FieldPickerSynced}"},"children":[{"id":10690,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":10688,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":10689,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":10682,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":10681,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":10686,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":10683,"name":"id","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":10684,"name":"name","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":10680,"name":"size","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635}},{"id":10687,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":10685,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[10690,10688,10689,10682,10681,10686,10683,10684,10680,10687,10685]}],"sources":[{"fileName":"src/ui/select.tsx","line":96,"character":38}],"extendedTypes":[{"type":"reference","name":"TooltipAnchorProps","typeArguments":[{"type":"reference","name":"HTMLSelectElement"}]},{"type":"reference","name":"SelectStyleProps","id":10654}],"extendedBy":[{"type":"reference","name":"SharedSelectProps","id":10728},{"type":"reference","name":"SharedTablePickerProps","id":10942},{"type":"reference","name":"SharedFieldPickerProps","id":11139},{"type":"reference","name":"SharedViewPickerProps","id":11333}]},{"id":10728,"name":"SharedSelectProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props shared between the {@link Select} and {@link SelectSynced} components."},"children":[{"id":10744,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":10742,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":10743,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":10736,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":10735,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":10740,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":10737,"name":"id","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":10738,"name":"name","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":10730,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A function to be called when the selected option changes."},"sources":[{"fileName":"src/ui/select.tsx","line":156,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":10731,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":10732,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":10733,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SelectOptionValue","id":10597}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]}},{"id":10729,"name":"options","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The list of select options."},"sources":[{"fileName":"src/ui/select.tsx","line":154,"character":11}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"SelectOption","id":10593}]}},{"id":10734,"name":"size","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":10741,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":10739,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}}],"groups":[{"title":"Properties","kind":1024,"children":[10744,10742,10743,10736,10735,10740,10737,10738,10730,10729,10734,10741,10739]}],"sources":[{"fileName":"src/ui/select.tsx","line":152,"character":34}],"extendedTypes":[{"type":"reference","name":"SharedSelectBaseProps","id":10679}],"extendedBy":[{"type":"reference","name":"SelectProps","id":10782},{"type":"reference","name":"SelectSyncedProps","id":13385}]},{"id":10597,"name":"SelectOptionValue","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"Supported value types for {@link SelectOption}."},"sources":[{"fileName":"src/ui/select_and_select_buttons_helpers.ts","line":10,"character":29}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"undefined"}]}},{"id":10865,"name":"Select","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"Dropdown menu component. A wrapper around `<select>` that fits in with Airtable's user interface.","text":"[[ Story id=\"select--example\" title=\"Select example\" ]]\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/Select\n"}]},"signatures":[{"id":10866,"name":"Select","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Dropdown menu component. A wrapper around `<select>` that fits in with Airtable's user interface.","text":"[[ Story id=\"select--example\" title=\"Select example\" ]]\n"},"parameters":[{"id":10867,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SelectProps","id":10782}},{"id":10868,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLSelectElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/select.tsx","line":194,"character":12}]},{"id":13440,"name":"SelectSynced","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A wrapper around the {@link Select} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"select--synced-example\" title=\"Synced select example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/SelectSynced"},{"tag":"grouppath","text":"UI/components/Select"},{"tag":"component","text":"\n"}]},"signatures":[{"id":13441,"name":"SelectSynced","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A wrapper around the {@link Select} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"select--synced-example\" title=\"Synced select example\" ]]\n"},"parameters":[{"id":13442,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SelectSyncedProps","id":13385}},{"id":13443,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLSelectElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/select_synced.tsx","line":30,"character":18}]}],"groups":[{"title":"Interfaces","kind":256,"children":[10593,10782,10654,13385,10679,10728]},{"title":"Type aliases","kind":4194304,"children":[10597]},{"title":"Functions","kind":64,"children":[10865,13440]}],"sources":[{"fileName":"src/ui/select_and_select_buttons_helpers.ts","line":1,"character":0}]},{"id":13445,"name":"@airtable/blocks/ui: SelectButtons","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/select_buttons.tsx","comment":{},"children":[{"id":13520,"name":"SelectButtonsProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link SelectButtons} component. Also accepts:\n* {@link SelectButtonsStyleProps}","tags":[{"tag":"docspath","text":"UI/components/SelectButtons\n"}]},"typeParameter":[{"id":13557,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":13533,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":109,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.['aria-describedby']","id":13482}},{"id":13531,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":105,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.['aria-label']","id":13480}},{"id":13532,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":107,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.['aria-labelledby']","id":13481}},{"id":13528,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":99,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.className","id":13477}},{"id":13527,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":97,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.disabled","id":13476}},{"id":13523,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected option changes."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":95,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":13524,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13525,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13526,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SelectOptionValue","id":10597}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.onChange","id":13472}},{"id":13522,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The list of select options."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":93,"character":11}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"SelectOption","id":10593}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.options","id":13471}},{"id":13529,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the select buttons."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":101,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.size","id":13478}},{"id":13530,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":103,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.style","id":13479}},{"id":13521,"name":"value","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The value of the selected option."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":141,"character":9}],"type":{"type":"reference","name":"SelectOptionValue","id":10597}}],"groups":[{"title":"Properties","kind":1024,"children":[13533,13531,13532,13528,13527,13523,13522,13529,13530,13521]}],"sources":[{"fileName":"src/ui/select_buttons.tsx","line":139,"character":28}],"extendedTypes":[{"type":"reference","name":"SharedSelectButtonsProps","id":13470}]},{"id":13446,"name":"SelectButtonsStyleProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props shared between the {@link SelectButtons} and {@link SelectButtonsSynced} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":67,"character":40}],"extendedTypes":[{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"MarginProps","id":9452}],"extendedBy":[{"type":"reference","name":"SharedSelectButtonsProps","id":13470}]},{"id":13602,"name":"SelectButtonsSyncedProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link SelectButtonsSynced} component. Also accepts:\n* {@link SelectButtonsStyleProps}","tags":[{"tag":"docspath","text":"UI/components/SelectButtonsSynced"},{"tag":"grouppath","text":"UI/components/SelectButtons\n"}]},"typeParameter":[{"id":13639,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":13615,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":109,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.['aria-describedby']","id":13482}},{"id":13613,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":105,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.['aria-label']","id":13480}},{"id":13614,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":107,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.['aria-labelledby']","id":13481}},{"id":13610,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":99,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.className","id":13477}},{"id":13609,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":97,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.disabled","id":13476}},{"id":13603,"name":"globalConfigKey","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A string key or array key path in {@link GlobalConfig}. The selected option will always reflect the value stored in {@link GlobalConfig} for this key. Selecting a new option will update {@link GlobalConfig}."},"sources":[{"fileName":"src/ui/select_buttons_synced.tsx","line":21,"character":19}],"type":{"type":"reference","name":"GlobalConfigKey","id":682}},{"id":13605,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected option changes."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":95,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":13606,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13607,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13608,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SelectOptionValue","id":10597}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.onChange","id":13472}},{"id":13604,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The list of select options."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":93,"character":11}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"SelectOption","id":10593}]},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.options","id":13471}},{"id":13611,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the select buttons."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":101,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.size","id":13478}},{"id":13612,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":103,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectButtonsProps.style","id":13479}}],"groups":[{"title":"Properties","kind":1024,"children":[13615,13613,13614,13610,13609,13603,13605,13604,13611,13612]}],"sources":[{"fileName":"src/ui/select_buttons_synced.tsx","line":19,"character":34}],"extendedTypes":[{"type":"reference","name":"SharedSelectButtonsProps","id":13470}]},{"id":13470,"name":"SharedSelectButtonsProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props shared between the {@link SelectButtons} and {@link SelectButtonsSynced} components."},"typeParameter":[{"id":13506,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":13482,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":109,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":13480,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":105,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":13481,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":107,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":13477,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":99,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":13476,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":97,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":13472,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A function to be called when the selected option changes."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":95,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":13473,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13474,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13475,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SelectOptionValue","id":10597}}],"type":{"type":"intrinsic","name":"void"}}]}}]}},{"id":13471,"name":"options","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"The list of select options."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":93,"character":11}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"SelectOption","id":10593}]}},{"id":13478,"name":"size","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The size of the select buttons."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":101,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635}},{"id":13479,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select_buttons.tsx","line":103,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[13482,13480,13481,13477,13476,13472,13471,13478,13479]}],"sources":[{"fileName":"src/ui/select_buttons.tsx","line":91,"character":41}],"extendedTypes":[{"type":"reference","name":"SelectButtonsStyleProps","id":13446},{"type":"reference","name":"TooltipAnchorProps"}],"extendedBy":[{"type":"reference","name":"SelectButtonsProps","id":13520},{"type":"reference","name":"SelectButtonsSyncedProps","id":13602}]},{"id":13596,"name":"SelectButtons","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A segmented control for selecting one value from a set of options.","text":"[[ Story id=\"selectbuttons--example\" title=\"Select buttons example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/SelectButtons"},{"tag":"component","text":"\n"}]},"signatures":[{"id":13597,"name":"SelectButtons","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A segmented control for selecting one value from a set of options.","text":"[[ Story id=\"selectbuttons--example\" title=\"Select buttons example\" ]]\n"},"parameters":[{"id":13598,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SelectButtonsProps","id":13520}},{"id":13599,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLDivElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/select_buttons.tsx","line":152,"character":19}]},{"id":13653,"name":"SelectButtonsSynced","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":" A wrapper around the {@link SelectButtons} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"selectbuttons--synced-example\" title=\"SelectButtonsSynced example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/SelectButtonsSynced"},{"tag":"grouppath","text":"UI/components/SelectButtons"},{"tag":"component","text":"\n"}]},"signatures":[{"id":13654,"name":"SelectButtonsSynced","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":" A wrapper around the {@link SelectButtons} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"selectbuttons--synced-example\" title=\"SelectButtonsSynced example\" ]]\n"},"parameters":[{"id":13655,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SelectButtonsSyncedProps","id":13602}},{"id":13656,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLDivElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/select_buttons_synced.tsx","line":33,"character":25}]}],"groups":[{"title":"Interfaces","kind":256,"children":[13520,13446,13602,13470]},{"title":"Functions","kind":64,"children":[13596,13653]}],"sources":[{"fileName":"src/ui/select_buttons.tsx","line":1,"character":0}]},{"id":13658,"name":"@airtable/blocks/ui: Switch","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/switch.tsx","comment":{},"children":[{"id":13659,"name":"SharedSwitchProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props shared between the {@link Switch} and {@link SwitchSynced} components."},"typeParameter":[{"id":13675,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":13674,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/switch.tsx","line":88,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":13672,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The label for the switch. Use this if the switch lacks a visible text label."},"sources":[{"fileName":"src/ui/switch.tsx","line":84,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":13673,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/switch.tsx","line":86,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":13660,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":66,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":13661,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":68,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":13670,"name":"id","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The ID of the switch element."},"sources":[{"fileName":"src/ui/switch.tsx","line":80,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":13662,"name":"label","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The label node for the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":70,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]}},{"id":13663,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A function to be called when the switch is toggled."},"sources":[{"fileName":"src/ui/switch.tsx","line":72,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":13664,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13665,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13666,"name":"newValue","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]}},{"id":13669,"name":"size","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The size of the switch. Defaults to `default`."},"sources":[{"fileName":"src/ui/switch.tsx","line":78,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635}},{"id":13671,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":82,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":13667,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Indicates if the switch can be focused and if/where it participates in sequential keyboard navigation."},"sources":[{"fileName":"src/ui/switch.tsx","line":74,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":13668,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The variant of the switch. Defaults to `default` (green)."},"sources":[{"fileName":"src/ui/switch.tsx","line":76,"character":11}],"type":{"type":"reference","name":"SwitchVariant","id":13817}}],"groups":[{"title":"Properties","kind":1024,"children":[13674,13672,13673,13660,13661,13670,13662,13663,13669,13671,13667,13668]}],"sources":[{"fileName":"src/ui/switch.tsx","line":64,"character":34}],"extendedTypes":[{"type":"reference","name":"TooltipAnchorProps"},{"type":"reference","name":"SwitchStyleProps","id":13784}],"extendedBy":[{"type":"reference","name":"SwitchProps","id":13721},{"type":"reference","name":"SwitchSyncedProps","id":13851}]},{"id":13721,"name":"SwitchProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Switch} component. Also accepts:\n* {@link SwitchStyleProps}","tags":[{"tag":"docspath","text":"UI/components/Switch\n"}]},"typeParameter":[{"id":13738,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":13737,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/switch.tsx","line":88,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.['aria-describedby']","id":13674}},{"id":13735,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The label for the switch. Use this if the switch lacks a visible text label."},"sources":[{"fileName":"src/ui/switch.tsx","line":84,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.['aria-label']","id":13672}},{"id":13736,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/switch.tsx","line":86,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.['aria-labelledby']","id":13673}},{"id":13723,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":66,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.className","id":13660}},{"id":13724,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":68,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.disabled","id":13661}},{"id":13733,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The ID of the switch element."},"sources":[{"fileName":"src/ui/switch.tsx","line":80,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.id","id":13670}},{"id":13725,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The label node for the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":70,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.label","id":13662}},{"id":13726,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the switch is toggled."},"sources":[{"fileName":"src/ui/switch.tsx","line":72,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":13727,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13728,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13729,"name":"newValue","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.onChange","id":13663}},{"id":13732,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the switch. Defaults to `default`."},"sources":[{"fileName":"src/ui/switch.tsx","line":78,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.size","id":13669}},{"id":13734,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":82,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.style","id":13671}},{"id":13730,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Indicates if the switch can be focused and if/where it participates in sequential keyboard navigation."},"sources":[{"fileName":"src/ui/switch.tsx","line":74,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.tabIndex","id":13667}},{"id":13722,"name":"value","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"If set to `true`, the switch will be switchd on."},"sources":[{"fileName":"src/ui/switch.tsx","line":99,"character":9}],"type":{"type":"intrinsic","name":"boolean"}},{"id":13731,"name":"variant","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The variant of the switch. Defaults to `default` (green)."},"sources":[{"fileName":"src/ui/switch.tsx","line":76,"character":11}],"type":{"type":"reference","name":"SwitchVariant","id":13817},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.variant","id":13668}}],"groups":[{"title":"Properties","kind":1024,"children":[13737,13735,13736,13723,13724,13733,13725,13726,13732,13734,13730,13722,13731]}],"sources":[{"fileName":"src/ui/switch.tsx","line":97,"character":21}],"extendedTypes":[{"type":"reference","name":"SharedSwitchProps","id":13659}]},{"id":13784,"name":"SwitchStyleProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for the {@link Switch} component. Also accepts:\n* {@link BackgroundColorProps}\n* {@link FlexItemSetProps}\n* {@link MinWidthProps}\n* {@link MaxWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"},"children":[{"id":13785,"name":"display","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{},"sources":[{"fileName":"src/ui/switch.tsx","line":151,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"stringLiteral","value":"flex"},{"type":"stringLiteral","value":"inline-flex"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[13785]}],"sources":[{"fileName":"src/ui/switch.tsx","line":142,"character":33}],"extendedTypes":[{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"SpacingSetProps","id":9534},{"type":"reference","name":"BackgroundColorProps","id":9066}],"extendedBy":[{"type":"reference","name":"SharedSwitchProps","id":13659}]},{"id":13851,"name":"SwitchSyncedProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link SwitchSynced} component. Also accepts:\n* {@link SwitchStyleProps}","tags":[{"tag":"docspath","text":"UI/components/SwitchSynced"},{"tag":"grouppath","text":"UI/components/Switch\n"}]},"typeParameter":[{"id":13868,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"children":[{"id":13867,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/switch.tsx","line":88,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.['aria-describedby']","id":13674}},{"id":13865,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The label for the switch. Use this if the switch lacks a visible text label."},"sources":[{"fileName":"src/ui/switch.tsx","line":84,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.['aria-label']","id":13672}},{"id":13866,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/switch.tsx","line":86,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.['aria-labelledby']","id":13673}},{"id":13853,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":66,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.className","id":13660}},{"id":13854,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":68,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.disabled","id":13661}},{"id":13852,"name":"globalConfigKey","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A string key or array key path in {@link GlobalConfig}. The switch option will always reflect the boolean value stored in `globalConfig` for this key. Toggling the switch will update `globalConfig`."},"sources":[{"fileName":"src/ui/switch_synced.tsx","line":17,"character":19}],"type":{"type":"reference","name":"GlobalConfigKey","id":682}},{"id":13863,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The ID of the switch element."},"sources":[{"fileName":"src/ui/switch.tsx","line":80,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.id","id":13670}},{"id":13855,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The label node for the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":70,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.label","id":13662}},{"id":13856,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the switch is toggled."},"sources":[{"fileName":"src/ui/switch.tsx","line":72,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":13857,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":13858,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":13859,"name":"newValue","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.onChange","id":13663}},{"id":13862,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the switch. Defaults to `default`."},"sources":[{"fileName":"src/ui/switch.tsx","line":78,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.size","id":13669}},{"id":13864,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the switch."},"sources":[{"fileName":"src/ui/switch.tsx","line":82,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.style","id":13671}},{"id":13860,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Indicates if the switch can be focused and if/where it participates in sequential keyboard navigation."},"sources":[{"fileName":"src/ui/switch.tsx","line":74,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.tabIndex","id":13667}},{"id":13861,"name":"variant","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The variant of the switch. Defaults to `default` (green)."},"sources":[{"fileName":"src/ui/switch.tsx","line":76,"character":11}],"type":{"type":"reference","name":"SwitchVariant","id":13817},"inheritedFrom":{"type":"reference","name":"SharedSwitchProps.variant","id":13668}}],"groups":[{"title":"Properties","kind":1024,"children":[13867,13865,13866,13853,13854,13852,13863,13855,13856,13862,13864,13860,13861]}],"sources":[{"fileName":"src/ui/switch_synced.tsx","line":15,"character":27}],"extendedTypes":[{"type":"reference","name":"SharedSwitchProps","id":13659}]},{"id":13817,"name":"SwitchVariant","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Variants for the {@link Switch} component:","text":"• **default**\n\nGreen switch for toggling a setting or other boolean property.\n\n• **danger**\n\nRed switch for toggling a dangerous or infrequently-used setting.\n"},"sources":[{"fileName":"src/ui/switch.tsx","line":49,"character":18}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"default"},{"type":"stringLiteral","value":"danger"}]}},{"id":13845,"name":"Switch","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A toggle switch for controlling boolean values. Similar to a checkbox.","text":"[[ Story id=\"switch--example\" title=\"Switch example\" ]]\n\nBy default, the Switch component is styled to be full-width (`width=\"100%\"`) with a gray\nbackground to match other controls like Select, SelectButtons, Input, etc. This behavior can be\noverridden using style props. For example, you can set `backgroundColor=\"transparent\"` on the\nSwitch for a transparent background.\n","tags":[{"tag":"docspath","text":"UI/components/Switch"},{"tag":"component","text":"\n"}]},"signatures":[{"id":13846,"name":"Switch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A toggle switch for controlling boolean values. Similar to a checkbox.","text":"[[ Story id=\"switch--example\" title=\"Switch example\" ]]\n\nBy default, the Switch component is styled to be full-width (`width=\"100%\"`) with a gray\nbackground to match other controls like Select, SelectButtons, Input, etc. This behavior can be\noverridden using style props. For example, you can set `backgroundColor=\"transparent\"` on the\nSwitch for a transparent background.\n"},"parameters":[{"id":13847,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SwitchProps","id":13721}},{"id":13848,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLDivElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/switch.tsx","line":178,"character":12}]},{"id":13914,"name":"SwitchSynced","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A toggleable switch for controlling boolean values, synced with {@link GlobalConfig}. Similar to a checkbox.","text":"[[ Story id=\"switch--example-synced\" title=\"Synced switch example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/SwitchSynced"},{"tag":"grouppath","text":"UI/components/Switch"},{"tag":"component","text":"\n"}]},"signatures":[{"id":13915,"name":"SwitchSynced","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A toggleable switch for controlling boolean values, synced with {@link GlobalConfig}. Similar to a checkbox.","text":"[[ Story id=\"switch--example-synced\" title=\"Synced switch example\" ]]\n"},"parameters":[{"id":13916,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"SwitchSyncedProps","id":13851}},{"id":13917,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLDivElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/switch_synced.tsx","line":29,"character":18}]}],"groups":[{"title":"Interfaces","kind":256,"children":[13659,13721,13784,13851]},{"title":"Type aliases","kind":4194304,"children":[13817]},{"title":"Functions","kind":64,"children":[13845,13914]}],"sources":[{"fileName":"src/ui/switch.tsx","line":1,"character":0}]},{"id":10941,"name":"@airtable/blocks/ui: TablePicker","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/table_picker.tsx","comment":{},"children":[{"id":10942,"name":"SharedTablePickerProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props shared between the {@link TablePicker} and {@link TablePickerSynced} components."},"children":[{"id":10959,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":10957,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":10958,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":10951,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":10950,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":10955,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":10952,"name":"id","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":10953,"name":"name","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":10945,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A function to be called when the selected table changes."},"sources":[{"fileName":"src/ui/table_picker.tsx","line":19,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":10946,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":10947,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":10948,"name":"tableModel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}]}}]}},{"id":10944,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The placeholder text when no table is selected."},"sources":[{"fileName":"src/ui/table_picker.tsx","line":17,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":10943,"name":"shouldAllowPickingNone","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user can unset the selected table."},"sources":[{"fileName":"src/ui/table_picker.tsx","line":15,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":10949,"name":"size","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":10956,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":10954,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}}],"groups":[{"title":"Properties","kind":1024,"children":[10959,10957,10958,10951,10950,10955,10952,10953,10945,10944,10943,10949,10956,10954]}],"sources":[{"fileName":"src/ui/table_picker.tsx","line":13,"character":39}],"extendedTypes":[{"type":"reference","name":"SharedSelectBaseProps","id":10679}],"extendedBy":[{"type":"reference","name":"TablePickerProps","id":10997},{"type":"reference","name":"TablePickerSyncedProps","id":11073}]},{"id":10997,"name":"TablePickerProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link TablePicker} component. Also accepts:\n* {@link SelectStyleProps}","tags":[{"tag":"docspath","text":"UI/components/TablePicker\n"}]},"children":[{"id":11015,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":11013,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":11014,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":11007,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":11006,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":11011,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":11008,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":11009,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":11001,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected table changes."},"sources":[{"fileName":"src/ui/table_picker.tsx","line":19,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":11002,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":11003,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11004,"name":"tableModel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedTablePickerProps.onChange","id":10945}},{"id":11000,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The placeholder text when no table is selected."},"sources":[{"fileName":"src/ui/table_picker.tsx","line":17,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedTablePickerProps.placeholder","id":10944}},{"id":10999,"name":"shouldAllowPickingNone","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user can unset the selected table."},"sources":[{"fileName":"src/ui/table_picker.tsx","line":15,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedTablePickerProps.shouldAllowPickingNone","id":10943}},{"id":11005,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":11012,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":11010,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}},{"id":10998,"name":"table","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The selected table model."},"sources":[{"fileName":"src/ui/table_picker.tsx","line":38,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[11015,11013,11014,11007,11006,11011,11008,11009,11001,11000,10999,11005,11012,11010,10998]}],"sources":[{"fileName":"src/ui/table_picker.tsx","line":36,"character":26}],"extendedTypes":[{"type":"reference","name":"SharedTablePickerProps","id":10942}]},{"id":11073,"name":"TablePickerSyncedProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link TablePickerSynced} component. Also accepts:\n* {@link SelectStyleProps}","tags":[{"tag":"docspath","text":"UI/components/TablePickerSynced"},{"tag":"grouppath","text":"UI/components/TablePicker\n"}]},"children":[{"id":11091,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":11089,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":11090,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":11083,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":11082,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":11087,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":11074,"name":"globalConfigKey","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A string key or array key path in {@link GlobalConfig}. The selected table will always reflect the table id stored in {@link GlobalConfig} for this key. Selecting a new table will update {@link GlobalConfig}."},"sources":[{"fileName":"src/ui/table_picker_synced.tsx","line":21,"character":19}],"type":{"type":"reference","name":"GlobalConfigKey","id":682}},{"id":11084,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":11085,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":11077,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected table changes."},"sources":[{"fileName":"src/ui/table_picker.tsx","line":19,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":11078,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":11079,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11080,"name":"tableModel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedTablePickerProps.onChange","id":10945}},{"id":11076,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The placeholder text when no table is selected."},"sources":[{"fileName":"src/ui/table_picker.tsx","line":17,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedTablePickerProps.placeholder","id":10944}},{"id":11075,"name":"shouldAllowPickingNone","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user can unset the selected table."},"sources":[{"fileName":"src/ui/table_picker.tsx","line":15,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedTablePickerProps.shouldAllowPickingNone","id":10943}},{"id":11081,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":11088,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":11086,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}}],"groups":[{"title":"Properties","kind":1024,"children":[11091,11089,11090,11083,11082,11087,11074,11084,11085,11077,11076,11075,11081,11088,11086]}],"sources":[{"fileName":"src/ui/table_picker_synced.tsx","line":19,"character":32}],"extendedTypes":[{"type":"reference","name":"SharedTablePickerProps","id":10942}]},{"id":11060,"name":"TablePicker","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"Dropdown menu component for selecting tables.","text":"[[ Story id=\"modelpickers--tablepicker-example\" title=\"Table picker example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/TablePicker"},{"tag":"component","text":"\n"}]},"signatures":[{"id":11061,"name":"TablePicker","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Dropdown menu component for selecting tables.","text":"[[ Story id=\"modelpickers--tablepicker-example\" title=\"Table picker example\" ]]\n"},"parameters":[{"id":11062,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"TablePickerProps","id":10997}},{"id":11063,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLSelectElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/table_picker.tsx","line":49,"character":17}]},{"id":11133,"name":"TablePickerSynced","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A wrapper around the {@link TablePicker} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"modelpickers--tablepickersynced-example\" title=\"Synced table picker example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/TablePickerSynced"},{"tag":"grouppath","text":"UI/components/TablePicker"},{"tag":"component","text":"\n"}]},"signatures":[{"id":11134,"name":"TablePickerSynced","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A wrapper around the {@link TablePicker} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"modelpickers--tablepickersynced-example\" title=\"Synced table picker example\" ]]\n"},"parameters":[{"id":11135,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"TablePickerSyncedProps","id":11073}},{"id":11136,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLSelectElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/table_picker_synced.tsx","line":38,"character":23}]}],"groups":[{"title":"Interfaces","kind":256,"children":[10942,10997,11073]},{"title":"Functions","kind":64,"children":[11060,11133]}],"sources":[{"fileName":"src/ui/table_picker.tsx","line":1,"character":0}]},{"id":14188,"name":"@airtable/blocks/ui: Text","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/text.tsx","comment":{},"children":[{"id":14189,"name":"TextProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Text} component. Also supports:\n* {@link AriaProps}\n* {@link AllStylesProps}","tags":[{"tag":"docspath","text":"UI/components/Text\n"}]},"children":[{"id":14190,"name":"as","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The element that is rendered. Defaults to `p`."},"sources":[{"fileName":"src/ui/text.tsx","line":69,"character":6}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"p"},{"type":"stringLiteral","value":"h1"},{"type":"stringLiteral","value":"h2"},{"type":"stringLiteral","value":"h3"},{"type":"stringLiteral","value":"h4"},{"type":"stringLiteral","value":"h5"},{"type":"stringLiteral","value":"h6"},{"type":"stringLiteral","value":"span"},{"type":"stringLiteral","value":"li"},{"type":"stringLiteral","value":"em"},{"type":"stringLiteral","value":"strong"},{"type":"stringLiteral","value":"kbd"},{"type":"stringLiteral","value":"mark"},{"type":"stringLiteral","value":"q"},{"type":"stringLiteral","value":"s"},{"type":"stringLiteral","value":"samp"},{"type":"stringLiteral","value":"small"},{"type":"stringLiteral","value":"sub"},{"type":"stringLiteral","value":"sup"},{"type":"stringLiteral","value":"time"},{"type":"stringLiteral","value":"var"},{"type":"stringLiteral","value":"blockquote"}]}},{"id":14192,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The contents of the text."},"sources":[{"fileName":"src/ui/text.tsx","line":95,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]}},{"id":14196,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply, separated by spaces."},"sources":[{"fileName":"src/ui/text.tsx","line":103,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14195,"name":"dataAttributes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."},"sources":[{"fileName":"src/ui/text.tsx","line":101,"character":18}],"type":{"type":"reference","name":"DataAttributesProp"}},{"id":14193,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/text.tsx","line":97,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14198,"name":"role","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `role` attribute."},"sources":[{"fileName":"src/ui/text.tsx","line":107,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":14194,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the text. Defaults to `default`. Can be a responsive prop object."},"sources":[{"fileName":"src/ui/text.tsx","line":99,"character":8}],"type":{"type":"reference","name":"TextSizeProp","id":14281}},{"id":14197,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles."},"sources":[{"fileName":"src/ui/text.tsx","line":105,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":14191,"name":"variant","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The variant of the text. Defaults to `default`."},"sources":[{"fileName":"src/ui/text.tsx","line":93,"character":11}],"type":{"type":"reference","name":"TextVariant","id":14274}}],"groups":[{"title":"Properties","kind":1024,"children":[14190,14192,14196,14195,14193,14198,14194,14197,14191]}],"sources":[{"fileName":"src/ui/text.tsx","line":67,"character":19}],"extendedTypes":[{"type":"reference","name":"AriaProps","id":12200},{"type":"reference","name":"AllStylesProps","id":9678}]},{"id":14278,"name":"TextSize","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"Sizes for the {@link Text} component."},"sources":[{"fileName":"src/ui/text.tsx","line":37,"character":20}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"small"},{"type":"stringLiteral","value":"default"},{"type":"stringLiteral","value":"large"},{"type":"stringLiteral","value":"xlarge"}]}},{"id":14281,"name":"TextSizeProp","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/ui/text.tsx","line":40,"character":24}],"type":{"type":"reference","name":"ResponsiveProp","id":9060,"typeArguments":[{"type":"reference","name":"TextSize","id":14278}]}},{"id":14274,"name":"TextVariant","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"Variants for the {@link Text} component:","text":"• **default**\n\nSingle-line text.\n\n• **paragraph**\n\nMulti-line text such as body copy.\n"},"sources":[{"fileName":"src/ui/text.tsx","line":30,"character":23}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"default"},{"type":"stringLiteral","value":"paragraph"}]}},{"id":14287,"name":"Text","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A text component with sizes and variants.","text":"[[ Story id=\"text--example\" title=\"Text example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/Text"},{"tag":"component","text":"\n"}]},"signatures":[{"id":14288,"name":"Text","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A text component with sizes and variants.","text":"[[ Story id=\"text--example\" title=\"Text example\" ]]\n"},"parameters":[{"id":14289,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"TextProps","id":14189}},{"id":14290,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/text.tsx","line":118,"character":10}]}],"groups":[{"title":"Interfaces","kind":256,"children":[14189]},{"title":"Type aliases","kind":4194304,"children":[14278,14281,14274]},{"title":"Functions","kind":64,"children":[14287]}],"sources":[{"fileName":"src/ui/text.tsx","line":1,"character":0}]},{"id":15780,"name":"@airtable/blocks/ui: TextButton","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/text_button.tsx","comment":{},"children":[{"id":15813,"name":"TextButtonProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link TextButton} component. Also supports:\n* {@link AriaProps}\n* {@link TextButtonStyleProps}","tags":[{"tag":"docspath","text":"UI/components/TextButton\n"}]},"children":[{"id":15828,"name":"aria-selected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-selected` attribute."},"sources":[{"fileName":"src/ui/text_button.tsx","line":146,"character":21}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":15818,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The contents of the button."},"sources":[{"fileName":"src/ui/text_button.tsx","line":129,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactNode"},{"type":"intrinsic","name":"string"}]}},{"id":15825,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply, separated by spaces."},"sources":[{"fileName":"src/ui/text_button.tsx","line":140,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15827,"name":"dataAttributes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."},"sources":[{"fileName":"src/ui/text_button.tsx","line":144,"character":18}],"type":{"type":"reference","name":"DataAttributesProp"}},{"id":15817,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Indicates whether or not the user can interact with the button."},"sources":[{"fileName":"src/ui/text_button.tsx","line":127,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":15816,"name":"icon","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The name of the icon or a react node. For more details, see the {@link IconName|list of supported icons}."},"sources":[{"fileName":"src/ui/text_button.tsx","line":125,"character":8}],"type":{"type":"union","types":[{"type":"reference","name":"IconName","id":12025},{"type":"reference","name":"ReactElement"}]}},{"id":15823,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/text_button.tsx","line":136,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15819,"name":"onClick","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Click event handler. Also handles Space and Enter keypress events."},"sources":[{"fileName":"src/ui/text_button.tsx","line":132,"character":11}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":15820,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":15821,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":15822,"name":"e","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"MouseEvent","typeArguments":[{"type":"reference","name":"HTMLSpanElement"}]},{"type":"reference","name":"KeyboardEvent","typeArguments":[{"type":"reference","name":"HTMLSpanElement"}]}]}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]},"overwrites":{"type":"reference","name":"TooltipAnchorProps.onClick"}},{"id":15814,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the button. Defaults to `default`. Can be a responsive prop object."},"sources":[{"fileName":"src/ui/text_button.tsx","line":121,"character":8}],"type":{"type":"reference","name":"TextSizeProp","id":14281}},{"id":15826,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles."},"sources":[{"fileName":"src/ui/text_button.tsx","line":142,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}},{"id":15824,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `tabIndex` attribute."},"sources":[{"fileName":"src/ui/text_button.tsx","line":138,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":15815,"name":"variant","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The variant of the button, which defines the color. Defaults to `default`."},"sources":[{"fileName":"src/ui/text_button.tsx","line":123,"character":11}],"type":{"type":"reference","name":"TextButtonVariant","id":15880}}],"groups":[{"title":"Properties","kind":1024,"children":[15828,15818,15825,15827,15817,15816,15823,15819,15814,15826,15824,15815]}],"sources":[{"fileName":"src/ui/text_button.tsx","line":116,"character":25}],"extendedTypes":[{"type":"reference","name":"TooltipAnchorProps","typeArguments":[{"type":"reference","name":"HTMLSpanElement"}]},{"type":"reference","name":"AriaProps","id":12200},{"type":"reference","name":"TextButtonStyleProps","id":15781}]},{"id":15781,"name":"TextButtonStyleProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Style props for the {@link TextButton} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"},"children":[{"id":15782,"name":"display","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."},"sources":[{"fileName":"src/ui/text_button.tsx","line":60,"character":11}],"type":{"type":"reference","name":"OptionalResponsiveProp","id":9062,"typeArguments":[{"type":"union","types":[{"type":"stringLiteral","value":"inline-flex"},{"type":"stringLiteral","value":"flex"},{"type":"stringLiteral","value":"none"}]}]}}],"groups":[{"title":"Properties","kind":1024,"children":[15782]}],"sources":[{"fileName":"src/ui/text_button.tsx","line":52,"character":37}],"extendedTypes":[{"type":"reference","name":"MaxWidthProps","id":9191},{"type":"reference","name":"MinWidthProps","id":9211},{"type":"reference","name":"WidthProps","id":9221},{"type":"reference","name":"FlexItemSetProps","id":9357},{"type":"reference","name":"PositionSetProps","id":9441},{"type":"reference","name":"SpacingSetProps","id":9534}],"extendedBy":[{"type":"reference","name":"TextButtonProps","id":15813}]},{"id":15880,"name":"TextButtonVariant","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Variants for the {@link TextButton} component:","text":"• **default**\n\nBlue text.\n\n• **dark**\n\nDark gray text.\n\n• **light**\n\nLight gray text.\n"},"sources":[{"fileName":"src/ui/text_button.tsx","line":98,"character":22}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"default"},{"type":"stringLiteral","value":"dark"},{"type":"stringLiteral","value":"light"}]}},{"id":15887,"name":"TextButton","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A text button component with sizes and variants.","text":"[[ Story id=\"textbutton--example\" title=\"Text button example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/TextButton"},{"tag":"component","text":"\n"}]},"signatures":[{"id":15888,"name":"TextButton","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A text button component with sizes and variants.","text":"[[ Story id=\"textbutton--example\" title=\"Text button example\" ]]\n"},"parameters":[{"id":15889,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"TextButtonProps","id":15813}},{"id":15890,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLSpanElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/text_button.tsx","line":157,"character":16}]}],"groups":[{"title":"Interfaces","kind":256,"children":[15813,15781]},{"title":"Type aliases","kind":4194304,"children":[15880]},{"title":"Functions","kind":64,"children":[15887]}],"sources":[{"fileName":"src/ui/text_button.tsx","line":1,"character":0}]},{"id":15892,"name":"@airtable/blocks/ui: Tooltip","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/tooltip.tsx","comment":{},"children":[{"id":15909,"name":"Tooltip","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"A component that renders a tooltip on hover. Wraps its children.","text":"[[ Story id=\"tooltip--example\" title=\"Tooltip example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/Tooltip"},{"tag":"component","text":"\n"}]},"typeParameter":[{"id":15953,"name":"SS","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/tooltip.tsx","line":56,"character":13}],"extendedTypes":[{"type":"reference","name":"Component","typeArguments":[{"type":"reference","name":"TooltipProps","id":15893},{"type":"reference","name":"TooltipState"}]}]},{"id":15893,"name":"TooltipProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link Tooltip} component.","tags":[{"tag":"docspath","text":"UI/components/Tooltip\n"}]},"children":[{"id":15894,"name":"children","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Child components to render."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":20,"character":12}],"type":{"type":"reference","name":"ReactElement","typeArguments":[{"type":"reference","name":"TooltipAnchorProps"}]}},{"id":15905,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to attach to the tooltip, separated by spaces."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":38,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":15899,"name":"content","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string representing the contents. Alternatively, you can include a function that returns a React node to place into the tooltip, which is useful for things like italicization in the tooltip."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":30,"character":11}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":15900,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":15901,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","name":"ReactElement","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"sources":[{"fileName":"src/ui/tooltip.tsx","line":30,"character":22}]}}]}},{"id":15904,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, this tooltip will not be shown. Useful when trying to disable the tooltip dynamically."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":36,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":15902,"name":"fitInWindowMode","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Dictates the behavior when the \"normal\" placement of the tooltip would be outside of the viewport. Defaults to {@link FitInWindowModes.FLIP}."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":32,"character":19}],"type":{"type":"reference","name":"FitInWindowMode","id":15769}},{"id":15897,"name":"placementOffsetX","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The horizontal offset, in pixels, of the tooltip. If `placementX` is set to {@link PopoverPlacements.LEFT}, a higher number will move the tooltip to the left. If `placementX` is set to {@link PopoverPlacements.RIGHT}, a higher number moves the tooltip to the right. If `placementX` is set to {@link PopoverPlacements.CENTER}, this value has no effect. Defaults to 12."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":26,"character":20}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":15898,"name":"placementOffsetY","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The vertical offset, in pixels, of the tooltip. If `placementY` is set to {@link PopoverPlacements.TOP}, a higher number will move the tooltip upward. If `placementY` is set to {@link PopoverPlacements.BOTTOM}, a higher number moves the tooltip downard. If `placementY` is set to {@link PopoverPlacements.CENTER}, this value has no effect. Defaults to 0."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":28,"character":20}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]}},{"id":15895,"name":"placementX","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The horizontal placement of the tooltip. Defaults to {@link PopoverPlacements.RIGHT}."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":22,"character":14}],"type":{"type":"reference","name":"PopoverPlacementX","id":15767}},{"id":15896,"name":"placementY","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The vertical placement of the tooltip. Defaults to {@link PopoverPlacements.CENTER}."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":24,"character":14}],"type":{"type":"reference","name":"PopoverPlacementY","id":15768}},{"id":15903,"name":"shouldHideTooltipOnClick","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Should the tooltip be hidden when clicked? Defaults to `false`."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":34,"character":28}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":15906,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles names to attach to the tooltip."},"sources":[{"fileName":"src/ui/tooltip.tsx","line":40,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"}}],"groups":[{"title":"Properties","kind":1024,"children":[15894,15905,15899,15904,15902,15897,15898,15895,15896,15903,15906]}],"sources":[{"fileName":"src/ui/tooltip.tsx","line":18,"character":22}]}],"groups":[{"title":"Classes","kind":128,"children":[15909]},{"title":"Interfaces","kind":256,"children":[15893]}],"sources":[{"fileName":"src/ui/tooltip.tsx","line":1,"character":0}]},{"id":11332,"name":"@airtable/blocks/ui: ViewPicker","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/view_picker.tsx","comment":{},"children":[{"id":11333,"name":"SharedViewPickerProps","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Props shared between the {@link ViewPicker} and {@link ViewPickerSynced} components."},"children":[{"id":11335,"name":"allowedTypes","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"An array indicating which view types can be selected."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":20,"character":16}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"ViewType","id":106}]}},{"id":11352,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":11350,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":11351,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":11344,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":11343,"name":"className","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":11348,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":11345,"name":"id","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":11346,"name":"name","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":11338,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"A function to be called when the selected view changes."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":26,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":11339,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":11340,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11341,"name":"viewModel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}]}}]}},{"id":11337,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The placeholder text when no view is selected. Defaults to `'Pick a view...'`"},"sources":[{"fileName":"src/ui/view_picker.tsx","line":24,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":11336,"name":"shouldAllowPickingNone","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If set to `true`, the user can unset the selected view."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":22,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}},{"id":11342,"name":"size","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":11349,"name":"style","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":11347,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}},{"id":11334,"name":"table","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"The parent table model to select views from. If `null` or `undefined`, the picker won't render."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":18,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[11335,11352,11350,11351,11344,11343,11348,11345,11346,11338,11337,11336,11342,11349,11347,11334]}],"sources":[{"fileName":"src/ui/view_picker.tsx","line":16,"character":38}],"extendedTypes":[{"type":"reference","name":"SharedSelectBaseProps","id":10679}],"extendedBy":[{"type":"reference","name":"ViewPickerProps","id":11390},{"type":"reference","name":"ViewPickerSyncedProps","id":11463}]},{"id":11390,"name":"ViewPickerProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link ViewPicker} component. Also accepts:\n* {@link SelectStyleProps}","tags":[{"tag":"docspath","text":"UI/components/ViewPicker\n"}]},"children":[{"id":11393,"name":"allowedTypes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An array indicating which view types can be selected."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":20,"character":16}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"ViewType","id":106}]},"inheritedFrom":{"type":"reference","name":"SharedViewPickerProps.allowedTypes","id":11335}},{"id":11410,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":11408,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":11409,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":11402,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":11401,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":11406,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":11403,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":11404,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":11396,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected view changes."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":26,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":11397,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":11398,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11399,"name":"viewModel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedViewPickerProps.onChange","id":11338}},{"id":11395,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The placeholder text when no view is selected. Defaults to `'Pick a view...'`"},"sources":[{"fileName":"src/ui/view_picker.tsx","line":24,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedViewPickerProps.placeholder","id":11337}},{"id":11394,"name":"shouldAllowPickingNone","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user can unset the selected view."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":22,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedViewPickerProps.shouldAllowPickingNone","id":11336}},{"id":11400,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":11407,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":11405,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}},{"id":11392,"name":"table","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The parent table model to select views from. If `null` or `undefined`, the picker won't render."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":18,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]},"inheritedFrom":{"type":"reference","name":"SharedViewPickerProps.table","id":11334}},{"id":11391,"name":"view","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The selected view model."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":47,"character":8}],"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"intrinsic","name":"null"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[11393,11410,11408,11409,11402,11401,11406,11403,11404,11396,11395,11394,11400,11407,11405,11392,11391]}],"sources":[{"fileName":"src/ui/view_picker.tsx","line":45,"character":25}],"extendedTypes":[{"type":"reference","name":"SharedViewPickerProps","id":11333}]},{"id":11463,"name":"ViewPickerSyncedProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link ViewPickerSynced} component. Also accepts:\n* {@link SelectStyleProps}","tags":[{"tag":"docspath","text":"UI/components/ViewPickerSynced"},{"tag":"grouppath","text":"UI/components/ViewPicker\n"}]},"children":[{"id":11466,"name":"allowedTypes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An array indicating which view types can be selected."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":20,"character":16}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"ViewType","id":106}]},"inheritedFrom":{"type":"reference","name":"SharedViewPickerProps.allowedTypes","id":11335}},{"id":11483,"name":"aria-describedby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of description element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":120,"character":24}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-describedby']","id":10690}},{"id":11481,"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `aria-label` attribute. Use this if the select is not referenced by a label element."},"sources":[{"fileName":"src/ui/select.tsx","line":116,"character":18}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-label']","id":10688}},{"id":11482,"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A space separated list of label element IDs."},"sources":[{"fileName":"src/ui/select.tsx","line":118,"character":23}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.['aria-labelledby']","id":10689}},{"id":11475,"name":"autoFocus","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `autoFocus` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":104,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.autoFocus","id":10682}},{"id":11474,"name":"className","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional class names to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":102,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.className","id":10681}},{"id":11479,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user cannot interact with the select."},"sources":[{"fileName":"src/ui/select.tsx","line":112,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.disabled","id":10686}},{"id":11464,"name":"globalConfigKey","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A string key or array key path in {@link GlobalConfig}. The selected view will always reflect the view id stored in {@link GlobalConfig} for this key. Selecting a new view will update {@link GlobalConfig}."},"sources":[{"fileName":"src/ui/view_picker_synced.tsx","line":20,"character":19}],"type":{"type":"reference","name":"GlobalConfigKey","id":682}},{"id":11476,"name":"id","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `id` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":106,"character":6}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.id","id":10683}},{"id":11477,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `name` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":108,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.name","id":10684}},{"id":11469,"name":"onChange","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A function to be called when the selected view changes."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":26,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":11470,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":11471,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11472,"name":"viewModel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"SharedViewPickerProps.onChange","id":11338}},{"id":11468,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The placeholder text when no view is selected. Defaults to `'Pick a view...'`"},"sources":[{"fileName":"src/ui/view_picker.tsx","line":24,"character":15}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"SharedViewPickerProps.placeholder","id":11337}},{"id":11467,"name":"shouldAllowPickingNone","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the user can unset the selected view."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":22,"character":26}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]},"inheritedFrom":{"type":"reference","name":"SharedViewPickerProps.shouldAllowPickingNone","id":11336}},{"id":11473,"name":"size","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The size of the select."},"sources":[{"fileName":"src/ui/select.tsx","line":100,"character":8}],"type":{"type":"reference","name":"ControlSizeProp","id":10635},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.size","id":10680}},{"id":11480,"name":"style","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Additional styles to apply to the select."},"sources":[{"fileName":"src/ui/select.tsx","line":114,"character":9}],"type":{"type":"reference","name":"React.CSSProperties"},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.style","id":10687}},{"id":11478,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The `tabindex` attribute."},"sources":[{"fileName":"src/ui/select.tsx","line":110,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"}]},"inheritedFrom":{"type":"reference","name":"SharedSelectBaseProps.tabIndex","id":10685}},{"id":11465,"name":"table","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The parent table model to select views from. If `null` or `undefined`, the picker won't render."},"sources":[{"fileName":"src/ui/view_picker.tsx","line":18,"character":9}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"intrinsic","name":"null"}]},"inheritedFrom":{"type":"reference","name":"SharedViewPickerProps.table","id":11334}}],"groups":[{"title":"Properties","kind":1024,"children":[11466,11483,11481,11482,11475,11474,11479,11464,11476,11477,11469,11468,11467,11473,11480,11478,11465]}],"sources":[{"fileName":"src/ui/view_picker_synced.tsx","line":18,"character":31}],"extendedTypes":[{"type":"reference","name":"SharedViewPickerProps","id":11333}]},{"id":11457,"name":"ViewPicker","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"Dropdown menu component for selecting views.","text":"[[ Story id=\"modelpickers--viewpicker-example\" title=\"View picker example\" ]]\n","tags":[{"tag":"component","text":""},{"tag":"docspath","text":"UI/components/ViewPicker\n"}]},"signatures":[{"id":11458,"name":"ViewPicker","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Dropdown menu component for selecting views.","text":"[[ Story id=\"modelpickers--viewpicker-example\" title=\"View picker example\" ]]\n"},"parameters":[{"id":11459,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ViewPickerProps","id":11390}},{"id":11460,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLSelectElement"}]}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"null"},{"type":"reference","name":"Element"}]}}],"sources":[{"fileName":"src/ui/view_picker.tsx","line":58,"character":16}]},{"id":11521,"name":"ViewPickerSynced","kind":64,"kindString":"Function","flags":{"isConst":true},"comment":{"shortText":"A wrapper around the {@link ViewPicker} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"modelpickers--viewpickersynced-example\" title=\"Synced view picker example\" ]]\n","tags":[{"tag":"docspath","text":"UI/components/ViewPickerSynced"},{"tag":"grouppath","text":"UI/components/ViewPicker"},{"tag":"component","text":"\n"}]},"signatures":[{"id":11522,"name":"ViewPickerSynced","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A wrapper around the {@link ViewPicker} component that syncs with {@link GlobalConfig}.","text":"[[ Story id=\"modelpickers--viewpickersynced-example\" title=\"Synced view picker example\" ]]\n"},"parameters":[{"id":11523,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ViewPickerSyncedProps","id":11463}},{"id":11524,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.Ref","typeArguments":[{"type":"reference","name":"HTMLSelectElement"}]}}],"type":{"type":"reference","name":"Element"}}],"sources":[{"fileName":"src/ui/view_picker_synced.tsx","line":32,"character":22}]}],"groups":[{"title":"Interfaces","kind":256,"children":[11333,11390,11463]},{"title":"Functions","kind":64,"children":[11457,11521]}],"sources":[{"fileName":"src/ui/view_picker.tsx","line":1,"character":0}]},{"id":13919,"name":"@airtable/blocks/ui: ViewportConstraint","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/viewport_constraint.tsx","comment":{"tags":[{"tag":"docspath","text":"UI/components/ViewportConstraint\n"}]},"children":[{"id":13925,"name":"ViewportConstraint","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"When mounted, this wrapper component applies size constraints to the {@link Viewport}.\nLike {@link addMinSize}, this will fullscreen the app if necessary and possible when\n`minSize` is updated.","tags":[{"tag":"example","text":"\n```js\nimport {ViewportConstraint} from '@airtable/blocks/ui';\n<ViewportConstraint minSize={{width: 400}} />\n```\n"},{"tag":"example","text":"\n```js\nimport {ViewportConstraint} from '@airtable/blocks/ui';\n<ViewportConstraint maxFullScreenSize={{width: 600, height: 400}}>\n     <div>I need a max fullscreen size!</div>\n</ViewportConstraint>\n```"},{"tag":"docspath","text":"UI/components/ViewportConstraint"},{"tag":"component","text":"\n"}]},"typeParameter":[{"id":13960,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}},{"id":13961,"name":"SS","kind":131072,"kindString":"Type parameter","flags":{}},{"id":13992,"name":"S","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"src/ui/viewport_constraint.tsx","line":59,"character":24}],"extendedTypes":[{"type":"reference","name":"Component","typeArguments":[{"type":"reference","name":"ViewportConstraintProps","id":13920}]}]},{"id":13920,"name":"ViewportConstraintProps","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Props for the {@link ViewportConstraint} component.","tags":[{"tag":"docspath","text":"UI/components/ViewportConstraint\n"}]},"children":[{"id":13923,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The contents of the viewport constraint."},"sources":[{"fileName":"src/ui/viewport_constraint.tsx","line":26,"character":12}],"type":{"type":"reference","name":"React.ReactNode"}},{"id":13922,"name":"maxFullscreenSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The maximum viewport size of the app when it is in fullscreen mode."},"sources":[{"fileName":"src/ui/viewport_constraint.tsx","line":24,"character":21}],"type":{"type":"reference","name":"ViewportSizeConstraintProp","id":14027}},{"id":13921,"name":"minSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The minimum viewport size of the app."},"sources":[{"fileName":"src/ui/viewport_constraint.tsx","line":22,"character":11}],"type":{"type":"reference","name":"ViewportSizeConstraintProp","id":14027}}],"groups":[{"title":"Properties","kind":1024,"children":[13923,13922,13921]}],"sources":[{"fileName":"src/ui/viewport_constraint.tsx","line":20,"character":33}]},{"id":14027,"name":"ViewportSizeConstraintProp","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"An object specifying a width and/or height for the block's viewport."},"sources":[{"fileName":"src/ui/viewport_constraint.tsx","line":13,"character":31}],"type":{"type":"reference","name":"Partial","typeArguments":[{"type":"reference","name":"ViewportSizeConstraint","id":3201}]}}],"groups":[{"title":"Classes","kind":128,"children":[13925]},{"title":"Interfaces","kind":256,"children":[13920]},{"title":"Type aliases","kind":4194304,"children":[14027]}],"sources":[{"fileName":"src/ui/viewport_constraint.tsx","line":1,"character":0}]},{"id":4501,"name":"@airtable/blocks/ui: colorUtils","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/color_utils.ts","comment":{},"children":[{"id":4506,"name":"ColorUtils","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Utilities for working with {@link Color} names from the {@link colors} enum.","tags":[{"tag":"docspath","text":"UI/utils/colorUtils\n"}]},"children":[{"id":4507,"name":"getHexForColor","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Given a {@link Color}, return the hex color value for that color, or null if the value isn't a {@link Color}","tags":[{"tag":"example","text":"\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getHexForColor(colors.RED);\n// => '#ef3061'\n\ncolorUtils.getHexForColor('uncomfortable beige');\n// => null\n```\n"}]},"signatures":[{"id":4508,"name":"getHexForColor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given a {@link Color}, return the hex color value for that color, or null if the value isn't a {@link Color}","tags":[{"tag":"example","text":"\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getHexForColor(colors.RED);\n// => '#ef3061'\n\ncolorUtils.getHexForColor('uncomfortable beige');\n// => null\n```\n"}]},"parameters":[{"id":4509,"name":"colorString","kind":32768,"kindString":"Parameter","flags":{},"comment":{},"type":{"type":"reference","name":"Color","id":90}}],"type":{"type":"intrinsic","name":"string"}},{"id":4510,"name":"getHexForColor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given a {@link Color}, return the hex color value for that color, or null if the value isn't a {@link Color}"},"parameters":[{"id":4511,"name":"colorString","kind":32768,"kindString":"Parameter","flags":{},"comment":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"string"}]}}],"sources":[{"fileName":"src/color_utils.ts","line":36,"character":18},{"fileName":"src/color_utils.ts","line":38,"character":18}]},{"id":4512,"name":"getRgbForColor","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Given a {@link Color}, return an {@link RGB} object representing it, or null if the value isn't a {@link Color}","tags":[{"tag":"example","text":"\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getRgbForColor(colors.PURPLE_DARK_1);\n// => {r: 107, g: 28, b: 176}\n\ncolorUtils.getRgbForColor('disgruntled pink');\n// => null\n```\n"}]},"signatures":[{"id":4513,"name":"getRgbForColor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given a {@link Color}, return an {@link RGB} object representing it, or null if the value isn't a {@link Color}","tags":[{"tag":"example","text":"\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getRgbForColor(colors.PURPLE_DARK_1);\n// => {r: 107, g: 28, b: 176}\n\ncolorUtils.getRgbForColor('disgruntled pink');\n// => null\n```\n"}]},"parameters":[{"id":4514,"name":"colorString","kind":32768,"kindString":"Parameter","flags":{},"comment":{},"type":{"type":"reference","name":"Color","id":90}}],"type":{"type":"reference","name":"RGB","id":4502}},{"id":4515,"name":"getRgbForColor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given a {@link Color}, return an {@link RGB} object representing it, or null if the value isn't a {@link Color}"},"parameters":[{"id":4516,"name":"colorString","kind":32768,"kindString":"Parameter","flags":{},"comment":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"reference","name":"RGB","id":4502},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/color_utils.ts","line":55,"character":18},{"fileName":"src/color_utils.ts","line":57,"character":18}]},{"id":4517,"name":"shouldUseLightTextOnColor","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Given a {@link Color}, returns true or false to indicate whether that color should have light text on top of it when used as a background color.","tags":[{"tag":"example","text":"\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_LIGHT_1);\n// => false\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_DARK_1);\n// => true\n```\n"}]},"signatures":[{"id":4518,"name":"shouldUseLightTextOnColor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given a {@link Color}, returns true or false to indicate whether that color should have light text on top of it when used as a background color.","tags":[{"tag":"example","text":"\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_LIGHT_1);\n// => false\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_DARK_1);\n// => true\n```\n"}]},"parameters":[{"id":4519,"name":"colorString","kind":32768,"kindString":"Parameter","flags":{},"comment":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/color_utils.ts","line":74,"character":29}]}],"groups":[{"title":"Methods","kind":2048,"children":[4507,4512,4517]}],"sources":[{"fileName":"src/color_utils.ts","line":20,"character":20}]},{"id":4502,"name":"RGB","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"A red/green/blue color object. Each property is a number from 0 to 255."},"children":[{"id":4505,"name":"b","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The blue component."},"sources":[{"fileName":"src/color_utils.ts","line":12,"character":5}],"type":{"type":"intrinsic","name":"number"}},{"id":4504,"name":"g","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The green component."},"sources":[{"fileName":"src/color_utils.ts","line":10,"character":5}],"type":{"type":"intrinsic","name":"number"}},{"id":4503,"name":"r","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The red component."},"sources":[{"fileName":"src/color_utils.ts","line":8,"character":5}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[4505,4504,4503]}],"sources":[{"fileName":"src/color_utils.ts","line":6,"character":13}]}],"groups":[{"title":"Interfaces","kind":256,"children":[4506,4502]}],"sources":[{"fileName":"src/color_utils.ts","line":1,"character":0}]},{"id":38,"name":"@airtable/blocks/ui: colors","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/colors.ts","comment":{},"children":[{"id":90,"name":"Color","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"A color name from the list of {@link Colors}."},"sources":[{"fileName":"src/colors.ts","line":137,"character":17}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"blueBright"},{"type":"stringLiteral","value":"blueDark1"},{"type":"stringLiteral","value":"blueLight1"},{"type":"stringLiteral","value":"blueLight2"},{"type":"stringLiteral","value":"blue"},{"type":"stringLiteral","value":"cyanBright"},{"type":"stringLiteral","value":"cyanDark1"},{"type":"stringLiteral","value":"cyanLight1"},{"type":"stringLiteral","value":"cyanLight2"},{"type":"stringLiteral","value":"cyan"},{"type":"stringLiteral","value":"grayBright"},{"type":"stringLiteral","value":"grayDark1"},{"type":"stringLiteral","value":"grayLight1"},{"type":"stringLiteral","value":"grayLight2"},{"type":"stringLiteral","value":"gray"},{"type":"stringLiteral","value":"greenBright"},{"type":"stringLiteral","value":"greenDark1"},{"type":"stringLiteral","value":"greenLight1"},{"type":"stringLiteral","value":"greenLight2"},{"type":"stringLiteral","value":"green"},{"type":"stringLiteral","value":"orangeBright"},{"type":"stringLiteral","value":"orangeDark1"},{"type":"stringLiteral","value":"orangeLight1"},{"type":"stringLiteral","value":"orangeLight2"},{"type":"stringLiteral","value":"orange"},{"type":"stringLiteral","value":"pinkBright"},{"type":"stringLiteral","value":"pinkDark1"},{"type":"stringLiteral","value":"pinkLight1"},{"type":"stringLiteral","value":"pinkLight2"},{"type":"stringLiteral","value":"pink"},{"type":"stringLiteral","value":"purpleBright"},{"type":"stringLiteral","value":"purpleDark1"},{"type":"stringLiteral","value":"purpleLight1"},{"type":"stringLiteral","value":"purpleLight2"},{"type":"stringLiteral","value":"purple"},{"type":"stringLiteral","value":"redBright"},{"type":"stringLiteral","value":"redDark1"},{"type":"stringLiteral","value":"redLight1"},{"type":"stringLiteral","value":"redLight2"},{"type":"stringLiteral","value":"red"},{"type":"stringLiteral","value":"tealBright"},{"type":"stringLiteral","value":"tealDark1"},{"type":"stringLiteral","value":"tealLight1"},{"type":"stringLiteral","value":"tealLight2"},{"type":"stringLiteral","value":"teal"},{"type":"stringLiteral","value":"yellowBright"},{"type":"stringLiteral","value":"yellowDark1"},{"type":"stringLiteral","value":"yellowLight1"},{"type":"stringLiteral","value":"yellowLight2"},{"type":"stringLiteral","value":"yellow"}]}},{"id":39,"name":"Colors","kind":2097152,"kindString":"Object literal","flags":{"isExported":true,"isConst":true},"comment":{"shortText":"Airtable color names.","text":"To get the corresponding RGB or HEX values, use\n{@link getRgbForColor} or {@link getHexForColor}.\n\nYou can also pass these values into the color props for components:\n","tags":[{"tag":"example","text":"\n```js\nimport {Box, colors} from '@airtable/blocks/ui';\n\n<Box backgroundColor={colors.BLUE} />\n```\n"},{"tag":"docspath","text":"UI/utils/colors\n"}]},"children":[{"id":44,"name":"BLUE","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":30,"character":8}],"type":{"type":"stringLiteral","value":"blue"},"defaultValue":" 'blue' as const"},{"id":40,"name":"BLUE_BRIGHT","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":22,"character":15}],"type":{"type":"stringLiteral","value":"blueBright"},"defaultValue":" 'blueBright' as const"},{"id":41,"name":"BLUE_DARK_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":24,"character":15}],"type":{"type":"stringLiteral","value":"blueDark1"},"defaultValue":" 'blueDark1' as const"},{"id":42,"name":"BLUE_LIGHT_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":26,"character":16}],"type":{"type":"stringLiteral","value":"blueLight1"},"defaultValue":" 'blueLight1' as const"},{"id":43,"name":"BLUE_LIGHT_2","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":28,"character":16}],"type":{"type":"stringLiteral","value":"blueLight2"},"defaultValue":" 'blueLight2' as const"},{"id":49,"name":"CYAN","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":41,"character":8}],"type":{"type":"stringLiteral","value":"cyan"},"defaultValue":" 'cyan' as const"},{"id":45,"name":"CYAN_BRIGHT","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":33,"character":15}],"type":{"type":"stringLiteral","value":"cyanBright"},"defaultValue":" 'cyanBright' as const"},{"id":46,"name":"CYAN_DARK_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":35,"character":15}],"type":{"type":"stringLiteral","value":"cyanDark1"},"defaultValue":" 'cyanDark1' as const"},{"id":47,"name":"CYAN_LIGHT_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":37,"character":16}],"type":{"type":"stringLiteral","value":"cyanLight1"},"defaultValue":" 'cyanLight1' as const"},{"id":48,"name":"CYAN_LIGHT_2","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":39,"character":16}],"type":{"type":"stringLiteral","value":"cyanLight2"},"defaultValue":" 'cyanLight2' as const"},{"id":54,"name":"GRAY","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":52,"character":8}],"type":{"type":"stringLiteral","value":"gray"},"defaultValue":" 'gray' as const"},{"id":50,"name":"GRAY_BRIGHT","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":44,"character":15}],"type":{"type":"stringLiteral","value":"grayBright"},"defaultValue":" 'grayBright' as const"},{"id":51,"name":"GRAY_DARK_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":46,"character":15}],"type":{"type":"stringLiteral","value":"grayDark1"},"defaultValue":" 'grayDark1' as const"},{"id":52,"name":"GRAY_LIGHT_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":48,"character":16}],"type":{"type":"stringLiteral","value":"grayLight1"},"defaultValue":" 'grayLight1' as const"},{"id":53,"name":"GRAY_LIGHT_2","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":50,"character":16}],"type":{"type":"stringLiteral","value":"grayLight2"},"defaultValue":" 'grayLight2' as const"},{"id":59,"name":"GREEN","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":63,"character":9}],"type":{"type":"stringLiteral","value":"green"},"defaultValue":" 'green' as const"},{"id":55,"name":"GREEN_BRIGHT","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":55,"character":16}],"type":{"type":"stringLiteral","value":"greenBright"},"defaultValue":" 'greenBright' as const"},{"id":56,"name":"GREEN_DARK_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":57,"character":16}],"type":{"type":"stringLiteral","value":"greenDark1"},"defaultValue":" 'greenDark1' as const"},{"id":57,"name":"GREEN_LIGHT_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":59,"character":17}],"type":{"type":"stringLiteral","value":"greenLight1"},"defaultValue":" 'greenLight1' as const"},{"id":58,"name":"GREEN_LIGHT_2","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":61,"character":17}],"type":{"type":"stringLiteral","value":"greenLight2"},"defaultValue":" 'greenLight2' as const"},{"id":64,"name":"ORANGE","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":74,"character":10}],"type":{"type":"stringLiteral","value":"orange"},"defaultValue":" 'orange' as const"},{"id":60,"name":"ORANGE_BRIGHT","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":66,"character":17}],"type":{"type":"stringLiteral","value":"orangeBright"},"defaultValue":" 'orangeBright' as const"},{"id":61,"name":"ORANGE_DARK_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":68,"character":17}],"type":{"type":"stringLiteral","value":"orangeDark1"},"defaultValue":" 'orangeDark1' as const"},{"id":62,"name":"ORANGE_LIGHT_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":70,"character":18}],"type":{"type":"stringLiteral","value":"orangeLight1"},"defaultValue":" 'orangeLight1' as const"},{"id":63,"name":"ORANGE_LIGHT_2","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":72,"character":18}],"type":{"type":"stringLiteral","value":"orangeLight2"},"defaultValue":" 'orangeLight2' as const"},{"id":69,"name":"PINK","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":85,"character":8}],"type":{"type":"stringLiteral","value":"pink"},"defaultValue":" 'pink' as const"},{"id":65,"name":"PINK_BRIGHT","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":77,"character":15}],"type":{"type":"stringLiteral","value":"pinkBright"},"defaultValue":" 'pinkBright' as const"},{"id":66,"name":"PINK_DARK_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":79,"character":15}],"type":{"type":"stringLiteral","value":"pinkDark1"},"defaultValue":" 'pinkDark1' as const"},{"id":67,"name":"PINK_LIGHT_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":81,"character":16}],"type":{"type":"stringLiteral","value":"pinkLight1"},"defaultValue":" 'pinkLight1' as const"},{"id":68,"name":"PINK_LIGHT_2","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":83,"character":16}],"type":{"type":"stringLiteral","value":"pinkLight2"},"defaultValue":" 'pinkLight2' as const"},{"id":74,"name":"PURPLE","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":96,"character":10}],"type":{"type":"stringLiteral","value":"purple"},"defaultValue":" 'purple' as const"},{"id":70,"name":"PURPLE_BRIGHT","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":88,"character":17}],"type":{"type":"stringLiteral","value":"purpleBright"},"defaultValue":" 'purpleBright' as const"},{"id":71,"name":"PURPLE_DARK_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":90,"character":17}],"type":{"type":"stringLiteral","value":"purpleDark1"},"defaultValue":" 'purpleDark1' as const"},{"id":72,"name":"PURPLE_LIGHT_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":92,"character":18}],"type":{"type":"stringLiteral","value":"purpleLight1"},"defaultValue":" 'purpleLight1' as const"},{"id":73,"name":"PURPLE_LIGHT_2","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":94,"character":18}],"type":{"type":"stringLiteral","value":"purpleLight2"},"defaultValue":" 'purpleLight2' as const"},{"id":79,"name":"RED","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":107,"character":7}],"type":{"type":"stringLiteral","value":"red"},"defaultValue":" 'red' as const"},{"id":75,"name":"RED_BRIGHT","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":99,"character":14}],"type":{"type":"stringLiteral","value":"redBright"},"defaultValue":" 'redBright' as const"},{"id":76,"name":"RED_DARK_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":101,"character":14}],"type":{"type":"stringLiteral","value":"redDark1"},"defaultValue":" 'redDark1' as const"},{"id":77,"name":"RED_LIGHT_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":103,"character":15}],"type":{"type":"stringLiteral","value":"redLight1"},"defaultValue":" 'redLight1' as const"},{"id":78,"name":"RED_LIGHT_2","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":105,"character":15}],"type":{"type":"stringLiteral","value":"redLight2"},"defaultValue":" 'redLight2' as const"},{"id":84,"name":"TEAL","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":118,"character":8}],"type":{"type":"stringLiteral","value":"teal"},"defaultValue":" 'teal' as const"},{"id":80,"name":"TEAL_BRIGHT","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":110,"character":15}],"type":{"type":"stringLiteral","value":"tealBright"},"defaultValue":" 'tealBright' as const"},{"id":81,"name":"TEAL_DARK_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":112,"character":15}],"type":{"type":"stringLiteral","value":"tealDark1"},"defaultValue":" 'tealDark1' as const"},{"id":82,"name":"TEAL_LIGHT_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":114,"character":16}],"type":{"type":"stringLiteral","value":"tealLight1"},"defaultValue":" 'tealLight1' as const"},{"id":83,"name":"TEAL_LIGHT_2","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":116,"character":16}],"type":{"type":"stringLiteral","value":"tealLight2"},"defaultValue":" 'tealLight2' as const"},{"id":89,"name":"YELLOW","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":129,"character":10}],"type":{"type":"stringLiteral","value":"yellow"},"defaultValue":" 'yellow' as const"},{"id":85,"name":"YELLOW_BRIGHT","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":121,"character":17}],"type":{"type":"stringLiteral","value":"yellowBright"},"defaultValue":" 'yellowBright' as const"},{"id":86,"name":"YELLOW_DARK_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":123,"character":17}],"type":{"type":"stringLiteral","value":"yellowDark1"},"defaultValue":" 'yellowDark1' as const"},{"id":87,"name":"YELLOW_LIGHT_1","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":125,"character":18}],"type":{"type":"stringLiteral","value":"yellowLight1"},"defaultValue":" 'yellowLight1' as const"},{"id":88,"name":"YELLOW_LIGHT_2","kind":32,"kindString":"Variable","flags":{"isExported":true},"comment":{"tags":[{"tag":"docspath","text":"UI/utils/Colors"}]},"sources":[{"fileName":"src/colors.ts","line":127,"character":18}],"type":{"type":"stringLiteral","value":"yellowLight2"},"defaultValue":" 'yellowLight2' as const"}],"groups":[{"title":"Variables","kind":32,"children":[44,40,41,42,43,49,45,46,47,48,54,50,51,52,53,59,55,56,57,58,64,60,61,62,63,69,65,66,67,68,74,70,71,72,73,79,75,76,77,78,84,80,81,82,83,89,85,86,87,88]}],"sources":[{"fileName":"src/colors.ts","line":20,"character":12}],"type":{"type":"intrinsic","name":"object"}}],"groups":[{"title":"Type aliases","kind":4194304,"children":[90]},{"title":"Object literals","kind":2097152,"children":[39]}],"sources":[{"fileName":"src/colors.ts","line":1,"character":0}]},{"id":11998,"name":"@airtable/blocks/ui: expandRecord","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/expand_record.ts","comment":{},"children":[{"id":11999,"name":"ExpandRecordOpts","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"Options object for expanding a record."},"children":[{"id":12000,"name":"records","kind":1024,"kindString":"Property","flags":{"isExported":true,"isOptional":true},"comment":{"shortText":"If `records` is provided, the list will be used to page through records from the expanded record dialog."},"sources":[{"fileName":"src/ui/expand_record.ts","line":9,"character":11}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]}}],"groups":[{"title":"Properties","kind":1024,"children":[12000]}],"sources":[{"fileName":"src/ui/expand_record.ts","line":7,"character":33}]},{"id":12001,"name":"expandRecord","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Expands the given record in the Airtable UI.","tags":[{"tag":"example","text":"\n```js\nimport {expandRecord} from '@airtable/blocks/ui';\nexpandRecord(record1, {\n    records: [record1, record2, record3],\n});\n```"},{"tag":"docspath","text":"UI/utils/expandRecord\n"}]},"signatures":[{"id":12002,"name":"expandRecord","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Expands the given record in the Airtable UI.","tags":[{"tag":"example","text":"\n```js\nimport {expandRecord} from '@airtable/blocks/ui';\nexpandRecord(record1, {\n    records: [record1, record2, record3],\n});\n```"},{"tag":"docspath","text":"UI/utils/expandRecord\n"}]},"parameters":[{"id":12003,"name":"record","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The record to expand."},"type":{"type":"reference","name":"Record","id":1568}},{"id":12004,"name":"opts","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"An optional options object.\n"},"type":{"type":"reference","name":"ExpandRecordOpts","id":11999}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/ui/expand_record.ts","line":27,"character":21}]}],"groups":[{"title":"Interfaces","kind":256,"children":[11999]},{"title":"Functions","kind":64,"children":[12001]}],"sources":[{"fileName":"src/ui/expand_record.ts","line":1,"character":0}]},{"id":12005,"name":"@airtable/blocks/ui: expandRecordList","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/expand_record_list.ts","comment":{},"children":[{"id":12006,"name":"ExpandRecordListOpts","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Options object for expanding a record list."},"children":[{"id":12007,"name":"fields","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The fields to include in the record cards. The primary field will always be shown. Duplicate fields will be removed."},"sources":[{"fileName":"src/ui/expand_record_list.ts","line":11,"character":10}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Field","id":1724}]}}],"groups":[{"title":"Properties","kind":1024,"children":[12007]}],"sources":[{"fileName":"src/ui/expand_record_list.ts","line":9,"character":30}]},{"id":12008,"name":"expandRecordList","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Expands a list of records in the Airtable UI.","tags":[{"tag":"example","text":"\n```js\nimport {expandRecordList} from '@airtable/blocks/ui';\nexpandRecordList([record1, record2, record3]);\n\nexpandRecordList([record1, record2], {\n    fields: [field1, field2],\n});\n```"},{"tag":"docspath","text":"UI/utils/expandRecordList\n"}]},"signatures":[{"id":12009,"name":"expandRecordList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Expands a list of records in the Airtable UI.","tags":[{"tag":"example","text":"\n```js\nimport {expandRecordList} from '@airtable/blocks/ui';\nexpandRecordList([record1, record2, record3]);\n\nexpandRecordList([record1, record2], {\n    fields: [field1, field2],\n});\n```"},{"tag":"docspath","text":"UI/utils/expandRecordList\n"}]},"parameters":[{"id":12010,"name":"records","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The records to expand. Duplicate records will be removed."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]}},{"id":12011,"name":"opts","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"An optional options object.\n"},"type":{"type":"reference","name":"ExpandRecordListOpts","id":12006}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/ui/expand_record_list.ts","line":31,"character":25}]}],"groups":[{"title":"Interfaces","kind":256,"children":[12006]},{"title":"Functions","kind":64,"children":[12008]}],"sources":[{"fileName":"src/ui/expand_record_list.ts","line":1,"character":0}]},{"id":12012,"name":"@airtable/blocks/ui: expandRecordPickerAsync","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/expand_record_picker_async.ts","comment":{},"children":[{"id":12013,"name":"ExpandRecordPickerOpts","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Options object for expanding a record picker."},"children":[{"id":12014,"name":"fields","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The fields to include in the record cards. The primary field will always be shown. Duplicate fields will be removed."},"sources":[{"fileName":"src/ui/expand_record_picker_async.ts","line":11,"character":10}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Field","id":1724}]}},{"id":12015,"name":"shouldAllowCreatingRecord","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If set to true, the user will be able to create an empty new record from the record picker."},"sources":[{"fileName":"src/ui/expand_record_picker_async.ts","line":13,"character":29}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[12014,12015]}],"sources":[{"fileName":"src/ui/expand_record_picker_async.ts","line":9,"character":32}]},{"id":12016,"name":"expandRecordPickerAsync","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Expands a list of records in the Airtable UI, and prompts the user to pick\none. The selected record is returned to the app, and the modal is\nautomatically closed.","text":"If the user dismisses the modal, or another one is opened before this one\nhas been closed, it will return null.\n\nReturns a promise that resolves to the record chosen by the user, or null.\n","tags":[{"tag":"example","text":"\n```js\nimport {expandRecordPickerAsync} from '@airtable/blocks/ui';\n\nasync function pickRecordsAsync() {\n    const recordA = await expandRecordPickerAsync([record1, record2, record3]);\n    if (recordA !== null) {\n        alert(recordA.name);\n    } else {\n        alert('no record picked');\n    }\n\n    const recordB = await expandRecordPickerAsync([record1, record2], {\n        fields: [field1, field2],\n    });\n}\n```"},{"tag":"docspath","text":"UI/utils/expandRecordPickerAsync\n"}]},"signatures":[{"id":12017,"name":"expandRecordPickerAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Expands a list of records in the Airtable UI, and prompts the user to pick\none. The selected record is returned to the app, and the modal is\nautomatically closed.","text":"If the user dismisses the modal, or another one is opened before this one\nhas been closed, it will return null.\n\nReturns a promise that resolves to the record chosen by the user, or null.\n","tags":[{"tag":"example","text":"\n```js\nimport {expandRecordPickerAsync} from '@airtable/blocks/ui';\n\nasync function pickRecordsAsync() {\n    const recordA = await expandRecordPickerAsync([record1, record2, record3]);\n    if (recordA !== null) {\n        alert(recordA.name);\n    } else {\n        alert('no record picked');\n    }\n\n    const recordB = await expandRecordPickerAsync([record1, record2], {\n        fields: [field1, field2],\n    });\n}\n```"},{"tag":"docspath","text":"UI/utils/expandRecordPickerAsync\n"}]},"parameters":[{"id":12018,"name":"records","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the records the user can pick from. Duplicate records will be removed."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]}},{"id":12019,"name":"opts","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"An optional options object."},"type":{"type":"reference","name":"ExpandRecordPickerOpts","id":12013}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"intrinsic","name":"null"}]}]}}],"sources":[{"fileName":"src/ui/expand_record_picker_async.ts","line":47,"character":38}]}],"groups":[{"title":"Interfaces","kind":256,"children":[12013]},{"title":"Functions","kind":64,"children":[12016]}],"sources":[{"fileName":"src/ui/expand_record_picker_async.ts","line":1,"character":0}]},{"id":16117,"name":"@airtable/blocks/ui: initializeBlock","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/initialize_block.tsx","comment":{},"children":[{"id":16122,"name":"DashboardEntryElementFunction","kind":4194304,"kindString":"Type alias","flags":{},"comment":{},"sources":[{"fileName":"src/ui/initialize_block.tsx","line":15,"character":34}],"type":{"type":"reflection","declaration":{"id":16123,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":16124,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","name":"React.ReactNode"}}],"sources":[{"fileName":"src/ui/initialize_block.tsx","line":15,"character":36}]}}},{"id":16133,"name":"initializeBlock","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"`initializeBlock` takes the top-level React component in your tree and renders it. It is conceptually similar to `ReactDOM.render`, but takes care of some Apps-specific things.","tags":[{"tag":"example","text":"\n```js\nimport {initializeBlock} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div>Hello world 🚀</div>\n    );\n}\n\ninitializeBlock(() => <App />);\n```"},{"tag":"docspath","text":"UI/utils/initializeBlock\n"}]},"signatures":[{"id":16134,"name":"initializeBlock","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"`initializeBlock` takes the top-level React component in your tree and renders it. It is conceptually similar to `ReactDOM.render`, but takes care of some Apps-specific things.","tags":[{"tag":"example","text":"\n```js\nimport {initializeBlock} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div>Hello world 🚀</div>\n    );\n}\n\ninitializeBlock(() => <App />);\n```"},{"tag":"docspath","text":"UI/utils/initializeBlock\n"}]},"parameters":[{"id":16135,"name":"getEntryElement","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"A function that returns your React Node.\n"},"type":{"type":"reference","name":"DashboardOrEntryPoints"}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/ui/initialize_block.tsx","line":47,"character":31}]}],"groups":[{"title":"Type aliases","kind":4194304,"children":[16122]},{"title":"Functions","kind":64,"children":[16133]}],"sources":[{"fileName":"src/ui/initialize_block.tsx","line":1,"character":0}]},{"id":14068,"name":"@airtable/blocks/ui: useBase","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_base.ts","comment":{},"children":[{"id":14069,"name":"useBase","kind":64,"kindString":"Function","flags":{"isExported":true,"isConst":true},"comment":{"shortText":"A hook for connecting a React component to your base's schema. This returns a {@link Base}\ninstance and will re-render your component whenever the base's schema changes. That means any\nchange to your base like tables being added or removed, fields getting renamed, etc. It excludes\nany change to the actual records in the base.","text":"`useBase` should meet most of your needs for working with base schema. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n\nReturns the current base.\n","tags":[{"tag":"example","text":"\n```js\nimport {useBase} from '@airtable/blocks/ui';\n\n// renders a list of tables and automatically updates\nfunction TableList() {\n     const base = useBase();\n\n     const tables = base.tables.map(table => {\n         return <li key={table.id}>{table.name}</li>;\n     });\n\n     return <ul>{tables}</ul>;\n}\n```"},{"tag":"docspath","text":"UI/hooks/useBase"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":14070,"name":"useBase","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for connecting a React component to your base's schema. This returns a {@link Base}\ninstance and will re-render your component whenever the base's schema changes. That means any\nchange to your base like tables being added or removed, fields getting renamed, etc. It excludes\nany change to the actual records in the base.","text":"`useBase` should meet most of your needs for working with base schema. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n\nReturns the current base.\n"},"type":{"type":"reference","name":"Base","id":2764}}],"sources":[{"fileName":"src/ui/use_base.ts","line":36,"character":13}]}],"groups":[{"title":"Functions","kind":64,"children":[14069]}],"sources":[{"fileName":"src/ui/use_base.ts","line":1,"character":0}]},{"id":14071,"name":"@airtable/blocks/ui: useCursor","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_cursor.ts","comment":{},"children":[{"id":14072,"name":"useCursor","kind":64,"kindString":"Function","flags":{"isExported":true,"isConst":true},"comment":{"shortText":"A hook for connecting a React component to your base's cursor. This returns a {@link Cursor}\ninstance and will re-render your component whenever the active Table or active View changes.\nIt excludes any change to the selected Records or selected Fields.","text":"`useCursor` should meet most of your needs for working with base cursors. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n\nReturns the current cursor.\n","tags":[{"tag":"example","text":"\n```js\nimport {useBase, useCursor} from '@airtable/blocks/ui';\n\n// renders a list of tables and automatically updates\nfunction TableList() {\n     const base = useBase();\n     const cursor = useCursor();\n\n     const table = base.getTableById(cursor.activeTableId);\n\n     return <p>The table named \"{table.name}\" is active!</p>;\n}\n```"},{"tag":"docspath","text":"UI/hooks/useCursor"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":14073,"name":"useCursor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for connecting a React component to your base's cursor. This returns a {@link Cursor}\ninstance and will re-render your component whenever the active Table or active View changes.\nIt excludes any change to the selected Records or selected Fields.","text":"`useCursor` should meet most of your needs for working with base cursors. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n\nReturns the current cursor.\n"},"type":{"type":"reference","name":"Cursor","id":3094}}],"sources":[{"fileName":"src/ui/use_cursor.ts","line":34,"character":15}]}],"groups":[{"title":"Functions","kind":64,"children":[14072]}],"sources":[{"fileName":"src/ui/use_cursor.ts","line":1,"character":0}]},{"id":14084,"name":"@airtable/blocks/ui: useGlobalConfig","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_global_config.ts","comment":{},"children":[{"id":14085,"name":"useGlobalConfig","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Returns the app's {@link GlobalConfig} and updates whenever any key in {@link GlobalConfig}\nchanges.","tags":[{"tag":"example","text":"\n```js\nimport {Button, useGlobalConfig} from '@airtable/blocks/ui';\n\nfunction SyncedCounter() {\n    const globalConfig = useGlobalConfig();\n    const count = globalConfig.get('count');\n\n    const increment = () => globalConfig.setAsync('count', count + 1);\n    const decrement = () => globalConfig.setAsync('count', count - 1);\n    const isEnabled = globalConfig.hasPermissionToSet('count');\n\n    return (\n        <React.Fragment>\n            <Button icon=\"minus\" onClick={decrement} disabled={!isEnabled} ariaLabel=\"decrease\"/>\n            {count}\n            <Button icon=\"plus\" onClick={increment} disabled={!isEnabled} airaLabel=\"increase\"/>\n        </React.Fragment>\n    );\n}\n```"},{"tag":"docspath","text":"UI/hooks/useGlobalConfig"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":14086,"name":"useGlobalConfig","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the app's {@link GlobalConfig} and updates whenever any key in {@link GlobalConfig}\nchanges.","tags":[{"tag":"example","text":"\n```js\nimport {Button, useGlobalConfig} from '@airtable/blocks/ui';\n\nfunction SyncedCounter() {\n    const globalConfig = useGlobalConfig();\n    const count = globalConfig.get('count');\n\n    const increment = () => globalConfig.setAsync('count', count + 1);\n    const decrement = () => globalConfig.setAsync('count', count - 1);\n    const isEnabled = globalConfig.hasPermissionToSet('count');\n\n    return (\n        <React.Fragment>\n            <Button icon=\"minus\" onClick={decrement} disabled={!isEnabled} ariaLabel=\"decrease\"/>\n            {count}\n            <Button icon=\"plus\" onClick={increment} disabled={!isEnabled} airaLabel=\"increase\"/>\n        </React.Fragment>\n    );\n}\n```"},{"tag":"docspath","text":"UI/hooks/useGlobalConfig"},{"tag":"hook","text":"\n"}]},"type":{"type":"reference","name":"GlobalConfig","id":798}}],"sources":[{"fileName":"src/ui/use_global_config.ts","line":34,"character":39}]}],"groups":[{"title":"Functions","kind":64,"children":[14085]}],"sources":[{"fileName":"src/ui/use_global_config.ts","line":1,"character":0}]},{"id":12830,"name":"@airtable/blocks/ui: useLoadable","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_loadable.ts","comment":{},"children":[{"id":12831,"name":"LoadableModel","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"A model that can be loaded.\nUsually a {@link Cursor}, {@link RecordQueryResult}, or a {@link ViewMetadataQueryResult}."},"sources":[{"fileName":"src/ui/use_loadable.ts","line":14,"character":23}]},{"id":12849,"name":"UseLoadableOpts","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Options object for the {@link useLoadable} hook."},"children":[{"id":12850,"name":"shouldSuspend","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether suspense mode is enabled. If suspense is disabled, you need to manually check `model.isDataLoaded` so you don't use your model before it's ready."},"sources":[{"fileName":"src/ui/use_loadable.ts","line":34,"character":17}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"false"},{"type":"intrinsic","name":"true"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[12850]}],"sources":[{"fileName":"src/ui/use_loadable.ts","line":32,"character":25}]},{"id":12852,"name":"useLoadable","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"When you're writing an app, not all of the data in your base is available to work with straight\naway. We need to load it from Airtable first. This hook is a low-level tool for managing that.\nYou might not need to use it directly though - if you're working with a {@link RecordQueryResult}, try\n{@link useRecords}, {@link useRecordIds}, or {@link useRecordById} first.","text":"When you need to use a loadable model, `useLoadable(theModel)` will make sure that the model is\nloaded when your component mounts, and unloaded when your component unmounts. By default, you\ndon't need to worry about waiting for the data to load - the hook uses React Suspense to make\nsure the rest of your component doesn't run until the data is loaded. Whilst the data is\nloading, the entire app will show a loading indicator. If you want to change where that\nindicator shows or how it looks, use [`<React.Suspense />`](https://reactjs.org/docs/react-api.html#reactsuspense|)\naround the component that uses the hook.\n\nYou can pass several models to `useLoadable` in an array - it will load all of them simultaneously.\nWe'll memoize this array using shallow equality, so there's no need to use `useMemo`.\n\nIf you need more control, you can pass `{shouldSuspend: false}` as a second argument to\nthe hook. In that case though, `useLoadable` will cause your component to re-render whenever the\nload-state of any model you passed in changes, and you should check each model's `.isDataLoaded`\n property before trying to use the data you loaded.\n","tags":[{"tag":"example","text":"\n```js\nimport {useCursor, useLoadable, useWatchable} from '@airtable/blocks/ui';\n\n function SelectedRecordIds() {\n     const cursor = useCursor();\n     // load selected records\n     useLoadable(cursor);\n\n     // re-render whenever the list of selected records changes\n     useWatchable(cursor, ['selectedRecordIds']);\n\n     // render the list of selected record ids\n     return <div>Selected records: {cursor.selectedRecordIds.join(', ')}</div>;\n }\n```\n"},{"tag":"example","text":"\n```js\n import {useLoadable} from '@airtable/blocks/ui';\n\n function LoadTwoQueryResults({queryResultA, queryResultB}) {\n     // load the queryResults:\n     useLoadable([queryResultA, queryResultB]);\n\n     // now, we can use the data\n     return <SomeFancyComponent />;\n }\n```\n"},{"tag":"example","text":"\n```js\n import {useLoadable, useBase} from '@airtable/blocks/ui';\n\n function LoadAllRecords() {\n     const base = useBase();\n\n     // get a query result for every table in the base:\n     const queryResults = base.tables.map(table => table.selectRecords());\n\n     // load them all:\n     useLoadable(queryResults);\n\n     // use the data:\n     return <SomeFancyComponent queryResults={queryResults} />;\n }\n```"},{"tag":"docspath","text":"UI/hooks/useLoadable"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":12853,"name":"useLoadable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"When you're writing an app, not all of the data in your base is available to work with straight\naway. We need to load it from Airtable first. This hook is a low-level tool for managing that.\nYou might not need to use it directly though - if you're working with a {@link RecordQueryResult}, try\n{@link useRecords}, {@link useRecordIds}, or {@link useRecordById} first.","text":"When you need to use a loadable model, `useLoadable(theModel)` will make sure that the model is\nloaded when your component mounts, and unloaded when your component unmounts. By default, you\ndon't need to worry about waiting for the data to load - the hook uses React Suspense to make\nsure the rest of your component doesn't run until the data is loaded. Whilst the data is\nloading, the entire app will show a loading indicator. If you want to change where that\nindicator shows or how it looks, use [`<React.Suspense />`](https://reactjs.org/docs/react-api.html#reactsuspense|)\naround the component that uses the hook.\n\nYou can pass several models to `useLoadable` in an array - it will load all of them simultaneously.\nWe'll memoize this array using shallow equality, so there's no need to use `useMemo`.\n\nIf you need more control, you can pass `{shouldSuspend: false}` as a second argument to\nthe hook. In that case though, `useLoadable` will cause your component to re-render whenever the\nload-state of any model you passed in changes, and you should check each model's `.isDataLoaded`\n property before trying to use the data you loaded.\n","tags":[{"tag":"example","text":"\n```js\nimport {useCursor, useLoadable, useWatchable} from '@airtable/blocks/ui';\n\n function SelectedRecordIds() {\n     const cursor = useCursor();\n     // load selected records\n     useLoadable(cursor);\n\n     // re-render whenever the list of selected records changes\n     useWatchable(cursor, ['selectedRecordIds']);\n\n     // render the list of selected record ids\n     return <div>Selected records: {cursor.selectedRecordIds.join(', ')}</div>;\n }\n```\n"},{"tag":"example","text":"\n```js\n import {useLoadable} from '@airtable/blocks/ui';\n\n function LoadTwoQueryResults({queryResultA, queryResultB}) {\n     // load the queryResults:\n     useLoadable([queryResultA, queryResultB]);\n\n     // now, we can use the data\n     return <SomeFancyComponent />;\n }\n```\n"},{"tag":"example","text":"\n```js\n import {useLoadable, useBase} from '@airtable/blocks/ui';\n\n function LoadAllRecords() {\n     const base = useBase();\n\n     // get a query result for every table in the base:\n     const queryResults = base.tables.map(table => table.selectRecords());\n\n     // load them all:\n     useLoadable(queryResults);\n\n     // use the data:\n     return <SomeFancyComponent queryResults={queryResults} />;\n }\n```"},{"tag":"docspath","text":"UI/hooks/useLoadable"},{"tag":"hook","text":"\n"}]},"parameters":[{"id":12854,"name":"models","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The models to load."},"type":{"type":"union","types":[{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"union","types":[{"type":"reference","name":"LoadableModel","id":12831},{"type":"intrinsic","name":"null"}]}]},{"type":"reference","name":"LoadableModel","id":12831},{"type":"intrinsic","name":"null"}]}},{"id":12855,"name":"opts","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Optional options to control how the hook works.\n"},"type":{"type":"reference","name":"UseLoadableOpts","id":12849},"defaultValue":" {shouldSuspend: true}"}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/ui/use_loadable.ts","line":112,"character":35}]}],"groups":[{"title":"Interfaces","kind":256,"children":[12831,12849]},{"title":"Functions","kind":64,"children":[12852]}],"sources":[{"fileName":"src/ui/use_loadable.ts","line":1,"character":0}]},{"id":14087,"name":"@airtable/blocks/ui: useRecordActionData","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_record_action_data.ts","comment":{},"children":[{"id":14088,"name":"useRecordActionData","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"A hook to watch \"open app\" / \"perform record action\" events (from button field). Returns\nthe data corresponding to the latest action, or `null` if no actions have occurred yet. If there\nwas a pending event for the app (for example, because a button that opens this app was\nclicked while the apps dashboard was closed) it will be returned as the initial value.","text":"Like {@link useLoadable}, this hook puts the app in suspense while subscribing to events and\nfetching the initial data.\n\nAlso see {@link registerRecordActionDataCallback}, which subscribes to the same events in an\nasynchronous (callback based) way. An advantage of using this hook over the callback is that you\nimmediately can handle any pending events when your app opens - with a callback, your app\nwill finish it's initial render before handling the event.\n\nLike {@link registerRecordActionDataCallback}, your app won't receive events until this hook is\nused for the first time. Because of that, we recommend only using this hook once, in the top\nlevel component of your app. Similarly, using both `registerRecordActionDataCallback` and\n`useRecordActionData` is not supported.\n\nYou can test your app in development by sending \"perform record action\" events to your app\nin the \"Advanced\" panel of the app developer tools.\n\nAfter releasing your app, you can use it with a button field by choosing the \"Open custom\napp\" action and selecting your app.\n","tags":[{"tag":"example","text":"\n```js\nimport React from 'react';\nimport {useRecordActionData} from '@airtable/blocks/ui';\n\nfunction LatestRecordAction() {\n    const recordActionData = useRecordActionData();\n\n    if (recordActionData === null) {\n        return <span>No events yet</span>;\n    }\n\n    return (\n        <ul>\n            <li>Record id: {recordActionData.recordId}</li>\n            <li>View id: {recordActionData.viewId}</li>\n            <li>Table id: {recordActionData.tableId}</li>\n        </ul>\n    );\n}\n```\n"},{"tag":"docspath","text":"UI/hooks/useRecordActionData"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":14089,"name":"useRecordActionData","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook to watch \"open app\" / \"perform record action\" events (from button field). Returns\nthe data corresponding to the latest action, or `null` if no actions have occurred yet. If there\nwas a pending event for the app (for example, because a button that opens this app was\nclicked while the apps dashboard was closed) it will be returned as the initial value.","text":"Like {@link useLoadable}, this hook puts the app in suspense while subscribing to events and\nfetching the initial data.\n\nAlso see {@link registerRecordActionDataCallback}, which subscribes to the same events in an\nasynchronous (callback based) way. An advantage of using this hook over the callback is that you\nimmediately can handle any pending events when your app opens - with a callback, your app\nwill finish it's initial render before handling the event.\n\nLike {@link registerRecordActionDataCallback}, your app won't receive events until this hook is\nused for the first time. Because of that, we recommend only using this hook once, in the top\nlevel component of your app. Similarly, using both `registerRecordActionDataCallback` and\n`useRecordActionData` is not supported.\n\nYou can test your app in development by sending \"perform record action\" events to your app\nin the \"Advanced\" panel of the app developer tools.\n\nAfter releasing your app, you can use it with a button field by choosing the \"Open custom\napp\" action and selecting your app.\n","tags":[{"tag":"example","text":"\n```js\nimport React from 'react';\nimport {useRecordActionData} from '@airtable/blocks/ui';\n\nfunction LatestRecordAction() {\n    const recordActionData = useRecordActionData();\n\n    if (recordActionData === null) {\n        return <span>No events yet</span>;\n    }\n\n    return (\n        <ul>\n            <li>Record id: {recordActionData.recordId}</li>\n            <li>View id: {recordActionData.viewId}</li>\n            <li>Table id: {recordActionData.tableId}</li>\n        </ul>\n    );\n}\n```\n"},{"tag":"docspath","text":"UI/hooks/useRecordActionData"},{"tag":"hook","text":"\n"}]},"type":{"type":"union","types":[{"type":"reference","name":"RecordActionData","id":3378},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/ui/use_record_action_data.ts","line":59,"character":43}]}],"groups":[{"title":"Functions","kind":64,"children":[14088]}],"sources":[{"fileName":"src/ui/use_record_action_data.ts","line":1,"character":0}]},{"id":14032,"name":"@airtable/blocks/ui: useRecords","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_records.ts","comment":{},"children":[{"id":14033,"name":"AnyQueryResult","kind":4194304,"kindString":"Type alias","flags":{},"comment":{},"sources":[{"fileName":"src/ui/use_records.ts","line":19,"character":19}],"type":{"type":"union","types":[{"type":"reference","name":"TableOrViewQueryResult","id":2142},{"type":"reference","name":"LinkedRecordsQueryResult","id":1336}]}},{"id":14034,"name":"TableOrViewOrQueryResult","kind":4194304,"kindString":"Type alias","flags":{},"comment":{},"sources":[{"fileName":"src/ui/use_records.ts","line":21,"character":29}],"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"reference","name":"View","id":2404},{"type":"reference","name":"AnyQueryResult","id":14033}]}},{"id":14056,"name":"useRecordById","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"A hook for working with a single record. Automatically handles loading data and updating your\ncomponent when the record's cell values or color changes.","text":"Often used with {@link useRecordIds} to render a list of records where each list item only\nupdates when the specific record it concerns changes.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns the specified record, or null if no model was passed in, or no record with that ID exists\nin the model.\n","tags":[{"tag":"example","text":"\n```js\n import {useRecordById, useRecordIds, useBase} from '@airtable/blocks/ui';\n\n // this component concerns a single record - it only updates when that specific record updates\n function RecordListItem({table, recordId}) {\n     const record = useRecordById(table, recordId);\n     return <li>{record.name}</li>;\n }\n\n // this component renders a list of records, but doesn't update when their cell values change -\n // that's left up to RecordListItem\n function RecordList() {\n     const base = useBase();\n     const table = base.tables[0];\n\n     // grab all the record ids from the table\n     const recordIds = useRecordIds(table);\n\n     // render a list of records:\n     return (\n         <ul>\n             {recordIds.map(recordId => {\n                 return <RecordListItem key={recordId} recordId={recordId} table={table} />\n             })}\n         </ul>\n     );\n }\n```"},{"tag":"docspath","text":"UI/hooks/useRecordById"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":14057,"name":"useRecordById","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for working with a single record. Automatically handles loading data and updating your\ncomponent when the record's cell values or color changes.","text":"Often used with {@link useRecordIds} to render a list of records where each list item only\nupdates when the specific record it concerns changes.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns the specified record, or null if no model was passed in, or no record with that ID exists\nin the model.\n"},"parameters":[{"id":14058,"name":"tableOrView","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"reference","name":"View","id":2404}]}},{"id":14059,"name":"recordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the record you want."},"type":{"type":"reference","name":"RecordId","id":103}},{"id":14060,"name":"opts","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"SingleRecordQueryResultOpts","id":3709}}],"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"intrinsic","name":"null"}]}},{"id":14061,"name":"useRecordById","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for working with a single record. Automatically handles loading data and updating your\ncomponent when the record's cell values or color changes.","text":"Often used with {@link useRecordIds} to render a list of records where each list item only\nupdates when the specific record it concerns changes.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns the specified record, or null if no model was passed in, or no record with that ID exists\nin the model.\n"},"parameters":[{"id":14062,"name":"queryResult","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"AnyQueryResult","id":14033}},{"id":14063,"name":"recordId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The ID of the record you want."},"type":{"type":"reference","name":"RecordId","id":103}}],"type":{"type":"union","types":[{"type":"reference","name":"Record","id":1568},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/ui/use_records.ts","line":219,"character":29},{"fileName":"src/ui/use_records.ts","line":226,"character":29},{"fileName":"src/ui/use_records.ts","line":276,"character":29}]},{"id":14040,"name":"useRecordIds","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"A hook for working with a set of record IDs from a table, view or query result. Automatically\nhandles loading data and updating your component when the underlying data changes.","text":"This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered. Use this over {@link useRecords} when you want to avoid watching\ncell data for all records. Use with {@link useRecordById} to only watch cell data for certain\nrecords.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns an array of record IDs, or null if no model was passed in.\n","tags":[{"tag":"example","text":"\n```js\n import {useRecordIds, useBase} from '@airtable/blocks/ui';\n\n function RecordCount() {\n     const base = useBase();\n     const table = base.tables[0];\n\n     // grab all the record ids from that table\n     const recordIds = useRecordIds(table);\n\n     // return the count\n     return <span>record count in {table.name}: {recordIds.length}</span>;\n }\n```"},{"tag":"docspath","text":"UI/hooks/useRecordIds"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":14041,"name":"useRecordIds","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for working with a set of record IDs from a table, view or query result. Automatically\nhandles loading data and updating your component when the underlying data changes.","text":"This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered. Use this over {@link useRecords} when you want to avoid watching\ncell data for all records. Use with {@link useRecordById} to only watch cell data for certain\nrecords.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns an array of record IDs, or null if no model was passed in.\n"},"parameters":[{"id":14042,"name":"tableOrView","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"reference","name":"View","id":2404}]}},{"id":14043,"name":"opts","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"RecordIdQueryResultOpts","id":3710}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"RecordId","id":103}]}},{"id":14044,"name":"useRecordIds","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for working with a set of record IDs from a table, view or query result. Automatically\nhandles loading data and updating your component when the underlying data changes.","text":"This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered. Use this over {@link useRecords} when you want to avoid watching\ncell data for all records. Use with {@link useRecordById} to only watch cell data for certain\nrecords.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns an array of record IDs, or null if no model was passed in.\n"},"parameters":[{"id":14045,"name":"queryResult","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"AnyQueryResult","id":14033}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"RecordId","id":103}]}},{"id":14046,"name":"useRecordIds","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for working with a set of record IDs from a table, view or query result. Automatically\nhandles loading data and updating your component when the underlying data changes.","text":"This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered. Use this over {@link useRecords} when you want to avoid watching\ncell data for all records. Use with {@link useRecordById} to only watch cell data for certain\nrecords.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns an array of record IDs, or null if no model was passed in.\n"},"parameters":[{"id":14047,"name":"tableOrViewOrQueryResult","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The {@link Table}, {@link View} or {@link RecordQueryResult} you want the record ids from."},"type":{"type":"intrinsic","name":"null"}}],"type":{"type":"intrinsic","name":"null"}}],"sources":[{"fileName":"src/ui/use_records.ts","line":55,"character":28},{"fileName":"src/ui/use_records.ts","line":60,"character":28},{"fileName":"src/ui/use_records.ts","line":62,"character":28},{"fileName":"src/ui/use_records.ts","line":98,"character":28}]},{"id":14048,"name":"useRecords","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"A hook for working with all of the records (including their colors and cell values) in a\nparticular table, view or query result. Automatically handles loading data and updating\nyour component when the underlying data changes.","text":"This hook re-renders when data concerning the records changes (specifically, when cell values\nchange, the record color changes, and when records are added or removed) - that's\nuseful, but can cause re-renders quite often, meaning {@link useRecordIds} or\n{@link useRecordById} could be more appropriate depending on your use case.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns a list of records, or null if no model was passed in.\n","tags":[{"tag":"example","text":"\n```js\n import {useRecords, useBase} from '@airtable/blocks/ui';\n\n function GetRecords() {\n     const base = useBase();\n     const table = base.tables[0];\n     const view = table.views[0];\n     let records;\n\n     // Returns all records in the table\n     records = useRecords(table);\n\n     // Equivalent to the above - useful if you want to reuse the queryResult elsewhere\n     const queryResult = table.selectRecords();\n     records = useRecords(queryResult);\n\n     // Returns all records for a view\n     records = useRecords(view)\n\n     // Returns all records in a table, only loading data for the specified fields\n     records = useRecords(table, {fields: ['My field']});\n\n     // Returns all records in a table, sorting the records by values in the specified fields\n     records = useRecords(table, {sorts: [\n        // sort by 'My field' in ascending order...\n        {field: 'My field'},\n        // then by 'My other field' in descending order\n        {field: 'My other field', direction: 'desc'},\n     ]});\n }\n```\n"},{"tag":"example","text":"\n```js\n import {useRecords, useBase} from '@airtable/blocks/ui';\n\n function RecordList() {\n     const base = useBase();\n     const table = base.tables[0];\n\n     // grab all the records from that table\n     const records = useRecords(table);\n\n     // render a list of records:\n     return (\n         <ul>\n             {records.map(record => {\n                 return <li key={record.id}>{record.name}</li>\n             })}\n         </ul>\n     );\n }\n```"},{"tag":"docspath","text":"UI/hooks/useRecords"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":14049,"name":"useRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for working with all of the records (including their colors and cell values) in a\nparticular table, view or query result. Automatically handles loading data and updating\nyour component when the underlying data changes.","text":"This hook re-renders when data concerning the records changes (specifically, when cell values\nchange, the record color changes, and when records are added or removed) - that's\nuseful, but can cause re-renders quite often, meaning {@link useRecordIds} or\n{@link useRecordById} could be more appropriate depending on your use case.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns a list of records, or null if no model was passed in.\n"},"parameters":[{"id":14050,"name":"tableOrView","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Table","id":2507},{"type":"reference","name":"View","id":2404}]}},{"id":14051,"name":"opts","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"RecordQueryResultOpts","id":3563}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]}},{"id":14052,"name":"useRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for working with all of the records (including their colors and cell values) in a\nparticular table, view or query result. Automatically handles loading data and updating\nyour component when the underlying data changes.","text":"This hook re-renders when data concerning the records changes (specifically, when cell values\nchange, the record color changes, and when records are added or removed) - that's\nuseful, but can cause re-renders quite often, meaning {@link useRecordIds} or\n{@link useRecordById} could be more appropriate depending on your use case.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns a list of records, or null if no model was passed in.\n"},"parameters":[{"id":14053,"name":"queryResult","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"AnyQueryResult","id":14033}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"Record","id":1568}]}},{"id":14054,"name":"useRecords","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for working with all of the records (including their colors and cell values) in a\nparticular table, view or query result. Automatically handles loading data and updating\nyour component when the underlying data changes.","text":"This hook re-renders when data concerning the records changes (specifically, when cell values\nchange, the record color changes, and when records are added or removed) - that's\nuseful, but can cause re-renders quite often, meaning {@link useRecordIds} or\n{@link useRecordById} could be more appropriate depending on your use case.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns a list of records, or null if no model was passed in.\n"},"parameters":[{"id":14055,"name":"tableOrViewOrQueryResult","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The {@link Table}, {@link View} or {@link RecordQueryResult} you want the records from."},"type":{"type":"intrinsic","name":"null"}}],"type":{"type":"intrinsic","name":"null"}}],"sources":[{"fileName":"src/ui/use_records.ts","line":123,"character":26},{"fileName":"src/ui/use_records.ts","line":125,"character":26},{"fileName":"src/ui/use_records.ts","line":127,"character":26},{"fileName":"src/ui/use_records.ts","line":203,"character":26}]}],"groups":[{"title":"Type aliases","kind":4194304,"children":[14033,14034]},{"title":"Functions","kind":64,"children":[14056,14040,14048]}],"sources":[{"fileName":"src/ui/use_records.ts","line":1,"character":0}]},{"id":14074,"name":"@airtable/blocks/ui: useSession","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_session.ts","comment":{},"children":[{"id":14075,"name":"useSession","kind":64,"kindString":"Function","flags":{"isExported":true,"isConst":true},"comment":{"shortText":"A hook for connecting a React component to the current session. This returns a {@link Session}\ninstance and will re-render your component whenever the session changes (e.g. when the current user's\npermissions change or when the current user's name changes).","text":"`useSession` should meet most of your needs for working with {@link Session}. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n","tags":[{"tag":"example","text":"\n```js\nimport {CollaboratorToken, useSession} from '@airtable/blocks/ui';\n\n// Says hello to the current user and updates in realtime if the current user's\n// name or profile pic changes.\nfunction CurrentUserGreeter() {\n    const session = useSession();\n    return (\n        <React.Fragment>\n            Hello,\n            <CollaboratorToken collaborator={session.currentUser} />!\n        </React.Fragment>\n    );\n}\n```"},{"tag":"docspath","text":"UI/hooks/useSession"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":14076,"name":"useSession","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for connecting a React component to the current session. This returns a {@link Session}\ninstance and will re-render your component whenever the session changes (e.g. when the current user's\npermissions change or when the current user's name changes).","text":"`useSession` should meet most of your needs for working with {@link Session}. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n"},"type":{"type":"reference","name":"Session","id":2936}}],"sources":[{"fileName":"src/ui/use_session.ts","line":34,"character":16}]}],"groups":[{"title":"Functions","kind":64,"children":[14075]}],"sources":[{"fileName":"src/ui/use_session.ts","line":1,"character":0}]},{"id":14077,"name":"@airtable/blocks/ui: useSettingsButton","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_settings_button.ts","comment":{},"children":[{"id":14078,"name":"useSettingsButton","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"A hook for using the settings button that lives outside the app's viewport. It will show\nthe settings button (hidden by default) and call the provided callback whenever the settings\nbutton is clicked. It will also re-render your component when the settings button is clicked.","tags":[{"tag":"example","text":"\n```js\nimport {useSettingsButton} from '@airtable/blocks/ui';\nimport {useState} from 'react';\n\nfunction ComponentWithSettings() {\n     const [isShowingSettings, setIsShowingSettings] = useState(false);\n     useSettingsButton(function() {\n         setIsShowingSettings(!isShowingSettings);\n     });\n\n     if (isShowingSettings) {\n         return <SettingsComponent />\n     }\n     return <MainComponent />\n}\n```"},{"tag":"docspath","text":"UI/hooks/useSettingsButton"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":14079,"name":"useSettingsButton","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A hook for using the settings button that lives outside the app's viewport. It will show\nthe settings button (hidden by default) and call the provided callback whenever the settings\nbutton is clicked. It will also re-render your component when the settings button is clicked.","tags":[{"tag":"example","text":"\n```js\nimport {useSettingsButton} from '@airtable/blocks/ui';\nimport {useState} from 'react';\n\nfunction ComponentWithSettings() {\n     const [isShowingSettings, setIsShowingSettings] = useState(false);\n     useSettingsButton(function() {\n         setIsShowingSettings(!isShowingSettings);\n     });\n\n     if (isShowingSettings) {\n         return <SettingsComponent />\n     }\n     return <MainComponent />\n}\n```"},{"tag":"docspath","text":"UI/hooks/useSettingsButton"},{"tag":"hook","text":"\n"}]},"parameters":[{"id":14080,"name":"onClickCallback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"A callback to call when the button is clicked.\n"},"type":{"type":"reference","name":"FlowAnyFunction"}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/ui/use_settings_button.ts","line":34,"character":41}]}],"groups":[{"title":"Functions","kind":64,"children":[14078]}],"sources":[{"fileName":"src/ui/use_settings_button.ts","line":1,"character":0}]},{"id":12856,"name":"@airtable/blocks/ui: useViewMetadata","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_view_metadata.ts","comment":{},"children":[{"id":12857,"name":"useViewMetadata","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded.","tags":[{"tag":"example","text":"\n```js\nimport {useBase, useViewMetadata} from '@airtable/blocks/ui';\n\nfunction ViewFields({view}) {\n    const viewMetadata = useViewMetadata(view);\n\n    return (\n        <ul>\n            {viewMetadata.visibleFields.map(field => (\n                <li key={field.id}>{field.name}</li>\n            ))}\n        </ul>\n    );\n}\n```"},{"tag":"docspath","text":"UI/hooks/useViewMetadata"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":12858,"name":"useViewMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded."},"parameters":[{"id":12859,"name":"viewOrViewMetadataQueryResult","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The {@link View} or {@link ViewMetadataQueryResult} to watch and use metadata from."},"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"reference","name":"ViewMetadataQueryResult","id":2034}]}}],"type":{"type":"reference","name":"ViewMetadataQueryResult","id":2034}},{"id":12860,"name":"useViewMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded."},"parameters":[{"id":12861,"name":"viewOrViewMetadataQueryResult","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The {@link View} or {@link ViewMetadataQueryResult} to watch and use metadata from."},"type":{"type":"union","types":[{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"undefined"}]}}],"type":{"type":"intrinsic","name":"null"}},{"id":12862,"name":"useViewMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded."},"parameters":[{"id":12863,"name":"viewOrViewMetadataQueryResult","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The {@link View} or {@link ViewMetadataQueryResult} to watch and use metadata from."},"type":{"type":"union","types":[{"type":"reference","name":"View","id":2404},{"type":"reference","name":"ViewMetadataQueryResult","id":2034},{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"undefined"}]}}],"type":{"type":"union","types":[{"type":"reference","name":"ViewMetadataQueryResult","id":2034},{"type":"intrinsic","name":"null"}]}}],"sources":[{"fileName":"src/ui/use_view_metadata.ts","line":8,"character":24},{"fileName":"src/ui/use_view_metadata.ts","line":12,"character":24},{"fileName":"src/ui/use_view_metadata.ts","line":14,"character":24},{"fileName":"src/ui/use_view_metadata.ts","line":42,"character":24}]}],"groups":[{"title":"Functions","kind":64,"children":[12857]}],"sources":[{"fileName":"src/ui/use_view_metadata.ts","line":1,"character":0}]},{"id":14081,"name":"@airtable/blocks/ui: useViewport","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_viewport.ts","comment":{},"children":[{"id":14082,"name":"useViewport","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"Returns the current {@link Viewport} object and updates whenever the viewport size, constraints,\nor fullscreen status changes.","tags":[{"tag":"example","text":"\n```js\nimport {useViewport} from '@airtable/blocks/ui';\n\nfunction ViewportSize() {\n     const viewport = useViewport();\n\n     const toggleFullscreen = () => {\n         if (viewport.isFullscreen) {\n             viewport.exitFullscreen();\n         } else {\n             viewport.enterFullscreenIfPossible();\n         }\n     };\n\n     return (\n         <Fragment>\n             <button onClick={toggleFullscreen}>Toggle fullscreen</button>\n\n             viewport size: {viewport.size.width}x{viewport.size.height}\n         </Fragment>\n     );\n}\n```"},{"tag":"docspath","text":"UI/hooks/useViewport"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":14083,"name":"useViewport","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the current {@link Viewport} object and updates whenever the viewport size, constraints,\nor fullscreen status changes.","tags":[{"tag":"example","text":"\n```js\nimport {useViewport} from '@airtable/blocks/ui';\n\nfunction ViewportSize() {\n     const viewport = useViewport();\n\n     const toggleFullscreen = () => {\n         if (viewport.isFullscreen) {\n             viewport.exitFullscreen();\n         } else {\n             viewport.enterFullscreenIfPossible();\n         }\n     };\n\n     return (\n         <Fragment>\n             <button onClick={toggleFullscreen}>Toggle fullscreen</button>\n\n             viewport size: {viewport.size.width}x{viewport.size.height}\n         </Fragment>\n     );\n}\n```"},{"tag":"docspath","text":"UI/hooks/useViewport"},{"tag":"hook","text":"\n"}]},"type":{"type":"reference","name":"Viewport","id":3205}}],"sources":[{"fileName":"src/ui/use_viewport.ts","line":37,"character":35}]}],"groups":[{"title":"Functions","kind":64,"children":[14082]}],"sources":[{"fileName":"src/ui/use_viewport.ts","line":1,"character":0}]},{"id":4725,"name":"@airtable/blocks/ui: useWatchable","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/use_watchable.ts","comment":{},"children":[{"id":4726,"name":"useWatchable","kind":64,"kindString":"Function","flags":{"isExported":true},"comment":{"shortText":"A React hook for watching data in Airtable models like {@link Table} and {@link Record}. Each\nmodel has several watchable keys that can be used with this hook to have your component\nautomatically re-render when data in the models changes. You can also provide an optional\ncallback if you need to do anything other than re-render when the data changes.","text":"This is a low-level tool that you should only use when you specifically need it. There are more\nconvenient model-specific hooks available:\n\n* For {@link Base}, {@link Table}, {@link View}, or {@link Field}, use {@link useBase}.\n* For {@link RecordQueryResult} or {@link Record}, use {@link useRecords}, {@link useRecordIds}, or {@link useRecordById}.\n* For {@link Viewport}, use {@link useViewport}.\n* For {@link SettingsButton}, use {@link useSettingsButton}.\n\nIf you're writing a class component and still want to be able to use hooks, try {@link withHooks}.\n","tags":[{"tag":"example","text":"\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction TableName({table}) {\n    useWatchable(table, 'name');\n    return <span>The table name is {table.name}</span>;\n}\n\nfunction ViewNameAndType({view}) {\n    useWatchable(view, ['name', 'type']);\n    return <span>The view name is {view.name} and the type is {view.type}</span>;\n}\n\nfunction RecordValuesAndColorInViewIfExists({record, field, view}) {\n    useWatchable(record, ['cellValues', view ? `colorInView:${view.id}` : null]);\n    return <span>\n        The record has cell value {record.getCellValue(field)} in {field.name}.\n        {view ? `The record has color ${record.getColorInView(view)} in ${view.name}.` : null}\n    </span>\n}\n```\n"},{"tag":"example","text":"\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction ActiveView({cursor}) {\n    useWatchable(cursor, 'activeViewId', () => {\n         alert('active view changed!!!')\n    });\n\n    return <span>Active view id: {cursor.activeViewId}</span>;\n}\n```"},{"tag":"docspath","text":"UI/hooks/useWatchable"},{"tag":"hook","text":"\n"}]},"signatures":[{"id":4727,"name":"useWatchable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React hook for watching data in Airtable models like {@link Table} and {@link Record}. Each\nmodel has several watchable keys that can be used with this hook to have your component\nautomatically re-render when data in the models changes. You can also provide an optional\ncallback if you need to do anything other than re-render when the data changes.","text":"This is a low-level tool that you should only use when you specifically need it. There are more\nconvenient model-specific hooks available:\n\n* For {@link Base}, {@link Table}, {@link View}, or {@link Field}, use {@link useBase}.\n* For {@link RecordQueryResult} or {@link Record}, use {@link useRecords}, {@link useRecordIds}, or {@link useRecordById}.\n* For {@link Viewport}, use {@link useViewport}.\n* For {@link SettingsButton}, use {@link useSettingsButton}.\n\nIf you're writing a class component and still want to be able to use hooks, try {@link withHooks}.\n","tags":[{"tag":"example","text":"\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction TableName({table}) {\n    useWatchable(table, 'name');\n    return <span>The table name is {table.name}</span>;\n}\n\nfunction ViewNameAndType({view}) {\n    useWatchable(view, ['name', 'type']);\n    return <span>The view name is {view.name} and the type is {view.type}</span>;\n}\n\nfunction RecordValuesAndColorInViewIfExists({record, field, view}) {\n    useWatchable(record, ['cellValues', view ? `colorInView:${view.id}` : null]);\n    return <span>\n        The record has cell value {record.getCellValue(field)} in {field.name}.\n        {view ? `The record has color ${record.getColorInView(view)} in ${view.name}.` : null}\n    </span>\n}\n```\n"},{"tag":"example","text":"\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction ActiveView({cursor}) {\n    useWatchable(cursor, 'activeViewId', () => {\n         alert('active view changed!!!')\n    });\n\n    return <span>Active view id: {cursor.activeViewId}</span>;\n}\n```"},{"tag":"docspath","text":"UI/hooks/useWatchable"},{"tag":"hook","text":"\n"}]},"typeParameter":[{"id":4728,"name":"Keys","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":4729,"name":"models","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The model or models to watch."},"type":{"type":"union","types":[{"type":"reference","name":"Watchable","id":405,"typeArguments":[{"type":"typeParameter","name":"Keys","constraint":{"type":"intrinsic","name":"string"}}]},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"union","types":[{"type":"reference","name":"Watchable","id":405,"typeArguments":[{"type":"typeParameter","name":"Keys","constraint":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"undefined"}]}]},{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"undefined"}]}},{"id":4730,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The key or keys to watch. Non-optional, but may be null."},"type":{"type":"union","types":[{"type":"typeParameter","name":"Keys","constraint":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"union","types":[{"type":"typeParameter","name":"Keys","constraint":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"null"}]}]},{"type":"intrinsic","name":"null"}]}},{"id":4731,"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"An optional callback to call when any of the watch keys change.\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":4732,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":4733,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":4734,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Watchable","id":405,"typeArguments":[{"type":"typeParameter","name":"Keys","constraint":{"type":"intrinsic","name":"string"}}]}},{"id":4735,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":4736,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/ui/use_watchable.ts","line":67,"character":36}]}],"groups":[{"title":"Functions","kind":64,"children":[4726]}],"sources":[{"fileName":"src/ui/use_watchable.ts","line":1,"character":0}]},{"id":4743,"name":"@airtable/blocks/ui: withHooks","kind":1,"flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/with_hooks.tsx","comment":{},"sources":[{"fileName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/ui/with_hooks.tsx","line":1,"character":0}]},{"id":797,"name":"@airtable/blocks: globalConfig","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/global_config.ts","comment":{},"children":[{"id":798,"name":"GlobalConfig","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"A key-value store for persisting configuration options for an app installation.","text":"The contents will be synced in real-time to all logged-in users of the installation.\nContents will not be updated in real-time when the installation is running in\na publicly shared base.\n\nAny key can be watched to know when the value of the key changes. If you want your\ncomponent to automatically re-render whenever any key on GlobalConfig changes, try using the\n{@link useGlobalConfig} hook.\n\nYou should not need to construct this object yourself.\n\nThe maximum allowed size of each URL-encoded write to GlobalConfig is 100kB.\n","tags":[{"tag":"example","text":"\n```js\nimport {globalConfig} from '@airtable/blocks';\n```"},{"tag":"docspath","text":"models/GlobalConfig\n"}]},"children":[{"id":824,"name":"checkPermissionsForSet","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to set the given global config key.","text":"Accepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can set the specified key,\n`{hasPermission: false, reasonDisplayString: string}` otherwise.  `reasonDisplayString` may\nbe used to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update a specific key and value.\nconst setCheckResult =\n    globalConfig.checkPermissionsForSet('favoriteColor', 'purple');\nif (!setCheckResult.hasPermission) {\n    alert(setCheckResult.reasonDisplayString);\n}\n\n// Check if user can update a specific key without knowing the value\nconst setKeyCheckResult =\n    globalConfig.checkPermissionsForSet('favoriteColor');\n\n// Check if user can update globalConfig without knowing key or value\nconst setUnknownKeyCheckResult = globalConfig.checkPermissionsForSet();\n```\n"}]},"signatures":[{"id":825,"name":"checkPermissionsForSet","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to set the given global config key.","text":"Accepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can set the specified key,\n`{hasPermission: false, reasonDisplayString: string}` otherwise.  `reasonDisplayString` may\nbe used to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update a specific key and value.\nconst setCheckResult =\n    globalConfig.checkPermissionsForSet('favoriteColor', 'purple');\nif (!setCheckResult.hasPermission) {\n    alert(setCheckResult.reasonDisplayString);\n}\n\n// Check if user can update a specific key without knowing the value\nconst setKeyCheckResult =\n    globalConfig.checkPermissionsForSet('favoriteColor');\n\n// Check if user can update globalConfig without knowing key or value\nconst setUnknownKeyCheckResult = globalConfig.checkPermissionsForSet();\n```\n"}]},"parameters":[{"id":826,"name":"key","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"A string for the top-level key, or an array of strings describing the path to set."},"type":{"type":"reference","name":"PartialGlobalConfigKey","id":684}},{"id":827,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The value to set at the specified path. Use `undefined` to delete the value at the given path.\n"},"type":{"type":"reference","name":"GlobalConfigValue","id":685}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/global_config.ts","line":170,"character":26}]},{"id":836,"name":"checkPermissionsForSetPaths","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Checks whether the current user has permission to perform the specified updates to global config.","text":"Accepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can set the specified key,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update a specific keys and values.\nconst setPathsCheckResult = globalConfig.checkPermissionsForSet([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!setPathsCheckResult.hasPermission) {\n    alert(setPathsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.checkPermissionsForSet()\nconst setUnknownPathsCheckResult =\n    globalConfig.checkPermissionsForSetPaths();\n```\n"}]},"signatures":[{"id":837,"name":"checkPermissionsForSetPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks whether the current user has permission to perform the specified updates to global config.","text":"Accepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can set the specified key,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update a specific keys and values.\nconst setPathsCheckResult = globalConfig.checkPermissionsForSet([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!setPathsCheckResult.hasPermission) {\n    alert(setPathsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.checkPermissionsForSet()\nconst setUnknownPathsCheckResult =\n    globalConfig.checkPermissionsForSetPaths();\n```\n"}]},"parameters":[{"id":838,"name":"updates","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The paths and values to set."},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"PartialGlobalConfigUpdate","id":678}]}}],"type":{"type":"reference","name":"PermissionCheckResult","id":796}}],"sources":[{"fileName":"src/global_config.ts","line":273,"character":31}]},{"id":821,"name":"get","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get the value at a path. Throws an error if the path is invalid.","text":"Returns undefined if no value exists at that path.\n","tags":[{"tag":"example","text":"\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst topLevelValue = globalConfig.get('topLevelKey');\nconst nestedValue = globalConfig.get(['topLevelKey', 'nested', 'deeply']);\n```\n"}]},"signatures":[{"id":822,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get the value at a path. Throws an error if the path is invalid.","text":"Returns undefined if no value exists at that path.\n","tags":[{"tag":"example","text":"\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst topLevelValue = globalConfig.get('topLevelKey');\nconst nestedValue = globalConfig.get(['topLevelKey', 'nested', 'deeply']);\n```\n"}]},"parameters":[{"id":823,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"A string for the top-level key, or an array of strings describing the path to the value."},"type":{"type":"reference","name":"GlobalConfigKey","id":682}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/global_config.ts","line":127,"character":7}]},{"id":828,"name":"hasPermissionToSet","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `globalConfig.checkPermissionsForSet(key, value).hasPermission`.","text":"Checks whether the current user has permission to set the given global config key.\n\nAccepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update a specific key and value.\nconst canSetFavoriteColorToPurple =\n    globalConfig.hasPermissionToSet('favoriteColor', 'purple');\nif (!canSetFavoriteColorToPurple) {\n    alert('Not allowed!');\n}\n\n// Check if user can update a specific key without knowing the value\nconst canSetFavoriteColor = globalConfig.hasPermissionToSet('favoriteColor');\n\n// Check if user can update globalConfig without knowing key or value\nconst canSetGlobalConfig = globalConfig.hasPermissionToSet();\n```\n"}]},"signatures":[{"id":829,"name":"hasPermissionToSet","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `globalConfig.checkPermissionsForSet(key, value).hasPermission`.","text":"Checks whether the current user has permission to set the given global config key.\n\nAccepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update a specific key and value.\nconst canSetFavoriteColorToPurple =\n    globalConfig.hasPermissionToSet('favoriteColor', 'purple');\nif (!canSetFavoriteColorToPurple) {\n    alert('Not allowed!');\n}\n\n// Check if user can update a specific key without knowing the value\nconst canSetFavoriteColor = globalConfig.hasPermissionToSet('favoriteColor');\n\n// Check if user can update globalConfig without knowing key or value\nconst canSetGlobalConfig = globalConfig.hasPermissionToSet();\n```\n"}]},"parameters":[{"id":830,"name":"key","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"A string for the top-level key, or an array of strings describing the path to set."},"type":{"type":"reference","name":"PartialGlobalConfigKey","id":684}},{"id":831,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The value to set at the specified path. Use `undefined` to delete the value at the given path.\n"},"type":{"type":"reference","name":"GlobalConfigValue","id":685}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/global_config.ts","line":205,"character":22}]},{"id":839,"name":"hasPermissionToSetPaths","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"An alias for `globalConfig.checkPermissionsForSetPaths(updates).hasPermission`.","text":"Checks whether the current user has permission to perform the specified updates to global\nconfig.\n\nAccepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update a specific keys and values.\nconst canSetPaths = globalConfig.hasPermissionToSetPaths([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!canSetPaths) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.hasPermissionToSet()\nconst canSetAnyPaths = globalConfig.hasPermissionToSetPaths();\n```\n"}]},"signatures":[{"id":840,"name":"hasPermissionToSetPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An alias for `globalConfig.checkPermissionsForSetPaths(updates).hasPermission`.","text":"Checks whether the current user has permission to perform the specified updates to global\nconfig.\n\nAccepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n","tags":[{"tag":"example","text":"\n```js\n// Check if user can update a specific keys and values.\nconst canSetPaths = globalConfig.hasPermissionToSetPaths([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!canSetPaths) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.hasPermissionToSet()\nconst canSetAnyPaths = globalConfig.hasPermissionToSetPaths();\n```\n"}]},"parameters":[{"id":841,"name":"updates","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The paths and values to set.\n"},"type":{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"PartialGlobalConfigUpdate","id":678}]}}],"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/global_config.ts","line":310,"character":27}]},{"id":832,"name":"setAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Sets a value at a path. Throws an error if the path or value is invalid.","text":"This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdate to be persisted to Airtable servers.\n\nUpdates are applied optimistically locally, so your change will be reflected in\n{@link GlobalConfig} before the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nfunction updateFavoriteColorIfPossible(color) {\n    if (globalConfig.hasPermissionToSetPaths('favoriteColor', color)) {\n        globalConfig.setAsync('favoriteColor', color);\n    }\n    // The update is now applied within your app (eg will be\n    // reflected in globalConfig) but are still being saved to\n    // Airtable servers (e.g. may not be updated for other users yet)\n}\n\nasync function updateFavoriteColorIfPossibleAsync(color) {\n    if (globalConfig.hasPermissionToSet('favoriteColor', color)) {\n        await globalConfig.setAsync('favoriteColor', color);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('favoriteColor has been updated');\n}\n```\n"}]},"signatures":[{"id":833,"name":"setAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets a value at a path. Throws an error if the path or value is invalid.","text":"This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdate to be persisted to Airtable servers.\n\nUpdates are applied optimistically locally, so your change will be reflected in\n{@link GlobalConfig} before the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nfunction updateFavoriteColorIfPossible(color) {\n    if (globalConfig.hasPermissionToSetPaths('favoriteColor', color)) {\n        globalConfig.setAsync('favoriteColor', color);\n    }\n    // The update is now applied within your app (eg will be\n    // reflected in globalConfig) but are still being saved to\n    // Airtable servers (e.g. may not be updated for other users yet)\n}\n\nasync function updateFavoriteColorIfPossibleAsync(color) {\n    if (globalConfig.hasPermissionToSet('favoriteColor', color)) {\n        await globalConfig.setAsync('favoriteColor', color);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('favoriteColor has been updated');\n}\n```\n"}]},"parameters":[{"id":834,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"A string for the top-level key, or an array of strings describing the path to set."},"type":{"type":"reference","name":"GlobalConfigKey","id":682}},{"id":835,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The value to set at the specified path. Use `undefined` to delete the value at the given path."},"type":{"type":"reference","name":"GlobalConfigValue","id":685}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]}}],"sources":[{"fileName":"src/global_config.ts","line":241,"character":18}]},{"id":842,"name":"setPathsAsync","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Sets multiple values. Throws if any path or value is invalid.","text":"This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in\n{@link GlobalConfig} before the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst updates = [\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n];\n\nfunction applyUpdatesIfPossible() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        globalConfig.setPathsAsync(updates);\n    }\n    // The updates are now applied within your app (eg will be reflected in\n    // globalConfig) but are still being saved to Airtable servers (e.g. they\n    // may not be updated for other users yet)\n}\n\nasync function applyUpdatesIfPossibleAsync() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        await globalConfig.setPathsAsync(updates);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('globalConfig has been updated');\n}\n```\n"}]},"signatures":[{"id":843,"name":"setPathsAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets multiple values. Throws if any path or value is invalid.","text":"This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in\n{@link GlobalConfig} before the promise resolves.\n","tags":[{"tag":"example","text":"\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst updates = [\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n];\n\nfunction applyUpdatesIfPossible() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        globalConfig.setPathsAsync(updates);\n    }\n    // The updates are now applied within your app (eg will be reflected in\n    // globalConfig) but are still being saved to Airtable servers (e.g. they\n    // may not be updated for other users yet)\n}\n\nasync function applyUpdatesIfPossibleAsync() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        await globalConfig.setPathsAsync(updates);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('globalConfig has been updated');\n}\n```\n"}]},"parameters":[{"id":844,"name":"updates","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The paths and values to set."},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"GlobalConfigUpdate","id":675}]}}],"type":{"type":"reference","name":"Promise","typeArguments":[{"type":"intrinsic","name":"void"}]}}],"sources":[{"fileName":"src/global_config.ts","line":349,"character":23}]},{"id":874,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"signatures":[{"id":875,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"parameters":[{"id":876,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableGlobalConfigKey","id":888},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableGlobalConfigKey","id":888}]}]}},{"id":877,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reflection","declaration":{"id":878,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":879,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":880,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":881,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableGlobalConfigKey","id":888}},{"id":882,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":113,"character":17}]}}},{"id":883,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableGlobalConfigKey","id":888}]},"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/watchable.ts","line":111,"character":11}],"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":864,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":865,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":866,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableGlobalConfigKey","id":888},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableGlobalConfigKey","id":888}]}]}},{"id":867,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reflection","declaration":{"id":868,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":869,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":870,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":871,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableGlobalConfigKey","id":888}},{"id":872,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":66,"character":17}]}}},{"id":873,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableGlobalConfigKey","id":888}]},"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/watchable.ts","line":64,"character":9}],"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Methods","kind":2048,"children":[824,836,821,828,839,832,842,874,864]}],"sources":[{"fileName":"src/global_config.ts","line":52,"character":18}],"extendedTypes":[{"type":"reference","name":"Watchable","id":405,"typeArguments":[{"type":"reference","name":"WatchableGlobalConfigKey","id":888}]}]},{"id":888,"name":"WatchableGlobalConfigKey","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"You can watch any top-level key in global config. Use '*' to watch every change."},"sources":[{"fileName":"src/global_config.ts","line":22,"character":29}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Classes","kind":128,"children":[798]},{"title":"Type aliases","kind":4194304,"children":[888]}],"sources":[{"fileName":"src/global_config.ts","line":1,"character":0}]},{"id":692,"name":"@airtable/blocks: mutations","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/types/mutations.ts","comment":{},"children":[{"id":786,"name":"SuccessfulPermissionCheckResult","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":787,"name":"hasPermission","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/mutations.ts","line":201,"character":17}],"type":{"type":"intrinsic","name":"true"}}],"groups":[{"title":"Properties","kind":1024,"children":[787]}],"sources":[{"fileName":"src/types/mutations.ts","line":199,"character":48}]},{"id":788,"name":"UnsuccessfulPermissionCheckResult","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{},"children":[{"id":789,"name":"hasPermission","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{},"sources":[{"fileName":"src/types/mutations.ts","line":207,"character":17}],"type":{"type":"intrinsic","name":"false"}},{"id":790,"name":"reasonDisplayString","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"A string explaining why the action is not permitted. These strings should only be used to\nshow to the user; you should not rely on the format of the string as it may change without\nnotice."},"sources":[{"fileName":"src/types/mutations.ts","line":213,"character":23}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[789,790]}],"sources":[{"fileName":"src/types/mutations.ts","line":205,"character":50}]},{"id":796,"name":"PermissionCheckResult","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"comment":{"shortText":"Indicates whether the user has permission to perform a particular action, and if not, why."},"sources":[{"fileName":"src/types/mutations.ts","line":217,"character":33}],"type":{"type":"union","types":[{"type":"reference","name":"SuccessfulPermissionCheckResult","id":786},{"type":"reference","name":"UnsuccessfulPermissionCheckResult","id":788}]}}],"groups":[{"title":"Interfaces","kind":256,"children":[786,788]},{"title":"Type aliases","kind":4194304,"children":[796]}],"sources":[{"fileName":"src/types/mutations.ts","line":1,"character":0}]},{"id":3298,"name":"@airtable/blocks: settingsButton","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/settings_button.ts","comment":{},"children":[{"id":3299,"name":"SettingsButton","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Interface to the settings button that lives outside the app's viewport.","text":"The {@link useSettingsButton} hook is the recommended way to use the settings button, but you can\nalso use it with {@link useWatchable} if you want more granular control (for example, to only\nshow the button conditionally).\n","tags":[{"tag":"alias","text":"settingsButton"},{"tag":"example","text":"\n```js\nimport {settingsButton} from '@airtable/blocks';\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction AppWithSettings({shouldShowSettingsButton}) {\n    useEffect(() => {\n        // A count of calls to `show()` and `hide()` is maintained internally. The button will\n        // stay visible if there are more calls to `show()` than `hide()` - so here, we check\n        // `isVisible` so we only we only call them when necessary.\n        // The button is not visible by default.\n        if (shouldShowSettingsButton && !settingsButton.isVisible) {\n            settingsButton.show();\n        } else if (!shouldShowSettingsButton && settingsButton.isVisible) {\n            settingsButton.hide();\n        }\n    });\n\n    useWatchable(settingsButton, 'click', function() {\n        alert('Clicked!');\n    });\n}\n```"},{"tag":"docspath","text":"models/SettingsButton\n"}]},"children":[{"id":3309,"name":"isVisible","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"Whether the settings button is being shown.\nCan be watched."},"getSignature":[{"id":3310,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Whether the settings button is being shown.\nCan be watched."},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/settings_button.ts","line":74,"character":17}]},{"id":3313,"name":"hide","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Hide the settings button.","text":"Note: A count of calls to `show()` and `hide()` is maintained internally. The button will\nstay visible if there are more calls to `show()` than `hide()`.\n"},"signatures":[{"id":3314,"name":"hide","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Hide the settings button.","text":"Note: A count of calls to `show()` and `hide()` is maintained internally. The button will\nstay visible if there are more calls to `show()` than `hide()`.\n"},"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/settings_button.ts","line":97,"character":8}]},{"id":3311,"name":"show","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Show the settings button."},"signatures":[{"id":3312,"name":"show","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Show the settings button."},"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/settings_button.ts","line":81,"character":8}]},{"id":3343,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"signatures":[{"id":3344,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"},"parameters":[{"id":3345,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableSettingsButtonKey","id":3359},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableSettingsButtonKey","id":3359}]}]}},{"id":3346,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reflection","declaration":{"id":3347,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":3348,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3349,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":3350,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableSettingsButtonKey","id":3359}},{"id":3351,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":113,"character":17}]}}},{"id":3352,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableSettingsButtonKey","id":3359}]},"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/watchable.ts","line":111,"character":11}],"inheritedFrom":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":3333,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":3334,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the model.","text":"Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":3335,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableSettingsButtonKey","id":3359},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableSettingsButtonKey","id":3359}]}]}},{"id":3336,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reflection","declaration":{"id":3337,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":3338,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3339,"name":"model","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"this"}},{"id":3340,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WatchableSettingsButtonKey","id":3359}},{"id":3341,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"Array","typeArguments":[{"type":"intrinsic","name":"any"}]}}],"type":{"type":"intrinsic","name":"unknown"}}],"sources":[{"fileName":"src/watchable.ts","line":66,"character":17}]}}},{"id":3342,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableSettingsButtonKey","id":3359}]},"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/watchable.ts","line":64,"character":9}],"inheritedFrom":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Accessors","kind":262144,"children":[3309]},{"title":"Methods","kind":2048,"children":[3313,3311,3343,3333]}],"sources":[{"fileName":"src/settings_button.ts","line":51,"character":20}],"extendedTypes":[{"type":"reference","name":"Watchable","id":405,"typeArguments":[{"type":"reference","name":"WatchableSettingsButtonKey","id":3359}]}]},{"id":3359,"name":"WatchableSettingsButtonKey","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"A watchable key in {@link SettingsButton}.\n- `isVisible`\n- `click`"},"sources":[{"fileName":"src/settings_button.ts","line":16,"character":31}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"isVisible"},{"type":"stringLiteral","value":"click"}]}}],"groups":[{"title":"Classes","kind":128,"children":[3299]},{"title":"Type aliases","kind":4194304,"children":[3359]}],"sources":[{"fileName":"src/settings_button.ts","line":1,"character":0}]},{"id":3200,"name":"@airtable/blocks: viewport","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/benrazon/h/source/blocks-sdk/packages/sdk/src/types/viewport.ts","comment":{},"children":[{"id":3205,"name":"Viewport","kind":128,"kindString":"Class","flags":{"isExported":true},"comment":{"shortText":"Information about the current viewport","text":"The {@link useViewport} hook is the recommend way to watch for viewport changes\nbutton, but you can also use it directly.\n","tags":[{"tag":"example","text":"\n```js\nimport {viewport} from '@airtable/blocks';\n```"},{"tag":"docspath","text":"models/Viewport\n"}]},"children":[{"id":3238,"name":"isFullscreen","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if the app is fullscreen, `false` otherwise."},"getSignature":[{"id":3239,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if the app is fullscreen, `false` otherwise."},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/viewport.ts","line":254,"character":20}]},{"id":3236,"name":"isSmallerThanMinSize","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"`true` if the app frame is smaller than `minSize`, `false` otherwise."},"getSignature":[{"id":3237,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"`true` if the app frame is smaller than `minSize`, `false` otherwise."},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"src/viewport.ts","line":245,"character":28}]},{"id":3226,"name":"maxFullscreenSize","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The maximum dimensions of the app when it is in\nfullscreen mode. Returns the smallest set of dimensions added with\n{@link addMaxFullscreenSize}.","text":"If `width` or `height` is null, it means there is\nno max size constraint on that dimension. If `maxFullscreenSize` would be\nsmaller than {@link minSize}, it is constrained to be at least `minSize`.\n"},"getSignature":[{"id":3227,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The maximum dimensions of the app when it is in\nfullscreen mode. Returns the smallest set of dimensions added with\n{@link addMaxFullscreenSize}.","text":"If `width` or `height` is null, it means there is\nno max size constraint on that dimension. If `maxFullscreenSize` would be\nsmaller than {@link minSize}, it is constrained to be at least `minSize`.\n"},"type":{"type":"reference","name":"ViewportSizeConstraint","id":3201}}],"sources":[{"fileName":"src/viewport.ts","line":124,"character":25}]},{"id":3231,"name":"minSize","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The minimum dimensions of the app - if the viewport gets smaller than this\nsize, an overlay will be shown asking the user to resize the app to be bigger.","text":"The largest set of dimensions added with addMinSize. If `width` or `height` is null, it means\nthere is no minSize constraint on that dimension.\n"},"getSignature":[{"id":3232,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The minimum dimensions of the app - if the viewport gets smaller than this\nsize, an overlay will be shown asking the user to resize the app to be bigger.","text":"The largest set of dimensions added with addMinSize. If `width` or `height` is null, it means\nthere is no minSize constraint on that dimension.\n"},"type":{"type":"reference","name":"ViewportSizeConstraint","id":3201}}],"sources":[{"fileName":"src/viewport.ts","line":186,"character":15}]},{"id":3240,"name":"size","kind":262144,"kindString":"Accessor","flags":{"isExported":true},"comment":{"shortText":"The current size of the app frame.","text":"Can be watched.\n"},"getSignature":[{"id":3241,"name":"__get","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"The current size of the app frame.","text":"Can be watched.\n"},"type":{"type":"reflection","declaration":{"id":3242,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"children":[{"id":3244,"name":"height","kind":32,"kindString":"Variable","flags":{"isExported":true},"sources":[{"fileName":"src/viewport.ts","line":262,"character":38}],"type":{"type":"intrinsic","name":"number"}},{"id":3243,"name":"width","kind":32,"kindString":"Variable","flags":{"isExported":true},"sources":[{"fileName":"src/viewport.ts","line":262,"character":22}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Variables","kind":32,"children":[3244,3243]}],"sources":[{"fileName":"src/viewport.ts","line":262,"character":15}]}}}],"sources":[{"fileName":"src/viewport.ts","line":262,"character":12}]},{"id":3228,"name":"addMaxFullscreenSize","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Add a maximum fullscreen size constraint. Use `.maxFullscreenSize` to get\nthe aggregate of all added constraints.","text":"Returns a function that can be called to remove the fullscreen size constraint that was added.\n"},"signatures":[{"id":3229,"name":"addMaxFullscreenSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a maximum fullscreen size constraint. Use `.maxFullscreenSize` to get\nthe aggregate of all added constraints.","text":"Returns a function that can be called to remove the fullscreen size constraint that was added.\n"},"parameters":[{"id":3230,"name":"sizeConstraint","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The width and height constraints to add. Both\n`width` and `height` are optional - if either is set to null, that means\nthere is no max size in that dimension.\n"},"type":{"type":"reference","name":"Partial","typeArguments":[{"type":"reference","name":"ViewportSizeConstraint","id":3201}]}}],"type":{"type":"reference","name":"UnsetFn","id":3286}}],"sources":[{"fileName":"src/viewport.ts","line":160,"character":24}]},{"id":3233,"name":"addMinSize","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Add a minimum frame size constraint. Use `.minSize`` to get the aggregate\nof all added constraints.","text":"Upon adding a constraint, if the app is focused and the frame is smaller than the\nminimum size, the app will enter fullscreen mode.\n\nReturns a function that can be called to remove the  size constraint that was added.\n"},"signatures":[{"id":3234,"name":"addMinSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a minimum frame size constraint. Use `.minSize`` to get the aggregate\nof all added constraints.","text":"Upon adding a constraint, if the app is focused and the frame is smaller than the\nminimum size, the app will enter fullscreen mode.\n\nReturns a function that can be called to remove the  size constraint that was added.\n"},"parameters":[{"id":3235,"name":"sizeConstraint","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The width and height constraints to add. Both `width`\nand `height` are optional - if either is set to null, that means there is\nno min size in that dimension.\n"},"type":{"type":"reference","name":"Partial","typeArguments":[{"type":"reference","name":"ViewportSizeConstraint","id":3201}]}}],"type":{"type":"reference","name":"UnsetFn","id":3286}}],"sources":[{"fileName":"src/viewport.ts","line":213,"character":14}]},{"id":3222,"name":"enterFullscreenIfPossible","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Request to enter fullscreen mode.","text":"May fail if another app is fullscreen or this app doesn't have\npermission to fullscreen itself. Watch `isFullscreen` to know if the\nrequest succeeded.\n"},"signatures":[{"id":3223,"name":"enterFullscreenIfPossible","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Request to enter fullscreen mode.","text":"May fail if another app is fullscreen or this app doesn't have\npermission to fullscreen itself. Watch `isFullscreen` to know if the\nrequest succeeded.\n"},"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/viewport.ts","line":107,"character":29}]},{"id":3224,"name":"exitFullscreen","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Request to exit fullscreen mode"},"signatures":[{"id":3225,"name":"exitFullscreen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Request to exit fullscreen mode"},"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/viewport.ts","line":111,"character":18}]},{"id":3250,"name":"unwatch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched\n"},"signatures":[{"id":3251,"name":"unwatch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unwatch keys watched with `.watch`.","text":"Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched\n"},"parameters":[{"id":3252,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to unwatch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableViewportKey","id":3285},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableViewportKey","id":3285}]}]}},{"id":3253,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the function passed to `.watch` for these keys"},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":3254,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the context that was passed to `.watch` for this `callback`\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableViewportKey","id":3285}]},"overwrites":{"type":"reference","name":"Watchable.unwatch","id":439}}],"sources":[{"fileName":"src/viewport.ts","line":312,"character":11}],"overwrites":{"type":"reference","name":"Watchable.unwatch","id":439}},{"id":3245,"name":"watch","kind":2048,"kindString":"Method","flags":{"isExported":true},"comment":{"shortText":"Get notified of changes to the viewport.","text":"Watchable keys are:\n- `'isFullscreen'`\n- `'size'`\n- `'minSize'`\n- `'maxFullscreenSize'`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"signatures":[{"id":3246,"name":"watch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get notified of changes to the viewport.","text":"Watchable keys are:\n- `'isFullscreen'`\n- `'size'`\n- `'minSize'`\n- `'maxFullscreenSize'`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"},"parameters":[{"id":3247,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the keys to watch"},"type":{"type":"union","types":[{"type":"reference","name":"WatchableViewportKey","id":3285},{"type":"reference","name":"ReadonlyArray","typeArguments":[{"type":"reference","name":"WatchableViewportKey","id":3285}]}]}},{"id":3248,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"a function to call when those keys change"},"type":{"type":"reference","name":"FlowAnyFunction"}},{"id":3249,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"an optional context for `this` in `callback`.\n"},"type":{"type":"union","types":[{"type":"reference","name":"FlowAnyObject"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"Array","typeArguments":[{"type":"reference","name":"WatchableViewportKey","id":3285}]},"overwrites":{"type":"reference","name":"Watchable.watch","id":429}}],"sources":[{"fileName":"src/viewport.ts","line":285,"character":9}],"overwrites":{"type":"reference","name":"Watchable.watch","id":429}}],"groups":[{"title":"Accessors","kind":262144,"children":[3238,3236,3226,3231,3240]},{"title":"Methods","kind":2048,"children":[3228,3233,3222,3224,3250,3245]}],"sources":[{"fileName":"src/viewport.ts","line":54,"character":14}],"extendedTypes":[{"type":"reference","name":"Watchable","id":405,"typeArguments":[{"type":"reference","name":"WatchableViewportKey","id":3285}]}]},{"id":3201,"name":"ViewportSizeConstraint","kind":256,"kindString":"Interface","flags":{"isExported":true},"comment":{"shortText":"A constraint on the size of the Block's viewport"},"children":[{"id":3203,"name":"height","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"Height constraint in pixels, or null if no constraint"},"sources":[{"fileName":"src/types/viewport.ts","line":8,"character":10}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"null"}]}},{"id":3202,"name":"width","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"Width constraint in pixels, or null if no constraint"},"sources":[{"fileName":"src/types/viewport.ts","line":6,"character":9}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"null"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[3203,3202]}],"sources":[{"fileName":"src/types/viewport.ts","line":4,"character":39}]},{"id":3286,"name":"UnsetFn","kind":4194304,"kindString":"Type alias","flags":{},"comment":{},"sources":[{"fileName":"src/viewport.ts","line":24,"character":12}],"type":{"type":"reflection","declaration":{"id":3287,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3288,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"src/viewport.ts","line":24,"character":14}]}}},{"id":3285,"name":"WatchableViewportKey","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Watchable keys in {@link Viewport}.\n- `isFullscreen`\n- `size`\n- `minSize`\n- `maxFullscreenSize`"},"sources":[{"fileName":"src/viewport.ts","line":22,"character":25}],"type":{"type":"union","types":[{"type":"stringLiteral","value":"isFullscreen"},{"type":"stringLiteral","value":"size"},{"type":"stringLiteral","value":"minSize"},{"type":"stringLiteral","value":"maxFullscreenSize"}]}}],"groups":[{"title":"Classes","kind":128,"children":[3205]},{"title":"Interfaces","kind":256,"children":[3201]},{"title":"Type aliases","kind":4194304,"children":[3286,3285]}],"sources":[{"fileName":"src/types/viewport.ts","line":1,"character":0}]}],"groups":[{"title":"External modules","kind":1,"children":[3386,3377,4713,12020,16027,11065,16484,16485,404,1000,374,3088,137,97,1829,1334,2931,346,105,453,9677,9065,10631,9170,9657,9241,9300,9665,9368,9052,9451,9552,12199,12226,14090,11820,14296,14366,12346,14580,12154,11138,15270,14912,12036,11526,15180,15347,15466,15770,15561,12726,12870,13137,10592,13445,13658,10941,14188,15780,15892,11332,13919,4501,38,11998,12005,12012,16117,14068,14071,14084,12830,14087,14032,14074,14077,12856,14081,4725,4743,797,692,3298,3200]}]}